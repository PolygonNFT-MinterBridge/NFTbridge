import { RootChain } from "./root_chain";
import { Web3SideChainClient } from "../utils";
import { IBaseClientConfig } from "..";
interface IChainBlockInfo {
    lastChildBlock: string;
    txBlockNumber: number;
}
export declare class ExitUtil {
    private maticClient_;
    rootChain: RootChain;
    requestConcurrency: number;
    config: IBaseClientConfig;
    constructor(client: Web3SideChainClient<IBaseClientConfig>, rootChain: RootChain);
    private getLogIndex_;
    getChainBlockInfo(burnTxHash: string): Promise<IChainBlockInfo>;
    private isCheckPointed_;
    isCheckPointed(burnTxHash: string): Promise<boolean>;
    private getRootBlockInfo;
    private getRootBlockInfoFromAPI;
    private getBlockProof;
    private getBlockProofFromAPI;
    buildPayloadForExit(burnTxHash: string, logEventSig: string, isFast: boolean): Promise<any>;
    private encodePayload_;
    getExitHash(burnTxHash: any, logEventSig: any): Promise<string>;
}
export {};
