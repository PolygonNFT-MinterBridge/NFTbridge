{"ast":null,"code":"/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateUpdateMask = exports.formatString = exports.toWebSafeBase64 = exports.findProjectId = exports.getExplicitProjectId = exports.addReadonlyGetter = exports.renameProperties = exports.getSdkVersion = void 0;\n\nvar credential_internal_1 = require(\"../credential/credential-internal\");\n\nvar validator = require(\"./validator\");\n\nvar sdkVersion;\n\nfunction getSdkVersion() {\n  if (!sdkVersion) {\n    var version = require('../../package.json').version; // eslint-disable-line @typescript-eslint/no-var-requires\n\n\n    sdkVersion = version;\n  }\n\n  return sdkVersion;\n}\n\nexports.getSdkVersion = getSdkVersion;\n/**\n * Renames properties on an object given a mapping from old to new property names.\n *\n * For example, this can be used to map underscore_cased properties to camelCase.\n *\n * @param {object} obj The object whose properties to rename.\n * @param {object} keyMap The mapping from old to new property names.\n */\n\nfunction renameProperties(obj, keyMap) {\n  Object.keys(keyMap).forEach(function (oldKey) {\n    if (oldKey in obj) {\n      var newKey = keyMap[oldKey]; // The old key's value takes precedence over the new key's value.\n\n      obj[newKey] = obj[oldKey];\n      delete obj[oldKey];\n    }\n  });\n}\n\nexports.renameProperties = renameProperties;\n/**\n * Defines a new read-only property directly on an object and returns the object.\n *\n * @param {object} obj The object on which to define the property.\n * @param {string} prop The name of the property to be defined or modified.\n * @param {any} value The value associated with the property.\n */\n\nfunction addReadonlyGetter(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value: value,\n    // Make this property read-only.\n    writable: false,\n    // Include this property during enumeration of obj's properties.\n    enumerable: true\n  });\n}\n\nexports.addReadonlyGetter = addReadonlyGetter;\n/**\n * Returns the Google Cloud project ID associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param app A Firebase app to get the project ID from.\n *\n * @return A project ID string or null.\n */\n\nfunction getExplicitProjectId(app) {\n  var options = app.options;\n\n  if (validator.isNonEmptyString(options.projectId)) {\n    return options.projectId;\n  }\n\n  var credential = app.options.credential;\n\n  if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n    return credential.projectId;\n  }\n\n  var projectId = process.env.GOOGLE_CLOUD_PROJECT || process.env.GCLOUD_PROJECT;\n\n  if (validator.isNonEmptyString(projectId)) {\n    return projectId;\n  }\n\n  return null;\n}\n\nexports.getExplicitProjectId = getExplicitProjectId;\n/**\n * Determines the Google Cloud project ID associated with a Firebase app. This method\n * first checks if a project ID is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit project ID is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the project ID from the local metadata service.\n *\n * @param app A Firebase app to get the project ID from.\n *\n * @return A project ID string or null.\n */\n\nfunction findProjectId(app) {\n  var projectId = getExplicitProjectId(app);\n\n  if (projectId) {\n    return Promise.resolve(projectId);\n  }\n\n  var credential = app.options.credential;\n\n  if (credential instanceof credential_internal_1.ComputeEngineCredential) {\n    return credential.getProjectId();\n  }\n\n  return Promise.resolve(null);\n}\n\nexports.findProjectId = findProjectId;\n/**\n * Encodes data using web-safe-base64.\n *\n * @param {Buffer} data The raw data byte input.\n * @return {string} The base64-encoded result.\n */\n\nfunction toWebSafeBase64(data) {\n  return data.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n}\n\nexports.toWebSafeBase64 = toWebSafeBase64;\n/**\n * Formats a string of form 'project/{projectId}/{api}' and replaces\n * with corresponding arguments {projectId: '1234', api: 'resource'}\n * and returns output: 'project/1234/resource'.\n *\n * @param {string} str The original string where the param need to be\n *     replaced.\n * @param {object=} params The optional parameters to replace in the\n *     string.\n * @return {string} The resulting formatted string.\n */\n\nfunction formatString(str, params) {\n  var formatted = str;\n  Object.keys(params || {}).forEach(function (key) {\n    formatted = formatted.replace(new RegExp('{' + key + '}', 'g'), params[key]);\n  });\n  return formatted;\n}\n\nexports.formatString = formatString;\n/**\n * Generates the update mask for the provided object.\n * Note this will ignore the last key with value undefined.\n *\n * @param obj The object to generate the update mask for.\n * @param terminalPaths The optional map of keys for maximum paths to traverse.\n *      Nested objects beyond that path will be ignored. This is useful for\n *      keys with variable object values.\n * @param root The path so far.\n * @return The computed update mask list.\n */\n\nfunction generateUpdateMask(obj, terminalPaths, root) {\n  if (terminalPaths === void 0) {\n    terminalPaths = [];\n  }\n\n  if (root === void 0) {\n    root = '';\n  }\n\n  var updateMask = [];\n\n  if (!validator.isNonNullObject(obj)) {\n    return updateMask;\n  }\n\n  var _loop_1 = function (key) {\n    if (typeof obj[key] !== 'undefined') {\n      var nextPath = root ? root + \".\" + key : key; // We hit maximum path.\n      // Consider switching to Set<string> if the list grows too large.\n\n      if (terminalPaths.indexOf(nextPath) !== -1) {\n        // Add key and stop traversing this branch.\n        updateMask.push(key);\n      } else {\n        var maskList = generateUpdateMask(obj[key], terminalPaths, nextPath);\n\n        if (maskList.length > 0) {\n          maskList.forEach(function (mask) {\n            updateMask.push(key + \".\" + mask);\n          });\n        } else {\n          updateMask.push(key);\n        }\n      }\n    }\n  };\n\n  for (var key in obj) {\n    _loop_1(key);\n  }\n\n  return updateMask;\n}\n\nexports.generateUpdateMask = generateUpdateMask;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/firebase-admin/lib/utils/index.js"],"names":["Object","defineProperty","exports","value","generateUpdateMask","formatString","toWebSafeBase64","findProjectId","getExplicitProjectId","addReadonlyGetter","renameProperties","getSdkVersion","credential_internal_1","require","validator","sdkVersion","version","obj","keyMap","keys","forEach","oldKey","newKey","prop","writable","enumerable","app","options","isNonEmptyString","projectId","credential","ServiceAccountCredential","process","env","GOOGLE_CLOUD_PROJECT","GCLOUD_PROJECT","Promise","resolve","ComputeEngineCredential","getProjectId","data","toString","replace","str","params","formatted","key","RegExp","terminalPaths","root","updateMask","isNonNullObject","_loop_1","nextPath","indexOf","push","maskList","length","mask"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateUpdateMask = exports.formatString = exports.toWebSafeBase64 = exports.findProjectId = exports.getExplicitProjectId = exports.addReadonlyGetter = exports.renameProperties = exports.getSdkVersion = void 0;\nvar credential_internal_1 = require(\"../credential/credential-internal\");\nvar validator = require(\"./validator\");\nvar sdkVersion;\nfunction getSdkVersion() {\n    if (!sdkVersion) {\n        var version = require('../../package.json').version; // eslint-disable-line @typescript-eslint/no-var-requires\n        sdkVersion = version;\n    }\n    return sdkVersion;\n}\nexports.getSdkVersion = getSdkVersion;\n/**\n * Renames properties on an object given a mapping from old to new property names.\n *\n * For example, this can be used to map underscore_cased properties to camelCase.\n *\n * @param {object} obj The object whose properties to rename.\n * @param {object} keyMap The mapping from old to new property names.\n */\nfunction renameProperties(obj, keyMap) {\n    Object.keys(keyMap).forEach(function (oldKey) {\n        if (oldKey in obj) {\n            var newKey = keyMap[oldKey];\n            // The old key's value takes precedence over the new key's value.\n            obj[newKey] = obj[oldKey];\n            delete obj[oldKey];\n        }\n    });\n}\nexports.renameProperties = renameProperties;\n/**\n * Defines a new read-only property directly on an object and returns the object.\n *\n * @param {object} obj The object on which to define the property.\n * @param {string} prop The name of the property to be defined or modified.\n * @param {any} value The value associated with the property.\n */\nfunction addReadonlyGetter(obj, prop, value) {\n    Object.defineProperty(obj, prop, {\n        value: value,\n        // Make this property read-only.\n        writable: false,\n        // Include this property during enumeration of obj's properties.\n        enumerable: true,\n    });\n}\nexports.addReadonlyGetter = addReadonlyGetter;\n/**\n * Returns the Google Cloud project ID associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param app A Firebase app to get the project ID from.\n *\n * @return A project ID string or null.\n */\nfunction getExplicitProjectId(app) {\n    var options = app.options;\n    if (validator.isNonEmptyString(options.projectId)) {\n        return options.projectId;\n    }\n    var credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return credential.projectId;\n    }\n    var projectId = process.env.GOOGLE_CLOUD_PROJECT || process.env.GCLOUD_PROJECT;\n    if (validator.isNonEmptyString(projectId)) {\n        return projectId;\n    }\n    return null;\n}\nexports.getExplicitProjectId = getExplicitProjectId;\n/**\n * Determines the Google Cloud project ID associated with a Firebase app. This method\n * first checks if a project ID is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit project ID is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the project ID from the local metadata service.\n *\n * @param app A Firebase app to get the project ID from.\n *\n * @return A project ID string or null.\n */\nfunction findProjectId(app) {\n    var projectId = getExplicitProjectId(app);\n    if (projectId) {\n        return Promise.resolve(projectId);\n    }\n    var credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ComputeEngineCredential) {\n        return credential.getProjectId();\n    }\n    return Promise.resolve(null);\n}\nexports.findProjectId = findProjectId;\n/**\n * Encodes data using web-safe-base64.\n *\n * @param {Buffer} data The raw data byte input.\n * @return {string} The base64-encoded result.\n */\nfunction toWebSafeBase64(data) {\n    return data.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n}\nexports.toWebSafeBase64 = toWebSafeBase64;\n/**\n * Formats a string of form 'project/{projectId}/{api}' and replaces\n * with corresponding arguments {projectId: '1234', api: 'resource'}\n * and returns output: 'project/1234/resource'.\n *\n * @param {string} str The original string where the param need to be\n *     replaced.\n * @param {object=} params The optional parameters to replace in the\n *     string.\n * @return {string} The resulting formatted string.\n */\nfunction formatString(str, params) {\n    var formatted = str;\n    Object.keys(params || {}).forEach(function (key) {\n        formatted = formatted.replace(new RegExp('{' + key + '}', 'g'), params[key]);\n    });\n    return formatted;\n}\nexports.formatString = formatString;\n/**\n * Generates the update mask for the provided object.\n * Note this will ignore the last key with value undefined.\n *\n * @param obj The object to generate the update mask for.\n * @param terminalPaths The optional map of keys for maximum paths to traverse.\n *      Nested objects beyond that path will be ignored. This is useful for\n *      keys with variable object values.\n * @param root The path so far.\n * @return The computed update mask list.\n */\nfunction generateUpdateMask(obj, terminalPaths, root) {\n    if (terminalPaths === void 0) { terminalPaths = []; }\n    if (root === void 0) { root = ''; }\n    var updateMask = [];\n    if (!validator.isNonNullObject(obj)) {\n        return updateMask;\n    }\n    var _loop_1 = function (key) {\n        if (typeof obj[key] !== 'undefined') {\n            var nextPath = root ? root + \".\" + key : key;\n            // We hit maximum path.\n            // Consider switching to Set<string> if the list grows too large.\n            if (terminalPaths.indexOf(nextPath) !== -1) {\n                // Add key and stop traversing this branch.\n                updateMask.push(key);\n            }\n            else {\n                var maskList = generateUpdateMask(obj[key], terminalPaths, nextPath);\n                if (maskList.length > 0) {\n                    maskList.forEach(function (mask) {\n                        updateMask.push(key + \".\" + mask);\n                    });\n                }\n                else {\n                    updateMask.push(key);\n                }\n            }\n        }\n    };\n    for (var key in obj) {\n        _loop_1(key);\n    }\n    return updateMask;\n}\nexports.generateUpdateMask = generateUpdateMask;\n"]},"metadata":{},"sourceType":"script"}