{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar types_1 = require(\"./types\");\n\nvar util_1 = require(\"./util\");\n\nvar TRANSACTION_TYPE = 2;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\n\nvar FeeMarketEIP1559Transaction =\n/** @class */\nfunction (_super) {\n  __extends(FeeMarketEIP1559Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function FeeMarketEIP1559Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _a, _b;\n\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n\n\n    _this.DEFAULT_HARDFORK = 'london';\n    var chainId = txData.chainId,\n        accessList = txData.accessList,\n        maxFeePerGas = txData.maxFeePerGas,\n        maxPriorityFeePerGas = txData.maxPriorityFeePerGas;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainIdBN();\n\n    if (!_this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common');\n    }\n\n    _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]); // Populate the access list fields\n\n    var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON; // Verify the access list format.\n\n    util_1.AccessLists.verifyAccessList(_this.accessList);\n    _this.maxFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n    _this.maxPriorityFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n\n    _this._validateCannotExceedMaxInteger({\n      maxFeePerGas: _this.maxFeePerGas,\n      maxPriorityFeePerGas: _this.maxPriorityFeePerGas\n    });\n\n    if (_this.gasLimit.mul(_this.maxFeePerGas).gt(ethereumjs_util_1.MAX_INTEGER)) {\n      var msg = _this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n\n      throw new Error(msg);\n    }\n\n    if (_this.maxFeePerGas.lt(_this.maxPriorityFeePerGas)) {\n      var msg = _this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n\n      throw new Error(msg);\n    }\n\n    if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n      var msg = _this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n\n      throw new Error(msg);\n    }\n\n    if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = _this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n\n      throw new Error(msg);\n    }\n\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderR\", {\n    /**\n     * EIP-2930 alias for `r`\n     *\n     * @deprecated use `r` instead\n     */\n    get: function () {\n      return this.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderS\", {\n    /**\n     * EIP-2930 alias for `s`\n     *\n     * @deprecated use `s` instead\n     */\n    get: function () {\n      return this.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"yParity\", {\n    /**\n     * EIP-2930 alias for `v`\n     *\n     * @deprecated use `v` instead\n     */\n    get: function () {\n      return this.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n\n  FeeMarketEIP1559Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new FeeMarketEIP1559Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n\n\n  FeeMarketEIP1559Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\"Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: \".concat(TRANSACTION_TYPE, \", received: \").concat(serialized.slice(0, 1).toString('hex')));\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n\n    return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n   */\n\n\n  FeeMarketEIP1559Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n\n\n  FeeMarketEIP1559Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n    }\n\n    var _a = __read(values, 12),\n        chainId = _a[0],\n        nonce = _a[1],\n        maxPriorityFeePerGas = _a[2],\n        maxFeePerGas = _a[3],\n        gasLimit = _a[4],\n        to = _a[5],\n        value = _a[6],\n        data = _a[7],\n        accessList = _a[8],\n        v = _a[9],\n        r = _a[10],\n        s = _a[11];\n\n    (0, ethereumjs_util_1.validateNoLeadingZeroes)({\n      nonce: nonce,\n      maxPriorityFeePerGas: maxPriorityFeePerGas,\n      maxFeePerGas: maxFeePerGas,\n      gasLimit: gasLimit,\n      value: value,\n      v: v,\n      r: r,\n      s: s\n    });\n    return new FeeMarketEIP1559Transaction({\n      chainId: new ethereumjs_util_1.BN(chainId),\n      nonce: nonce,\n      maxPriorityFeePerGas: maxPriorityFeePerGas,\n      maxFeePerGas: maxFeePerGas,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n      v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getDataFee = function () {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n\n    var cost = _super.prototype.getDataFee.call(this);\n\n    cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n\n    return cost;\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getUpfrontCost = function (baseFee) {\n    if (baseFee === void 0) {\n      baseFee = new ethereumjs_util_1.BN(0);\n    }\n\n    var inclusionFeePerGas = ethereumjs_util_1.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee));\n    var gasPrice = inclusionFeePerGas.add(baseFee);\n    return this.gasLimit.mul(gasPrice).add(this.value);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.raw = function () {\n    return [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxFeePerGas), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data, this.accessList, this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.serialize = function () {\n    var base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n  };\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var base = this.raw().slice(0, 9);\n    var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n\n    if (hashMessage) {\n      return (0, ethereumjs_util_1.keccak256)(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.hash = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());\n      }\n\n      return this.cache.hash;\n    }\n\n    return (0, ethereumjs_util_1.keccak256)(this.serialize());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getMessageToVerifySignature = function () {\n    return this.getMessageToSign();\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('Cannot call this method if transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n\n      throw new Error(msg);\n    }\n\n    var _b = this,\n        v = _b.v,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return (0, ethereumjs_util_1.ecrecover)(msgHash, v.addn(27), // Recover the 27 which was stripped from ecsign\n      (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));\n    } catch (e) {\n      var msg = this._errorMsg('Invalid Signature');\n\n      throw new Error(msg);\n    }\n  };\n\n  FeeMarketEIP1559Transaction.prototype._processSignature = function (v, r, s) {\n    var opts = {\n      common: this.common\n    };\n    return FeeMarketEIP1559Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n      maxFeePerGas: this.maxFeePerGas,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: new ethereumjs_util_1.BN(v - 27),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.toJSON = function () {\n    var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),\n      nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n      maxPriorityFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxPriorityFeePerGas),\n      maxFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxFeePerGas),\n      gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, ethereumjs_util_1.bnToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined\n    };\n  };\n  /**\n   * Return a compact error string representation of the object\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.errorStr = function () {\n    var errorStr = this._getSharedErrorPostfix();\n\n    errorStr += \" maxFeePerGas=\".concat(this.maxFeePerGas, \" maxPriorityFeePerGas=\").concat(this.maxPriorityFeePerGas);\n    return errorStr;\n  };\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype._errorMsg = function (msg) {\n    return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n  };\n\n  return FeeMarketEIP1559Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = FeeMarketEIP1559Transaction;","map":{"version":3,"sources":["../src/eip1559Transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar types_1 = require(\"./types\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 2;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nvar FeeMarketEIP1559Transaction = /** @class */ (function (_super) {\n    __extends(FeeMarketEIP1559Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function FeeMarketEIP1559Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _a, _b;\n        var _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        _this.DEFAULT_HARDFORK = 'london';\n        var chainId = txData.chainId, accessList = txData.accessList, maxFeePerGas = txData.maxFeePerGas, maxPriorityFeePerGas = txData.maxPriorityFeePerGas;\n        _this.common = _this._getCommon(opts.common, chainId);\n        _this.chainId = _this.common.chainIdBN();\n        if (!_this.common.isActivatedEIP(1559)) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n        _this.accessList = accessListData.accessList;\n        _this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_1.AccessLists.verifyAccessList(_this.accessList);\n        _this.maxFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n        _this.maxPriorityFeePerGas = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n        _this._validateCannotExceedMaxInteger({\n            maxFeePerGas: _this.maxFeePerGas,\n            maxPriorityFeePerGas: _this.maxPriorityFeePerGas,\n        });\n        if (_this.gasLimit.mul(_this.maxFeePerGas).gt(ethereumjs_util_1.MAX_INTEGER)) {\n            var msg = _this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (_this.maxFeePerGas.lt(_this.maxPriorityFeePerGas)) {\n            var msg = _this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n            var msg = _this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n            throw new Error(msg);\n        }\n        if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = _this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderR\", {\n        /**\n         * EIP-2930 alias for `r`\n         *\n         * @deprecated use `r` instead\n         */\n        get: function () {\n            return this.r;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderS\", {\n        /**\n         * EIP-2930 alias for `s`\n         *\n         * @deprecated use `s` instead\n         */\n        get: function () {\n            return this.s;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"yParity\", {\n        /**\n         * EIP-2930 alias for `v`\n         *\n         * @deprecated use `v` instead\n         */\n        get: function () {\n            return this.v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    FeeMarketEIP1559Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new FeeMarketEIP1559Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */\n    FeeMarketEIP1559Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(\"Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: \".concat(TRANSACTION_TYPE, \", received: \").concat(serialized\n                .slice(0, 1)\n                .toString('hex')));\n        }\n        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n     *\n     * Note: This means that the Buffer should start with 0x01.\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n     */\n    FeeMarketEIP1559Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    FeeMarketEIP1559Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (values.length !== 9 && values.length !== 12) {\n            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n        }\n        var _a = __read(values, 12), chainId = _a[0], nonce = _a[1], maxPriorityFeePerGas = _a[2], maxFeePerGas = _a[3], gasLimit = _a[4], to = _a[5], value = _a[6], data = _a[7], accessList = _a[8], v = _a[9], r = _a[10], s = _a[11];\n        (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce: nonce, maxPriorityFeePerGas: maxPriorityFeePerGas, maxFeePerGas: maxFeePerGas, gasLimit: gasLimit, value: value, v: v, r: r, s: s });\n        return new FeeMarketEIP1559Transaction({\n            chainId: new ethereumjs_util_1.BN(chainId),\n            nonce: nonce,\n            maxPriorityFeePerGas: maxPriorityFeePerGas,\n            maxFeePerGas: maxFeePerGas,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n            v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    FeeMarketEIP1559Transaction.prototype.getDataFee = function () {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        var cost = _super.prototype.getDataFee.call(this);\n        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return cost;\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    FeeMarketEIP1559Transaction.prototype.getUpfrontCost = function (baseFee) {\n        if (baseFee === void 0) { baseFee = new ethereumjs_util_1.BN(0); }\n        var inclusionFeePerGas = ethereumjs_util_1.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee));\n        var gasPrice = inclusionFeePerGas.add(baseFee);\n        return this.gasLimit.mul(gasPrice).add(this.value);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n     */\n    FeeMarketEIP1559Transaction.prototype.raw = function () {\n        return [\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.maxFeePerGas),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    FeeMarketEIP1559Transaction.prototype.serialize = function () {\n        var base = this.raw();\n        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n    };\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n    FeeMarketEIP1559Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var base = this.raw().slice(0, 9);\n        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n        if (hashMessage) {\n            return (0, ethereumjs_util_1.keccak256)(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    FeeMarketEIP1559Transaction.prototype.hash = function () {\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());\n            }\n            return this.cache.hash;\n        }\n        return (0, ethereumjs_util_1.keccak256)(this.serialize());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    FeeMarketEIP1559Transaction.prototype.getMessageToVerifySignature = function () {\n        return this.getMessageToSign();\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    FeeMarketEIP1559Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('Cannot call this method if transaction is not signed');\n            throw new Error(msg);\n        }\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        var _b = this, v = _b.v, r = _b.r, s = _b.s;\n        try {\n            return (0, ethereumjs_util_1.ecrecover)(msgHash, v.addn(27), // Recover the 27 which was stripped from ecsign\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));\n        }\n        catch (e) {\n            var msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    };\n    FeeMarketEIP1559Transaction.prototype._processSignature = function (v, r, s) {\n        var opts = {\n            common: this.common,\n        };\n        return FeeMarketEIP1559Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: new ethereumjs_util_1.BN(v - 27),\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    FeeMarketEIP1559Transaction.prototype.toJSON = function () {\n        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),\n            nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n            maxPriorityFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0, ethereumjs_util_1.bnToHex)(this.maxFeePerGas),\n            gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, ethereumjs_util_1.bnToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined,\n        };\n    };\n    /**\n     * Return a compact error string representation of the object\n     */\n    FeeMarketEIP1559Transaction.prototype.errorStr = function () {\n        var errorStr = this._getSharedErrorPostfix();\n        errorStr += \" maxFeePerGas=\".concat(this.maxFeePerGas, \" maxPriorityFeePerGas=\").concat(this.maxPriorityFeePerGas);\n        return errorStr;\n    };\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    FeeMarketEIP1559Transaction.prototype._errorMsg = function (msg) {\n        return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n    };\n    return FeeMarketEIP1559Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = FeeMarketEIP1559Transaction;\n//# sourceMappingURL=eip1559Transaction.js.map"]},"metadata":{},"sourceType":"script"}