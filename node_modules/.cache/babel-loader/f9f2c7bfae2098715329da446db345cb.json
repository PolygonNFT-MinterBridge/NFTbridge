{"ast":null,"code":"const Web3 = require(\"web3\");\n\nconst config = require(\"./config.json\");\n\nconst rootChainManager = require(\"./abi/rootChainManager\");\n\nconst axios = require('axios').default;\n/**\n * set isOnRootChain to true if input address is of root chain, else set to false (i.e if on child chain)\n * set isTestnet to true if input addzzress is of testnet chain, else set to flase (i.e if on mainnet)\n */\n// const APIKEY = 'ckey_93bdd057b68a49b0a8a05372a6a'\n\n\nexport const checkMapping = async (addressValue, isOnRootChain, isTestnet) => {\n  let web3;\n  let contract;\n\n  if (isTestnet === true) {\n    web3 = await new Web3(new Web3.providers.HttpProvider(config.GOERLI_RPC));\n    contract = await new web3.eth.Contract(rootChainManager, config.ROOTCHAIN_MANAGER_PROXY_GOERLI);\n  } else {\n    web3 = await new Web3(new Web3.providers.HttpProvider(config.ETH_RPC));\n    contract = await new web3.eth.Contract(rootChainManager, config.ROOTCHAIN_MANAGER_PROXY_MAINNET);\n  }\n\n  console.log(contract); // console.log(rootChainManager);\n\n  if (isOnRootChain === true) {\n    const isMapped = await contract.methods.rootToChildToken(addressValue).call();\n    return [isMapped !== \"0x0000000000000000000000000000000000000000\", isMapped];\n  } else if (isOnRootChain === false) {\n    const isMapped = await contract.methods.childToRootToken(addressValue).call();\n    return [isMapped !== \"0x0000000000000000000000000000000000000000\", isMapped];\n  } else {\n    throw new Error(\"isOnRootChain_NOT_DEFINED\");\n  }\n}; //test \n\nexport const getMetadata = async (chain_id, contract_address, token_id) => {\n  const URL = await axios({\n    url: \"https://api.covalenthq.com/v1/chains/status/${chain_id}/tokens/${contract_address}/nft_metadata/${token_id}/?key={process.env.covalent_key}&nft=true\"\n  });\n  const config = {\n    baseURL: URL,\n    headers: {\n      Accept: \"application/json\"\n    }\n  };\n  const request = await axios(config);\n\n  if (request.status === 200) {\n    console.log(\"API res\", request.data.data.items); //  const metadata = request.data.data.items[0].nft_data[0].token_url;\n    //  const token_balance = request.data.data.items[0].nft_data[0].token_balance;\n    //  const image = request.data.data.items[0].nft_data[0].external_data?.image;\n    //  return { metadata, token_balance, image };\n\n    return request.data.data.items[0]; // check for undefined in fronted, fetch \"image\"\n  } else if (request.status === 404 || request.status === 500) {\n    throw new Error(\"Not able to locate NFT\");\n  } else {\n    throw new Error(\"NFT not found\");\n  }\n};","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/src/utils/helpers.js"],"names":["Web3","require","config","rootChainManager","axios","default","checkMapping","addressValue","isOnRootChain","isTestnet","web3","contract","providers","HttpProvider","GOERLI_RPC","eth","Contract","ROOTCHAIN_MANAGER_PROXY_GOERLI","ETH_RPC","ROOTCHAIN_MANAGER_PROXY_MAINNET","console","log","isMapped","methods","rootToChildToken","call","childToRootToken","Error","getMetadata","chain_id","contract_address","token_id","URL","url","baseURL","headers","Accept","request","status","data","items"],"mappings":"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","sourcesContent":["const Web3 = require(\"web3\");\nconst config = require(\"./config.json\")\nconst rootChainManager = require(\"./abi/rootChainManager\")\nconst axios = require('axios').default;\n\n\n/**\n * set isOnRootChain to true if input address is of root chain, else set to false (i.e if on child chain)\n * set isTestnet to true if input addzzress is of testnet chain, else set to flase (i.e if on mainnet)\n */\n// const APIKEY = 'ckey_93bdd057b68a49b0a8a05372a6a'\nexport const checkMapping = async (addressValue, isOnRootChain, isTestnet) => {\n\n    let web3;\n    let contract;\n\n    if (isTestnet === true) {\n        web3 = await new Web3(new Web3.providers.HttpProvider(config.GOERLI_RPC))\n\n        contract = await new web3.eth.Contract(\n            rootChainManager,\n            config.ROOTCHAIN_MANAGER_PROXY_GOERLI,\n        )\n\n    } else {\n        web3 = await new Web3(new Web3.providers.HttpProvider(config.ETH_RPC))\n\n        contract = await new web3.eth.Contract(\n            rootChainManager,\n            config.ROOTCHAIN_MANAGER_PROXY_MAINNET,\n        )\n    }\n\n    console.log(contract)\n\n    // console.log(rootChainManager);\n\n    if (isOnRootChain === true) {\n        const isMapped = await contract.methods.rootToChildToken(addressValue).call();\n        return [(isMapped !== \"0x0000000000000000000000000000000000000000\"), isMapped]\n    }\n    else if (isOnRootChain === false) {\n        const isMapped = await contract.methods.childToRootToken(addressValue).call();\n        return [(isMapped !== \"0x0000000000000000000000000000000000000000\"), isMapped]\n    }\n    else {\n        throw new Error(\"isOnRootChain_NOT_DEFINED\")\n    }\n\n}\n\n//test \n\nexport const getMetadata = async (chain_id, contract_address, token_id) => {\n    \n    const URL = await axios({\n        url: \"https://api.covalenthq.com/v1/chains/status/${chain_id}/tokens/${contract_address}/nft_metadata/${token_id}/?key={process.env.covalent_key}&nft=true\"});  \n    \n    const config = {\n        baseURL: URL,\n        headers: { Accept: \"application/json\" },\n    };\n\n    const request = await axios(config);\n\n    if (request.status === 200) {\n        console.log(\"API res\", request.data.data.items)\n        //  const metadata = request.data.data.items[0].nft_data[0].token_url;\n        //  const token_balance = request.data.data.items[0].nft_data[0].token_balance;\n        //  const image = request.data.data.items[0].nft_data[0].external_data?.image;\n\n        //  return { metadata, token_balance, image };\n        return request.data.data.items[0];\n        // check for undefined in fronted, fetch \"image\"\n    }\n    else if (request.status === 404 || request.status === 500) {\n        throw new Error(\"Not able to locate NFT\")\n    } else {\n        throw new Error(\"NFT not found\");\n    }\n}\n"]},"metadata":{},"sourceType":"module"}