{"ast":null,"code":"\"use strict\"; // Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserRefreshClient = void 0;\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass UserRefreshClient extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) {\n    const opts = optionsOrClientId && typeof optionsOrClientId === 'object' ? optionsOrClientId : {\n      clientId: optionsOrClientId,\n      clientSecret,\n      refreshToken,\n      eagerRefreshThresholdMillis,\n      forceRefreshOnFailure\n    };\n    super({\n      clientId: opts.clientId,\n      clientSecret: opts.clientSecret,\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n      forceRefreshOnFailure: opts.forceRefreshOnFailure\n    });\n    this._refreshToken = opts.refreshToken;\n    this.credentials.refresh_token = opts.refreshToken;\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken An ignored refreshToken..\n   * @param callback Optional callback.\n   */\n\n\n  async refreshTokenNoCache( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    return super.refreshTokenNoCache(this._refreshToken);\n  }\n  /**\n   * Create a UserRefreshClient credentials instance using the given input\n   * options.\n   * @param json The input object.\n   */\n\n\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the user refresh token');\n    }\n\n    if (json.type !== 'authorized_user') {\n      throw new Error('The incoming JSON object does not have the \"authorized_user\" type');\n    }\n\n    if (!json.client_id) {\n      throw new Error('The incoming JSON object does not contain a client_id field');\n    }\n\n    if (!json.client_secret) {\n      throw new Error('The incoming JSON object does not contain a client_secret field');\n    }\n\n    if (!json.refresh_token) {\n      throw new Error('The incoming JSON object does not contain a refresh_token field');\n    }\n\n    this._clientId = json.client_id;\n    this._clientSecret = json.client_secret;\n    this._refreshToken = json.refresh_token;\n    this.credentials.refresh_token = json.refresh_token;\n    this.quotaProjectId = json.quota_project_id;\n  }\n\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(() => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n\n  async fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        return reject(new Error('Must pass in a stream containing the user refresh token.'));\n      }\n\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          return resolve();\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    });\n  }\n\n}\n\nexports.UserRefreshClient = UserRefreshClient;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/common/node_modules/google-auth-library/build/src/auth/refreshclient.js"],"names":["Object","defineProperty","exports","value","UserRefreshClient","oauth2client_1","require","OAuth2Client","constructor","optionsOrClientId","clientSecret","refreshToken","eagerRefreshThresholdMillis","forceRefreshOnFailure","opts","clientId","_refreshToken","credentials","refresh_token","refreshTokenNoCache","fromJSON","json","Error","type","client_id","client_secret","_clientId","_clientSecret","quotaProjectId","quota_project_id","fromStream","inputStream","callback","fromStreamAsync","then","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","err"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserRefreshClient = void 0;\nconst oauth2client_1 = require(\"./oauth2client\");\nclass UserRefreshClient extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) {\n        const opts = optionsOrClientId && typeof optionsOrClientId === 'object'\n            ? optionsOrClientId\n            : {\n                clientId: optionsOrClientId,\n                clientSecret,\n                refreshToken,\n                eagerRefreshThresholdMillis,\n                forceRefreshOnFailure,\n            };\n        super({\n            clientId: opts.clientId,\n            clientSecret: opts.clientSecret,\n            eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n            forceRefreshOnFailure: opts.forceRefreshOnFailure,\n        });\n        this._refreshToken = opts.refreshToken;\n        this.credentials.refresh_token = opts.refreshToken;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken An ignored refreshToken..\n     * @param callback Optional callback.\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        return super.refreshTokenNoCache(this._refreshToken);\n    }\n    /**\n     * Create a UserRefreshClient credentials instance using the given input\n     * options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the user refresh token');\n        }\n        if (json.type !== 'authorized_user') {\n            throw new Error('The incoming JSON object does not have the \"authorized_user\" type');\n        }\n        if (!json.client_id) {\n            throw new Error('The incoming JSON object does not contain a client_id field');\n        }\n        if (!json.client_secret) {\n            throw new Error('The incoming JSON object does not contain a client_secret field');\n        }\n        if (!json.refresh_token) {\n            throw new Error('The incoming JSON object does not contain a refresh_token field');\n        }\n        this._clientId = json.client_id;\n        this._clientSecret = json.client_secret;\n        this._refreshToken = json.refresh_token;\n        this.credentials.refresh_token = json.refresh_token;\n        this.quotaProjectId = json.quota_project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    async fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                return reject(new Error('Must pass in a stream containing the user refresh token.'));\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    return resolve();\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n}\nexports.UserRefreshClient = UserRefreshClient;\n//# sourceMappingURL=refreshclient.js.map"]},"metadata":{},"sourceType":"script"}