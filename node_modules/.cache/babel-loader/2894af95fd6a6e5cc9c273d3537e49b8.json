{"ast":null,"code":"/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MachineLearningApiClient = exports.isGcsTfliteModelOptions = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar ML_V1BETA2_API = 'https://firebaseml.googleapis.com/v1beta2';\nvar FIREBASE_VERSION_HEADER = {\n  'X-Firebase-Client': \"fire-admin-node/\" + utils.getSdkVersion()\n}; // Operation polling defaults\n\nvar POLL_DEFAULT_MAX_TIME_MILLISECONDS = 120000; // Maximum overall 2 minutes\n\nvar POLL_BASE_WAIT_TIME_MILLISECONDS = 3000; // Start with 3 second delay\n\nvar POLL_MAX_WAIT_TIME_MILLISECONDS = 30000; // Maximum 30 second delay\n\nfunction isGcsTfliteModelOptions(options) {\n  var _a, _b;\n\n  var gcsUri = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.tfliteModel) === null || _b === void 0 ? void 0 : _b.gcsTfliteUri;\n  return typeof gcsUri !== 'undefined';\n}\n\nexports.isGcsTfliteModelOptions = isGcsTfliteModelOptions;\n/**\n * Class that facilitates sending requests to the Firebase ML backend API.\n *\n * @private\n */\n\nvar MachineLearningApiClient =\n/** @class */\nfunction () {\n  function MachineLearningApiClient(app) {\n    this.app = app;\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'First argument passed to admin.machineLearning() must be a valid ' + 'Firebase app instance.');\n    }\n\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n\n  MachineLearningApiClient.prototype.createModel = function (model) {\n    var _this = this;\n\n    if (!validator.isNonNullObject(model) || !validator.isNonEmptyString(model.displayName)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model content.');\n      return Promise.reject(err);\n    }\n\n    return this.getProjectUrl().then(function (url) {\n      var request = {\n        method: 'POST',\n        url: url + \"/models\",\n        data: model\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  MachineLearningApiClient.prototype.updateModel = function (modelId, model, updateMask) {\n    var _this = this;\n\n    if (!validator.isNonEmptyString(modelId) || !validator.isNonNullObject(model) || !validator.isNonEmptyArray(updateMask)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model or mask content.');\n      return Promise.reject(err);\n    }\n\n    return this.getProjectUrl().then(function (url) {\n      var request = {\n        method: 'PATCH',\n        url: url + \"/models/\" + modelId + \"?updateMask=\" + updateMask.join(),\n        data: model\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  MachineLearningApiClient.prototype.getModel = function (modelId) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getModelName(modelId);\n    }).then(function (modelName) {\n      return _this.getResourceWithShortName(modelName);\n    });\n  };\n\n  MachineLearningApiClient.prototype.getOperation = function (operationName) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getResourceWithFullName(operationName);\n    });\n  };\n\n  MachineLearningApiClient.prototype.listModels = function (options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!validator.isNonNullObject(options)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid ListModelsOptions');\n      return Promise.reject(err);\n    }\n\n    if (typeof options.filter !== 'undefined' && !validator.isNonEmptyString(options.filter)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid list filter.');\n      return Promise.reject(err);\n    }\n\n    if (typeof options.pageSize !== 'undefined') {\n      if (!validator.isNumber(options.pageSize)) {\n        var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid page size.');\n        return Promise.reject(err);\n      }\n\n      if (options.pageSize < 1 || options.pageSize > 100) {\n        var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Page size must be between 1 and 100.');\n        return Promise.reject(err);\n      }\n    }\n\n    if (typeof options.pageToken !== 'undefined' && !validator.isNonEmptyString(options.pageToken)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Next page token must be a non-empty string.');\n      return Promise.reject(err);\n    }\n\n    return this.getProjectUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/models\",\n        data: options\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  MachineLearningApiClient.prototype.deleteModel = function (modelId) {\n    var _this = this;\n\n    return this.getProjectUrl().then(function (url) {\n      var modelName = _this.getModelName(modelId);\n\n      var request = {\n        method: 'DELETE',\n        url: url + \"/\" + modelName\n      };\n      return _this.sendRequest(request);\n    });\n  };\n  /**\n   * Handles a Long Running Operation coming back from the server.\n   *\n   * @param op The operation to handle\n   * @param options The options for polling\n   */\n\n\n  MachineLearningApiClient.prototype.handleOperation = function (op, options) {\n    if (op.done) {\n      if (op.response) {\n        return Promise.resolve(op.response);\n      } else if (op.error) {\n        var err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(op.error.code, op.error.message);\n        return Promise.reject(err);\n      } // Done operations must have either a response or an error.\n\n\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', 'Invalid operation response.');\n    } // Operation is not done\n\n\n    if (options === null || options === void 0 ? void 0 : options.wait) {\n      return this.pollOperationWithExponentialBackoff(op.name, options);\n    }\n\n    var metadata = op.metadata || {};\n    var metadataType = metadata['@type'] || '';\n\n    if (!metadataType.includes('ModelOperationMetadata')) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Unknown Metadata type: \" + JSON.stringify(metadata));\n    }\n\n    return this.getModel(extractModelId(metadata.name));\n  }; // baseWaitMillis and maxWaitMillis should only ever be modified by unit tests to run faster.\n\n\n  MachineLearningApiClient.prototype.pollOperationWithExponentialBackoff = function (opName, options) {\n    var _this = this;\n\n    var _a, _b, _c;\n\n    var maxTimeMilliseconds = (_a = options === null || options === void 0 ? void 0 : options.maxTimeMillis) !== null && _a !== void 0 ? _a : POLL_DEFAULT_MAX_TIME_MILLISECONDS;\n    var baseWaitMillis = (_b = options === null || options === void 0 ? void 0 : options.baseWaitMillis) !== null && _b !== void 0 ? _b : POLL_BASE_WAIT_TIME_MILLISECONDS;\n    var maxWaitMillis = (_c = options === null || options === void 0 ? void 0 : options.maxWaitMillis) !== null && _c !== void 0 ? _c : POLL_MAX_WAIT_TIME_MILLISECONDS;\n    var poller = new api_request_1.ExponentialBackoffPoller(baseWaitMillis, maxWaitMillis, maxTimeMilliseconds);\n    return poller.poll(function () {\n      return _this.getOperation(opName).then(function (responseData) {\n        if (!responseData.done) {\n          return null;\n        }\n\n        if (responseData.error) {\n          var err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(responseData.error.code, responseData.error.message);\n          throw err;\n        }\n\n        return responseData.response;\n      });\n    });\n  };\n  /**\n   * Gets the specified resource from the ML API. Resource names must be the short names without project\n   * ID prefix (e.g. `models/123456789`).\n   *\n   * @param {string} name Short name of the resource to get. e.g. 'models/12345'\n   * @returns {Promise<T>} A promise that fulfills with the resource.\n   */\n\n\n  MachineLearningApiClient.prototype.getResourceWithShortName = function (name) {\n    var _this = this;\n\n    return this.getProjectUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/\" + name\n      };\n      return _this.sendRequest(request);\n    });\n  };\n  /**\n   * Gets the specified resource from the ML API. Resource names must be the full names including project\n   * number prefix.\n   * @param fullName Full resource name of the resource to get. e.g. projects/123465/operations/987654\n   * @returns {Promise<T>} A promise that fulfulls with the resource.\n   */\n\n\n  MachineLearningApiClient.prototype.getResourceWithFullName = function (fullName) {\n    var request = {\n      method: 'GET',\n      url: ML_V1BETA2_API + \"/\" + fullName\n    };\n    return this.sendRequest(request);\n  };\n\n  MachineLearningApiClient.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    request.headers = FIREBASE_VERSION_HEADER;\n    return this.httpClient.send(request).then(function (resp) {\n      return resp.data;\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  MachineLearningApiClient.prototype.toFirebaseError = function (err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n\n    var response = err.response;\n\n    if (!response.isJson()) {\n      return new machine_learning_utils_1.FirebaseMachineLearningError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n    }\n\n    var error = response.data.error || {};\n    var code = 'unknown-error';\n\n    if (error.status && error.status in ERROR_CODE_MAPPING) {\n      code = ERROR_CODE_MAPPING[error.status];\n    }\n\n    var message = error.message || \"Unknown server error: \" + response.text;\n    return new machine_learning_utils_1.FirebaseMachineLearningError(code, message);\n  };\n\n  MachineLearningApiClient.prototype.getProjectUrl = function () {\n    return this.getProjectIdPrefix().then(function (projectIdPrefix) {\n      return ML_V1BETA2_API + \"/\" + projectIdPrefix;\n    });\n  };\n\n  MachineLearningApiClient.prototype.getProjectIdPrefix = function () {\n    var _this = this;\n\n    if (this.projectIdPrefix) {\n      return Promise.resolve(this.projectIdPrefix);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n\n      _this.projectIdPrefix = \"projects/\" + projectId;\n      return _this.projectIdPrefix;\n    });\n  };\n\n  MachineLearningApiClient.prototype.getModelName = function (modelId) {\n    if (!validator.isNonEmptyString(modelId)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must be a non-empty string.');\n    }\n\n    if (modelId.indexOf('/') !== -1) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must not contain any \"/\" characters.');\n    }\n\n    return \"models/\" + modelId;\n  };\n\n  return MachineLearningApiClient;\n}();\n\nexports.MachineLearningApiClient = MachineLearningApiClient;\nvar ERROR_CODE_MAPPING = {\n  INVALID_ARGUMENT: 'invalid-argument',\n  NOT_FOUND: 'not-found',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'authentication-error',\n  UNKNOWN: 'unknown-error'\n};\n\nfunction extractModelId(resourceName) {\n  return resourceName.split('/').pop();\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/firebase-admin/lib/machine-learning/machine-learning-api-client.js"],"names":["Object","defineProperty","exports","value","MachineLearningApiClient","isGcsTfliteModelOptions","api_request_1","require","error_1","machine_learning_utils_1","utils","validator","ML_V1BETA2_API","FIREBASE_VERSION_HEADER","getSdkVersion","POLL_DEFAULT_MAX_TIME_MILLISECONDS","POLL_BASE_WAIT_TIME_MILLISECONDS","POLL_MAX_WAIT_TIME_MILLISECONDS","options","_a","_b","gcsUri","tfliteModel","gcsTfliteUri","app","isNonNullObject","FirebaseMachineLearningError","httpClient","AuthorizedHttpClient","prototype","createModel","model","_this","isNonEmptyString","displayName","err","Promise","reject","getProjectUrl","then","url","request","method","data","sendRequest","updateModel","modelId","updateMask","isNonEmptyArray","join","getModel","resolve","getModelName","modelName","getResourceWithShortName","getOperation","operationName","getResourceWithFullName","listModels","filter","pageSize","isNumber","pageToken","deleteModel","handleOperation","op","done","response","error","fromOperationError","code","message","wait","pollOperationWithExponentialBackoff","name","metadata","metadataType","includes","JSON","stringify","extractModelId","opName","_c","maxTimeMilliseconds","maxTimeMillis","baseWaitMillis","maxWaitMillis","poller","ExponentialBackoffPoller","poll","responseData","fullName","headers","send","resp","catch","toFirebaseError","PrefixedFirebaseError","isJson","status","text","ERROR_CODE_MAPPING","getProjectIdPrefix","projectIdPrefix","findProjectId","projectId","indexOf","INVALID_ARGUMENT","NOT_FOUND","RESOURCE_EXHAUSTED","UNAUTHENTICATED","UNKNOWN","resourceName","split","pop"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,wBAAR,GAAmCF,OAAO,CAACG,uBAAR,GAAkC,KAAK,CAA1E;;AACA,IAAIC,aAAa,GAAGC,OAAO,CAAC,sBAAD,CAA3B;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIE,wBAAwB,GAAGF,OAAO,CAAC,0BAAD,CAAtC;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIK,cAAc,GAAG,2CAArB;AACA,IAAIC,uBAAuB,GAAG;AAC1B,uBAAqB,qBAAqBH,KAAK,CAACI,aAAN;AADhB,CAA9B,C,CAGA;;AACA,IAAIC,kCAAkC,GAAG,MAAzC,C,CAAiD;;AACjD,IAAIC,gCAAgC,GAAG,IAAvC,C,CAA6C;;AAC7C,IAAIC,+BAA+B,GAAG,KAAtC,C,CAA6C;;AAC7C,SAASZ,uBAAT,CAAiCa,OAAjC,EAA0C;AACtC,MAAIC,EAAJ,EAAQC,EAAR;;AACA,MAAIC,MAAM,GAAG,CAACD,EAAE,GAAG,CAACD,EAAE,GAAGD,OAAN,MAAmB,IAAnB,IAA2BC,EAAE,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,EAAE,CAACG,WAA7D,MAA8E,IAA9E,IAAsFF,EAAE,KAAK,KAAK,CAAlG,GAAsG,KAAK,CAA3G,GAA+GA,EAAE,CAACG,YAA/H;AACA,SAAO,OAAOF,MAAP,KAAkB,WAAzB;AACH;;AACDnB,OAAO,CAACG,uBAAR,GAAkCA,uBAAlC;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,wBAAwB;AAAG;AAAe,YAAY;AACtD,WAASA,wBAAT,CAAkCoB,GAAlC,EAAuC;AACnC,SAAKA,GAAL,GAAWA,GAAX;;AACA,QAAI,CAACb,SAAS,CAACc,eAAV,CAA0BD,GAA1B,CAAD,IAAmC,EAAE,aAAaA,GAAf,CAAvC,EAA4D;AACxD,YAAM,IAAIf,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,sEAC9E,wBADA,CAAN;AAEH;;AACD,SAAKC,UAAL,GAAkB,IAAIrB,aAAa,CAACsB,oBAAlB,CAAuCJ,GAAvC,CAAlB;AACH;;AACDpB,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCC,WAAnC,GAAiD,UAAUC,KAAV,EAAiB;AAC9D,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,CAACrB,SAAS,CAACc,eAAV,CAA0BM,KAA1B,CAAD,IACA,CAACpB,SAAS,CAACsB,gBAAV,CAA2BF,KAAK,CAACG,WAAjC,CADL,EACoD;AAChD,UAAIC,GAAG,GAAG,IAAI1B,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,wBAA9E,CAAV;AACA,aAAOU,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH;;AACD,WAAO,KAAKG,aAAL,GACFC,IADE,CACG,UAAUC,GAAV,EAAe;AACrB,UAAIC,OAAO,GAAG;AACVC,QAAAA,MAAM,EAAE,MADE;AAEVF,QAAAA,GAAG,EAAEA,GAAG,GAAG,SAFD;AAGVG,QAAAA,IAAI,EAAEZ;AAHI,OAAd;AAKA,aAAOC,KAAK,CAACY,WAAN,CAAkBH,OAAlB,CAAP;AACH,KARM,CAAP;AASH,GAhBD;;AAiBArC,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCgB,WAAnC,GAAiD,UAAUC,OAAV,EAAmBf,KAAnB,EAA0BgB,UAA1B,EAAsC;AACnF,QAAIf,KAAK,GAAG,IAAZ;;AACA,QAAI,CAACrB,SAAS,CAACsB,gBAAV,CAA2Ba,OAA3B,CAAD,IACA,CAACnC,SAAS,CAACc,eAAV,CAA0BM,KAA1B,CADD,IAEA,CAACpB,SAAS,CAACqC,eAAV,CAA0BD,UAA1B,CAFL,EAE4C;AACxC,UAAIZ,GAAG,GAAG,IAAI1B,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,gCAA9E,CAAV;AACA,aAAOU,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH;;AACD,WAAO,KAAKG,aAAL,GACFC,IADE,CACG,UAAUC,GAAV,EAAe;AACrB,UAAIC,OAAO,GAAG;AACVC,QAAAA,MAAM,EAAE,OADE;AAEVF,QAAAA,GAAG,EAAEA,GAAG,GAAG,UAAN,GAAmBM,OAAnB,GAA6B,cAA7B,GAA8CC,UAAU,CAACE,IAAX,EAFzC;AAGVN,QAAAA,IAAI,EAAEZ;AAHI,OAAd;AAKA,aAAOC,KAAK,CAACY,WAAN,CAAkBH,OAAlB,CAAP;AACH,KARM,CAAP;AASH,GAjBD;;AAkBArC,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCqB,QAAnC,GAA8C,UAAUJ,OAAV,EAAmB;AAC7D,QAAId,KAAK,GAAG,IAAZ;;AACA,WAAOI,OAAO,CAACe,OAAR,GACFZ,IADE,CACG,YAAY;AAClB,aAAOP,KAAK,CAACoB,YAAN,CAAmBN,OAAnB,CAAP;AACH,KAHM,EAIFP,IAJE,CAIG,UAAUc,SAAV,EAAqB;AAC3B,aAAOrB,KAAK,CAACsB,wBAAN,CAA+BD,SAA/B,CAAP;AACH,KANM,CAAP;AAOH,GATD;;AAUAjD,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmC0B,YAAnC,GAAkD,UAAUC,aAAV,EAAyB;AACvE,QAAIxB,KAAK,GAAG,IAAZ;;AACA,WAAOI,OAAO,CAACe,OAAR,GACFZ,IADE,CACG,YAAY;AAClB,aAAOP,KAAK,CAACyB,uBAAN,CAA8BD,aAA9B,CAAP;AACH,KAHM,CAAP;AAIH,GAND;;AAOApD,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmC6B,UAAnC,GAAgD,UAAUxC,OAAV,EAAmB;AAC/D,QAAIc,KAAK,GAAG,IAAZ;;AACA,QAAId,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,MAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,QAAI,CAACP,SAAS,CAACc,eAAV,CAA0BP,OAA1B,CAAL,EAAyC;AACrC,UAAIiB,GAAG,GAAG,IAAI1B,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,2BAA9E,CAAV;AACA,aAAOU,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH;;AACD,QAAI,OAAOjB,OAAO,CAACyC,MAAf,KAA0B,WAA1B,IAAyC,CAAChD,SAAS,CAACsB,gBAAV,CAA2Bf,OAAO,CAACyC,MAAnC,CAA9C,EAA0F;AACtF,UAAIxB,GAAG,GAAG,IAAI1B,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,sBAA9E,CAAV;AACA,aAAOU,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH;;AACD,QAAI,OAAOjB,OAAO,CAAC0C,QAAf,KAA4B,WAAhC,EAA6C;AACzC,UAAI,CAACjD,SAAS,CAACkD,QAAV,CAAmB3C,OAAO,CAAC0C,QAA3B,CAAL,EAA2C;AACvC,YAAIzB,GAAG,GAAG,IAAI1B,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,oBAA9E,CAAV;AACA,eAAOU,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH;;AACD,UAAIjB,OAAO,CAAC0C,QAAR,GAAmB,CAAnB,IAAwB1C,OAAO,CAAC0C,QAAR,GAAmB,GAA/C,EAAoD;AAChD,YAAIzB,GAAG,GAAG,IAAI1B,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,sCAA9E,CAAV;AACA,eAAOU,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH;AACJ;;AACD,QAAI,OAAOjB,OAAO,CAAC4C,SAAf,KAA6B,WAA7B,IAA4C,CAACnD,SAAS,CAACsB,gBAAV,CAA2Bf,OAAO,CAAC4C,SAAnC,CAAjD,EAAgG;AAC5F,UAAI3B,GAAG,GAAG,IAAI1B,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,6CAA9E,CAAV;AACA,aAAOU,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH;;AACD,WAAO,KAAKG,aAAL,GACFC,IADE,CACG,UAAUC,GAAV,EAAe;AACrB,UAAIC,OAAO,GAAG;AACVC,QAAAA,MAAM,EAAE,KADE;AAEVF,QAAAA,GAAG,EAAEA,GAAG,GAAG,SAFD;AAGVG,QAAAA,IAAI,EAAEzB;AAHI,OAAd;AAKA,aAAOc,KAAK,CAACY,WAAN,CAAkBH,OAAlB,CAAP;AACH,KARM,CAAP;AASH,GAlCD;;AAmCArC,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCkC,WAAnC,GAAiD,UAAUjB,OAAV,EAAmB;AAChE,QAAId,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKM,aAAL,GACFC,IADE,CACG,UAAUC,GAAV,EAAe;AACrB,UAAIa,SAAS,GAAGrB,KAAK,CAACoB,YAAN,CAAmBN,OAAnB,CAAhB;;AACA,UAAIL,OAAO,GAAG;AACVC,QAAAA,MAAM,EAAE,QADE;AAEVF,QAAAA,GAAG,EAAEA,GAAG,GAAG,GAAN,GAAYa;AAFP,OAAd;AAIA,aAAOrB,KAAK,CAACY,WAAN,CAAkBH,OAAlB,CAAP;AACH,KARM,CAAP;AASH,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;;;AACIrC,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCmC,eAAnC,GAAqD,UAAUC,EAAV,EAAc/C,OAAd,EAAuB;AACxE,QAAI+C,EAAE,CAACC,IAAP,EAAa;AACT,UAAID,EAAE,CAACE,QAAP,EAAiB;AACb,eAAO/B,OAAO,CAACe,OAAR,CAAgBc,EAAE,CAACE,QAAnB,CAAP;AACH,OAFD,MAGK,IAAIF,EAAE,CAACG,KAAP,EAAc;AACf,YAAIjC,GAAG,GAAG1B,wBAAwB,CAACiB,4BAAzB,CAAsD2C,kBAAtD,CAAyEJ,EAAE,CAACG,KAAH,CAASE,IAAlF,EAAwFL,EAAE,CAACG,KAAH,CAASG,OAAjG,CAAV;AACA,eAAOnC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,OAPQ,CAQT;;;AACA,YAAM,IAAI1B,wBAAwB,CAACiB,4BAA7B,CAA0D,yBAA1D,EAAqF,6BAArF,CAAN;AACH,KAXuE,CAYxE;;;AACA,QAAIR,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACsD,IAA9D,EAAoE;AAChE,aAAO,KAAKC,mCAAL,CAAyCR,EAAE,CAACS,IAA5C,EAAkDxD,OAAlD,CAAP;AACH;;AACD,QAAIyD,QAAQ,GAAGV,EAAE,CAACU,QAAH,IAAe,EAA9B;AACA,QAAIC,YAAY,GAAGD,QAAQ,CAAC,OAAD,CAAR,IAAqB,EAAxC;;AACA,QAAI,CAACC,YAAY,CAACC,QAAb,CAAsB,wBAAtB,CAAL,EAAsD;AAClD,YAAM,IAAIpE,wBAAwB,CAACiB,4BAA7B,CAA0D,yBAA1D,EAAqF,4BAA4BoD,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAjH,CAAN;AACH;;AACD,WAAO,KAAKzB,QAAL,CAAc8B,cAAc,CAACL,QAAQ,CAACD,IAAV,CAA5B,CAAP;AACH,GAtBD,CAlHsD,CAyItD;;;AACAtE,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmC4C,mCAAnC,GAAyE,UAAUQ,MAAV,EAAkB/D,OAAlB,EAA2B;AAChG,QAAIc,KAAK,GAAG,IAAZ;;AACA,QAAIb,EAAJ,EAAQC,EAAR,EAAY8D,EAAZ;;AACA,QAAIC,mBAAmB,GAAG,CAAChE,EAAE,GAAGD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACkE,aAAhE,MAAmF,IAAnF,IAA2FjE,EAAE,KAAK,KAAK,CAAvG,GAA2GA,EAA3G,GAAgHJ,kCAA1I;AACA,QAAIsE,cAAc,GAAG,CAACjE,EAAE,GAAGF,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACmE,cAAhE,MAAoF,IAApF,IAA4FjE,EAAE,KAAK,KAAK,CAAxG,GAA4GA,EAA5G,GAAiHJ,gCAAtI;AACA,QAAIsE,aAAa,GAAG,CAACJ,EAAE,GAAGhE,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACoE,aAAhE,MAAmF,IAAnF,IAA2FJ,EAAE,KAAK,KAAK,CAAvG,GAA2GA,EAA3G,GAAgHjE,+BAApI;AACA,QAAIsE,MAAM,GAAG,IAAIjF,aAAa,CAACkF,wBAAlB,CAA2CH,cAA3C,EAA2DC,aAA3D,EAA0EH,mBAA1E,CAAb;AACA,WAAOI,MAAM,CAACE,IAAP,CAAY,YAAY;AAC3B,aAAOzD,KAAK,CAACuB,YAAN,CAAmB0B,MAAnB,EACF1C,IADE,CACG,UAAUmD,YAAV,EAAwB;AAC9B,YAAI,CAACA,YAAY,CAACxB,IAAlB,EAAwB;AACpB,iBAAO,IAAP;AACH;;AACD,YAAIwB,YAAY,CAACtB,KAAjB,EAAwB;AACpB,cAAIjC,GAAG,GAAG1B,wBAAwB,CAACiB,4BAAzB,CAAsD2C,kBAAtD,CAAyEqB,YAAY,CAACtB,KAAb,CAAmBE,IAA5F,EAAkGoB,YAAY,CAACtB,KAAb,CAAmBG,OAArH,CAAV;AACA,gBAAMpC,GAAN;AACH;;AACD,eAAOuD,YAAY,CAACvB,QAApB;AACH,OAVM,CAAP;AAWH,KAZM,CAAP;AAaH,GApBD;AAqBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI/D,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCyB,wBAAnC,GAA8D,UAAUoB,IAAV,EAAgB;AAC1E,QAAI1C,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKM,aAAL,GACFC,IADE,CACG,UAAUC,GAAV,EAAe;AACrB,UAAIC,OAAO,GAAG;AACVC,QAAAA,MAAM,EAAE,KADE;AAEVF,QAAAA,GAAG,EAAEA,GAAG,GAAG,GAAN,GAAYkC;AAFP,OAAd;AAIA,aAAO1C,KAAK,CAACY,WAAN,CAAkBH,OAAlB,CAAP;AACH,KAPM,CAAP;AAQH,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;;;AACIrC,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmC4B,uBAAnC,GAA6D,UAAUkC,QAAV,EAAoB;AAC7E,QAAIlD,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,KADE;AAEVF,MAAAA,GAAG,EAAE5B,cAAc,GAAG,GAAjB,GAAuB+E;AAFlB,KAAd;AAIA,WAAO,KAAK/C,WAAL,CAAiBH,OAAjB,CAAP;AACH,GAND;;AAOArC,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCe,WAAnC,GAAiD,UAAUH,OAAV,EAAmB;AAChE,QAAIT,KAAK,GAAG,IAAZ;;AACAS,IAAAA,OAAO,CAACmD,OAAR,GAAkB/E,uBAAlB;AACA,WAAO,KAAKc,UAAL,CAAgBkE,IAAhB,CAAqBpD,OAArB,EACFF,IADE,CACG,UAAUuD,IAAV,EAAgB;AACtB,aAAOA,IAAI,CAACnD,IAAZ;AACH,KAHM,EAIFoD,KAJE,CAII,UAAU5D,GAAV,EAAe;AACtB,YAAMH,KAAK,CAACgE,eAAN,CAAsB7D,GAAtB,CAAN;AACH,KANM,CAAP;AAOH,GAVD;;AAWA/B,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCmE,eAAnC,GAAqD,UAAU7D,GAAV,EAAe;AAChE,QAAIA,GAAG,YAAY3B,OAAO,CAACyF,qBAA3B,EAAkD;AAC9C,aAAO9D,GAAP;AACH;;AACD,QAAIgC,QAAQ,GAAGhC,GAAG,CAACgC,QAAnB;;AACA,QAAI,CAACA,QAAQ,CAAC+B,MAAT,EAAL,EAAwB;AACpB,aAAO,IAAIzF,wBAAwB,CAACiB,4BAA7B,CAA0D,eAA1D,EAA2E,sCAAsCyC,QAAQ,CAACgC,MAA/C,GAAwD,aAAxD,GAAwEhC,QAAQ,CAACiC,IAA5J,CAAP;AACH;;AACD,QAAIhC,KAAK,GAAGD,QAAQ,CAACxB,IAAT,CAAcyB,KAAd,IAAuB,EAAnC;AACA,QAAIE,IAAI,GAAG,eAAX;;AACA,QAAIF,KAAK,CAAC+B,MAAN,IAAgB/B,KAAK,CAAC+B,MAAN,IAAgBE,kBAApC,EAAwD;AACpD/B,MAAAA,IAAI,GAAG+B,kBAAkB,CAACjC,KAAK,CAAC+B,MAAP,CAAzB;AACH;;AACD,QAAI5B,OAAO,GAAGH,KAAK,CAACG,OAAN,IAAiB,2BAA2BJ,QAAQ,CAACiC,IAAnE;AACA,WAAO,IAAI3F,wBAAwB,CAACiB,4BAA7B,CAA0D4C,IAA1D,EAAgEC,OAAhE,CAAP;AACH,GAfD;;AAgBAnE,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCS,aAAnC,GAAmD,YAAY;AAC3D,WAAO,KAAKgE,kBAAL,GACF/D,IADE,CACG,UAAUgE,eAAV,EAA2B;AACjC,aAAO3F,cAAc,GAAG,GAAjB,GAAuB2F,eAA9B;AACH,KAHM,CAAP;AAIH,GALD;;AAMAnG,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCyE,kBAAnC,GAAwD,YAAY;AAChE,QAAItE,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKuE,eAAT,EAA0B;AACtB,aAAOnE,OAAO,CAACe,OAAR,CAAgB,KAAKoD,eAArB,CAAP;AACH;;AACD,WAAO7F,KAAK,CAAC8F,aAAN,CAAoB,KAAKhF,GAAzB,EACFe,IADE,CACG,UAAUkE,SAAV,EAAqB;AAC3B,UAAI,CAAC9F,SAAS,CAACsB,gBAAV,CAA2BwE,SAA3B,CAAL,EAA4C;AACxC,cAAM,IAAIhG,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,6FAC9E,+EAD8E,GAE9E,uBAFA,CAAN;AAGH;;AACDM,MAAAA,KAAK,CAACuE,eAAN,GAAwB,cAAcE,SAAtC;AACA,aAAOzE,KAAK,CAACuE,eAAb;AACH,KATM,CAAP;AAUH,GAfD;;AAgBAnG,EAAAA,wBAAwB,CAACyB,SAAzB,CAAmCuB,YAAnC,GAAkD,UAAUN,OAAV,EAAmB;AACjE,QAAI,CAACnC,SAAS,CAACsB,gBAAV,CAA2Ba,OAA3B,CAAL,EAA0C;AACtC,YAAM,IAAIrC,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,sCAA9E,CAAN;AACH;;AACD,QAAIoB,OAAO,CAAC4D,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC;AAC7B,YAAM,IAAIjG,wBAAwB,CAACiB,4BAA7B,CAA0D,kBAA1D,EAA8E,+CAA9E,CAAN;AACH;;AACD,WAAO,YAAYoB,OAAnB;AACH,GARD;;AASA,SAAO1C,wBAAP;AACH,CAzP6C,EAA9C;;AA0PAF,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;AACA,IAAIiG,kBAAkB,GAAG;AACrBM,EAAAA,gBAAgB,EAAE,kBADG;AAErBC,EAAAA,SAAS,EAAE,WAFU;AAGrBC,EAAAA,kBAAkB,EAAE,oBAHC;AAIrBC,EAAAA,eAAe,EAAE,sBAJI;AAKrBC,EAAAA,OAAO,EAAE;AALY,CAAzB;;AAOA,SAAS/B,cAAT,CAAwBgC,YAAxB,EAAsC;AAClC,SAAOA,YAAY,CAACC,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,EAAP;AACH","sourcesContent":["/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MachineLearningApiClient = exports.isGcsTfliteModelOptions = void 0;\nvar api_request_1 = require(\"../utils/api-request\");\nvar error_1 = require(\"../utils/error\");\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\nvar utils = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\nvar ML_V1BETA2_API = 'https://firebaseml.googleapis.com/v1beta2';\nvar FIREBASE_VERSION_HEADER = {\n    'X-Firebase-Client': \"fire-admin-node/\" + utils.getSdkVersion(),\n};\n// Operation polling defaults\nvar POLL_DEFAULT_MAX_TIME_MILLISECONDS = 120000; // Maximum overall 2 minutes\nvar POLL_BASE_WAIT_TIME_MILLISECONDS = 3000; // Start with 3 second delay\nvar POLL_MAX_WAIT_TIME_MILLISECONDS = 30000; // Maximum 30 second delay\nfunction isGcsTfliteModelOptions(options) {\n    var _a, _b;\n    var gcsUri = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.tfliteModel) === null || _b === void 0 ? void 0 : _b.gcsTfliteUri;\n    return typeof gcsUri !== 'undefined';\n}\nexports.isGcsTfliteModelOptions = isGcsTfliteModelOptions;\n/**\n * Class that facilitates sending requests to the Firebase ML backend API.\n *\n * @private\n */\nvar MachineLearningApiClient = /** @class */ (function () {\n    function MachineLearningApiClient(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'First argument passed to admin.machineLearning() must be a valid '\n                + 'Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    MachineLearningApiClient.prototype.createModel = function (model) {\n        var _this = this;\n        if (!validator.isNonNullObject(model) ||\n            !validator.isNonEmptyString(model.displayName)) {\n            var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model content.');\n            return Promise.reject(err);\n        }\n        return this.getProjectUrl()\n            .then(function (url) {\n            var request = {\n                method: 'POST',\n                url: url + \"/models\",\n                data: model,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    MachineLearningApiClient.prototype.updateModel = function (modelId, model, updateMask) {\n        var _this = this;\n        if (!validator.isNonEmptyString(modelId) ||\n            !validator.isNonNullObject(model) ||\n            !validator.isNonEmptyArray(updateMask)) {\n            var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model or mask content.');\n            return Promise.reject(err);\n        }\n        return this.getProjectUrl()\n            .then(function (url) {\n            var request = {\n                method: 'PATCH',\n                url: url + \"/models/\" + modelId + \"?updateMask=\" + updateMask.join(),\n                data: model,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    MachineLearningApiClient.prototype.getModel = function (modelId) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.getModelName(modelId);\n        })\n            .then(function (modelName) {\n            return _this.getResourceWithShortName(modelName);\n        });\n    };\n    MachineLearningApiClient.prototype.getOperation = function (operationName) {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.getResourceWithFullName(operationName);\n        });\n    };\n    MachineLearningApiClient.prototype.listModels = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (!validator.isNonNullObject(options)) {\n            var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid ListModelsOptions');\n            return Promise.reject(err);\n        }\n        if (typeof options.filter !== 'undefined' && !validator.isNonEmptyString(options.filter)) {\n            var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid list filter.');\n            return Promise.reject(err);\n        }\n        if (typeof options.pageSize !== 'undefined') {\n            if (!validator.isNumber(options.pageSize)) {\n                var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid page size.');\n                return Promise.reject(err);\n            }\n            if (options.pageSize < 1 || options.pageSize > 100) {\n                var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Page size must be between 1 and 100.');\n                return Promise.reject(err);\n            }\n        }\n        if (typeof options.pageToken !== 'undefined' && !validator.isNonEmptyString(options.pageToken)) {\n            var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Next page token must be a non-empty string.');\n            return Promise.reject(err);\n        }\n        return this.getProjectUrl()\n            .then(function (url) {\n            var request = {\n                method: 'GET',\n                url: url + \"/models\",\n                data: options,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    MachineLearningApiClient.prototype.deleteModel = function (modelId) {\n        var _this = this;\n        return this.getProjectUrl()\n            .then(function (url) {\n            var modelName = _this.getModelName(modelId);\n            var request = {\n                method: 'DELETE',\n                url: url + \"/\" + modelName,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    /**\n     * Handles a Long Running Operation coming back from the server.\n     *\n     * @param op The operation to handle\n     * @param options The options for polling\n     */\n    MachineLearningApiClient.prototype.handleOperation = function (op, options) {\n        if (op.done) {\n            if (op.response) {\n                return Promise.resolve(op.response);\n            }\n            else if (op.error) {\n                var err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(op.error.code, op.error.message);\n                return Promise.reject(err);\n            }\n            // Done operations must have either a response or an error.\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', 'Invalid operation response.');\n        }\n        // Operation is not done\n        if (options === null || options === void 0 ? void 0 : options.wait) {\n            return this.pollOperationWithExponentialBackoff(op.name, options);\n        }\n        var metadata = op.metadata || {};\n        var metadataType = metadata['@type'] || '';\n        if (!metadataType.includes('ModelOperationMetadata')) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Unknown Metadata type: \" + JSON.stringify(metadata));\n        }\n        return this.getModel(extractModelId(metadata.name));\n    };\n    // baseWaitMillis and maxWaitMillis should only ever be modified by unit tests to run faster.\n    MachineLearningApiClient.prototype.pollOperationWithExponentialBackoff = function (opName, options) {\n        var _this = this;\n        var _a, _b, _c;\n        var maxTimeMilliseconds = (_a = options === null || options === void 0 ? void 0 : options.maxTimeMillis) !== null && _a !== void 0 ? _a : POLL_DEFAULT_MAX_TIME_MILLISECONDS;\n        var baseWaitMillis = (_b = options === null || options === void 0 ? void 0 : options.baseWaitMillis) !== null && _b !== void 0 ? _b : POLL_BASE_WAIT_TIME_MILLISECONDS;\n        var maxWaitMillis = (_c = options === null || options === void 0 ? void 0 : options.maxWaitMillis) !== null && _c !== void 0 ? _c : POLL_MAX_WAIT_TIME_MILLISECONDS;\n        var poller = new api_request_1.ExponentialBackoffPoller(baseWaitMillis, maxWaitMillis, maxTimeMilliseconds);\n        return poller.poll(function () {\n            return _this.getOperation(opName)\n                .then(function (responseData) {\n                if (!responseData.done) {\n                    return null;\n                }\n                if (responseData.error) {\n                    var err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(responseData.error.code, responseData.error.message);\n                    throw err;\n                }\n                return responseData.response;\n            });\n        });\n    };\n    /**\n     * Gets the specified resource from the ML API. Resource names must be the short names without project\n     * ID prefix (e.g. `models/123456789`).\n     *\n     * @param {string} name Short name of the resource to get. e.g. 'models/12345'\n     * @returns {Promise<T>} A promise that fulfills with the resource.\n     */\n    MachineLearningApiClient.prototype.getResourceWithShortName = function (name) {\n        var _this = this;\n        return this.getProjectUrl()\n            .then(function (url) {\n            var request = {\n                method: 'GET',\n                url: url + \"/\" + name,\n            };\n            return _this.sendRequest(request);\n        });\n    };\n    /**\n     * Gets the specified resource from the ML API. Resource names must be the full names including project\n     * number prefix.\n     * @param fullName Full resource name of the resource to get. e.g. projects/123465/operations/987654\n     * @returns {Promise<T>} A promise that fulfulls with the resource.\n     */\n    MachineLearningApiClient.prototype.getResourceWithFullName = function (fullName) {\n        var request = {\n            method: 'GET',\n            url: ML_V1BETA2_API + \"/\" + fullName\n        };\n        return this.sendRequest(request);\n    };\n    MachineLearningApiClient.prototype.sendRequest = function (request) {\n        var _this = this;\n        request.headers = FIREBASE_VERSION_HEADER;\n        return this.httpClient.send(request)\n            .then(function (resp) {\n            return resp.data;\n        })\n            .catch(function (err) {\n            throw _this.toFirebaseError(err);\n        });\n    };\n    MachineLearningApiClient.prototype.toFirebaseError = function (err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        var response = err.response;\n        if (!response.isJson()) {\n            return new machine_learning_utils_1.FirebaseMachineLearningError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n        }\n        var error = response.data.error || {};\n        var code = 'unknown-error';\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\n            code = ERROR_CODE_MAPPING[error.status];\n        }\n        var message = error.message || \"Unknown server error: \" + response.text;\n        return new machine_learning_utils_1.FirebaseMachineLearningError(code, message);\n    };\n    MachineLearningApiClient.prototype.getProjectUrl = function () {\n        return this.getProjectIdPrefix()\n            .then(function (projectIdPrefix) {\n            return ML_V1BETA2_API + \"/\" + projectIdPrefix;\n        });\n    };\n    MachineLearningApiClient.prototype.getProjectIdPrefix = function () {\n        var _this = this;\n        if (this.projectIdPrefix) {\n            return Promise.resolve(this.projectIdPrefix);\n        }\n        return utils.findProjectId(this.app)\n            .then(function (projectId) {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            _this.projectIdPrefix = \"projects/\" + projectId;\n            return _this.projectIdPrefix;\n        });\n    };\n    MachineLearningApiClient.prototype.getModelName = function (modelId) {\n        if (!validator.isNonEmptyString(modelId)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must be a non-empty string.');\n        }\n        if (modelId.indexOf('/') !== -1) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must not contain any \"/\" characters.');\n        }\n        return \"models/\" + modelId;\n    };\n    return MachineLearningApiClient;\n}());\nexports.MachineLearningApiClient = MachineLearningApiClient;\nvar ERROR_CODE_MAPPING = {\n    INVALID_ARGUMENT: 'invalid-argument',\n    NOT_FOUND: 'not-found',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'authentication-error',\n    UNKNOWN: 'unknown-error',\n};\nfunction extractModelId(resourceName) {\n    return resourceName.split('/').pop();\n}\n"]},"metadata":{},"sourceType":"script"}