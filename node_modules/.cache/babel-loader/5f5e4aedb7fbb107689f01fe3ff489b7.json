{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst google_gax_1 = require(\"google-gax\");\n\nconst backoff_1 = require(\"./backoff\");\n\nconst logger_1 = require(\"./logger\");\n\nconst path_1 = require(\"./path\");\n\nconst reference_1 = require(\"./reference\");\n\nconst util_1 = require(\"./util\");\n\nconst validate_1 = require(\"./validate\");\n/*!\n * Error message for transactional reads that were executed after performing\n * writes.\n */\n\n\nconst READ_AFTER_WRITE_ERROR_MSG = 'Firestore transactions require all reads to be executed before all writes.';\n/**\n * A reference to a transaction.\n *\n * The Transaction object passed to a transaction's updateFunction provides\n * the methods to read and write data within the transaction context. See\n * [runTransaction()]{@link Firestore#runTransaction}.\n *\n * @class Transaction\n */\n\nclass Transaction {\n  /**\n   * @hideconstructor\n   *\n   * @param firestore The Firestore Database client.\n   * @param requestTag A unique client-assigned identifier for the scope of\n   * this transaction.\n   */\n  constructor(firestore, requestTag) {\n    this._firestore = firestore;\n    this._writeBatch = firestore.batch();\n    this._requestTag = requestTag;\n    this._backoff = new backoff_1.ExponentialBackoff();\n  }\n  /**\n   * Retrieve a document or a query result from the database. Holds a\n   * pessimistic lock on all returned documents.\n   *\n   * @param {DocumentReference|Query} refOrQuery The document or query to\n   * return.\n   * @returns {Promise} A Promise that resolves with a DocumentSnapshot or\n   * QuerySnapshot for the returned documents.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (doc.exists) {\n   *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n   *     } else {\n   *       transaction.create(documentRef, { count: 1 });\n   *     }\n   *   });\n   * });\n   */\n\n\n  get(refOrQuery) {\n    if (!this._writeBatch.isEmpty) {\n      throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n    }\n\n    if (refOrQuery instanceof reference_1.DocumentReference) {\n      return this._firestore.getAll_([refOrQuery],\n      /* fieldMask= */\n      null, this._requestTag, this._transactionId).then(res => {\n        return Promise.resolve(res[0]);\n      });\n    }\n\n    if (refOrQuery instanceof reference_1.Query) {\n      return refOrQuery._get(this._transactionId);\n    }\n\n    throw new Error('Value for argument \"refOrQuery\" must be a DocumentReference or a Query.');\n  }\n  /**\n   * Retrieves multiple documents from Firestore. Holds a pessimistic lock on\n   * all returned documents.\n   *\n   * The first argument is required and must be of type `DocumentReference`\n   * followed by any additional `DocumentReference` documents. If used, the\n   * optional `ReadOptions` must be the last argument.\n   *\n   * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n   * `DocumentReferences` to receive, followed by an optional field mask.\n   * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n   * contains an array with the resulting document snapshots.\n   *\n   * @example\n   * let firstDoc = firestore.doc('col/doc1');\n   * let secondDoc = firestore.doc('col/doc2');\n   * let resultDoc = firestore.doc('col/doc3');\n   *\n   * firestore.runTransaction(transaction => {\n   *   return transaction.getAll(firstDoc, secondDoc).then(docs => {\n   *     transaction.set(resultDoc, {\n   *       sum: docs[0].get('count') + docs[1].get('count')\n   *     });\n   *   });\n   * });\n   */\n\n\n  getAll(...documentRefsOrReadOptions) {\n    if (!this._writeBatch.isEmpty) {\n      throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n    }\n\n    validate_1.validateMinNumberOfArguments('Transaction.getAll', documentRefsOrReadOptions, 1);\n    const {\n      documents,\n      fieldMask\n    } = parseGetAllArguments(documentRefsOrReadOptions);\n    return this._firestore.getAll_(documents, fieldMask, this._requestTag, this._transactionId);\n  }\n  /**\n   * Create the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. The operation will\n   * fail the transaction if a document exists at the specified location.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * created.\n   * @param {DocumentData} data The object data to serialize as the document.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (!doc.exists) {\n   *       transaction.create(documentRef, { foo: 'bar' });\n   *     }\n   *   });\n   * });\n   */\n\n\n  create(documentRef, data) {\n    this._writeBatch.create(documentRef, data);\n\n    return this;\n  }\n  /**\n   * Writes to the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. If the document\n   * does not exist yet, it will be created. If you pass\n   * [SetOptions]{@link SetOptions}, the provided data can be merged into the\n   * existing document.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * set.\n   * @param {T|Partial<T>} data The object to serialize as the document.\n   * @param {SetOptions=} options An object to configure the set behavior.\n   * @param {boolean=} options.merge - If true, set() merges the values\n   * specified in its data argument. Fields omitted from this set() call\n   * remain untouched.\n   * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n   * set() only replaces the specified field paths. Any field path that is not\n   * specified is ignored and remains untouched.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   transaction.set(documentRef, { foo: 'bar' });\n   *   return Promise.resolve();\n   * });\n   */\n\n\n  set(documentRef, data, options) {\n    this._writeBatch.set(documentRef, data, options);\n\n    return this;\n  }\n  /**\n   * Updates fields in the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. The update will\n   * fail if applied to a document that does not exist.\n   *\n   * The update() method accepts either an object with field paths encoded as\n   * keys and field values encoded as values, or a variable number of arguments\n   * that alternate between field paths and field values. Nested fields can be\n   * updated by providing dot-separated field path strings or by providing\n   * FieldPath objects.\n   *\n   * A Precondition restricting this update can be specified as the last\n   * argument.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * updated.\n   * @param {UpdateData|string|FieldPath} dataOrField An object\n   * containing the fields and values with which to update the document\n   * or the path of the first field to update.\n   * @param {\n   * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n   * An alternating list of field paths and values to update or a Precondition\n   * to to enforce on this update.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (doc.exists) {\n   *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n   *     } else {\n   *       transaction.create(documentRef, { count: 1 });\n   *     }\n   *   });\n   * });\n   */\n\n\n  update(documentRef, dataOrField, ...preconditionOrValues) {\n    // eslint-disable-next-line prefer-rest-params\n    validate_1.validateMinNumberOfArguments('Transaction.update', arguments, 2);\n\n    this._writeBatch.update(documentRef, dataOrField, ...preconditionOrValues);\n\n    return this;\n  }\n  /**\n   * Deletes the document referred to by the provided [DocumentReference]\n   * {@link DocumentReference}.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * deleted.\n   * @param {Precondition=} precondition A precondition to enforce for this\n   * delete.\n   * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n   * document was last updated at lastUpdateTime. Fails the transaction if the\n   * document doesn't exist or was last updated at a different time.\n   * @returns {Transaction} This Transaction instance. Used for\n   * chaining method calls.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   transaction.delete(documentRef);\n   *   return Promise.resolve();\n   * });\n   */\n\n\n  delete(documentRef, precondition) {\n    this._writeBatch.delete(documentRef, precondition);\n\n    return this;\n  }\n  /**\n   * Starts a transaction and obtains the transaction id from the server.\n   *\n   * @private\n   */\n\n\n  begin() {\n    const request = {\n      database: this._firestore.formattedName\n    };\n\n    if (this._transactionId) {\n      request.options = {\n        readWrite: {\n          retryTransaction: this._transactionId\n        }\n      };\n    }\n\n    return this._firestore.request('beginTransaction', request, this._requestTag).then(resp => {\n      this._transactionId = resp.transaction;\n    });\n  }\n  /**\n   * Commits all queued-up changes in this transaction and releases all locks.\n   *\n   * @private\n   */\n\n\n  commit() {\n    return this._writeBatch._commit({\n      transactionId: this._transactionId,\n      requestTag: this._requestTag\n    }).then(() => {});\n  }\n  /**\n   * Releases all locks and rolls back this transaction.\n   *\n   * @private\n   */\n\n\n  rollback() {\n    const request = {\n      database: this._firestore.formattedName,\n      transaction: this._transactionId\n    };\n    return this._firestore.request('rollback', request, this._requestTag);\n  }\n  /**\n   * Executes `updateFunction()` and commits the transaction with retry.\n   *\n   * @private\n   * @param updateFunction The user function to execute within the transaction\n   * context.\n   * @param requestTag A unique client-assigned identifier for the scope of\n   * this transaction.\n   * @param maxAttempts The maximum number of attempts for this transaction.\n   */\n\n\n  async runTransaction(updateFunction, maxAttempts) {\n    let result;\n    let lastError = undefined;\n\n    for (let attempt = 0; attempt < maxAttempts; ++attempt) {\n      try {\n        if (lastError) {\n          logger_1.logger('Firestore.runTransaction', this._requestTag, 'Retrying transaction after error:', lastError);\n          await this.rollback();\n        }\n\n        this._writeBatch._reset();\n\n        await this.maybeBackoff(lastError);\n        await this.begin();\n        const promise = updateFunction(this);\n\n        if (!(promise instanceof Promise)) {\n          throw new Error('You must return a Promise in your transaction()-callback.');\n        }\n\n        result = await promise;\n        await this.commit();\n        return result;\n      } catch (err) {\n        logger_1.logger('Firestore.runTransaction', this._requestTag, 'Rolling back transaction after callback error:', err);\n        lastError = err;\n\n        if (!this._transactionId || !isRetryableTransactionError(err)) {\n          break;\n        }\n      }\n    }\n\n    logger_1.logger('Firestore.runTransaction', this._requestTag, 'Transaction not eligible for retry, returning error: %s', lastError);\n    await this.rollback();\n    return Promise.reject(lastError);\n  }\n  /**\n   * Delays further operations based on the provided error.\n   *\n   * @private\n   * @return A Promise that resolves after the delay expired.\n   */\n\n\n  async maybeBackoff(error) {\n    if (error && error.code === google_gax_1.Status.RESOURCE_EXHAUSTED) {\n      this._backoff.resetToMax();\n    }\n\n    await this._backoff.backoffAndWait();\n  }\n\n}\n\nexports.Transaction = Transaction;\n/**\n * Parses the arguments for the `getAll()` call supported by both the Firestore\n * and Transaction class.\n *\n * @private\n * @param documentRefsOrReadOptions An array of document references followed by\n * an optional ReadOptions object.\n */\n\nfunction parseGetAllArguments(documentRefsOrReadOptions) {\n  let documents;\n  let readOptions = undefined;\n\n  if (Array.isArray(documentRefsOrReadOptions[0])) {\n    throw new Error('getAll() no longer accepts an array as its first argument. ' + 'Please unpack your array and call getAll() with individual arguments.');\n  }\n\n  if (documentRefsOrReadOptions.length > 0 && util_1.isPlainObject(documentRefsOrReadOptions[documentRefsOrReadOptions.length - 1])) {\n    readOptions = documentRefsOrReadOptions.pop();\n    documents = documentRefsOrReadOptions;\n  } else {\n    documents = documentRefsOrReadOptions;\n  }\n\n  for (let i = 0; i < documents.length; ++i) {\n    reference_1.validateDocumentReference(i, documents[i]);\n  }\n\n  validateReadOptions('options', readOptions, {\n    optional: true\n  });\n  const fieldMask = readOptions && readOptions.fieldMask ? readOptions.fieldMask.map(fieldPath => path_1.FieldPath.fromArgument(fieldPath)) : null;\n  return {\n    fieldMask,\n    documents\n  };\n}\n\nexports.parseGetAllArguments = parseGetAllArguments;\n/**\n * Validates the use of 'options' as ReadOptions and enforces that 'fieldMask'\n * is an array of strings or field paths.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the ReadOptions can be omitted.\n */\n\nfunction validateReadOptions(arg, value, options) {\n  if (!validate_1.validateOptional(value, options)) {\n    if (!util_1.isObject(value)) {\n      throw new Error(`${validate_1.invalidArgumentMessage(arg, 'read option')} Input is not an object.'`);\n    }\n\n    const options = value;\n\n    if (options.fieldMask !== undefined) {\n      if (!Array.isArray(options.fieldMask)) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'read option')} \"fieldMask\" is not an array.`);\n      }\n\n      for (let i = 0; i < options.fieldMask.length; ++i) {\n        try {\n          path_1.validateFieldPath(i, options.fieldMask[i]);\n        } catch (err) {\n          throw new Error(`${validate_1.invalidArgumentMessage(arg, 'read option')} \"fieldMask\" is not valid: ${err.message}`);\n        }\n      }\n    }\n  }\n}\n\nfunction isRetryableTransactionError(error) {\n  if (error.code !== undefined) {\n    // This list is based on https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/core/transaction_runner.ts#L112\n    switch (error.code) {\n      case google_gax_1.Status.ABORTED:\n      case google_gax_1.Status.CANCELLED:\n      case google_gax_1.Status.UNKNOWN:\n      case google_gax_1.Status.DEADLINE_EXCEEDED:\n      case google_gax_1.Status.INTERNAL:\n      case google_gax_1.Status.UNAVAILABLE:\n      case google_gax_1.Status.UNAUTHENTICATED:\n      case google_gax_1.Status.RESOURCE_EXHAUSTED:\n        return true;\n\n      case google_gax_1.Status.INVALID_ARGUMENT:\n        // The Firestore backend uses \"INVALID_ARGUMENT\" for transactions\n        // IDs that have expired. While INVALID_ARGUMENT is generally not\n        // retryable, we retry this specific case.\n        return !!error.message.match(/transaction has expired/);\n\n      default:\n        return false;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/firestore/build/src/transaction.js"],"names":["Object","defineProperty","exports","value","google_gax_1","require","backoff_1","logger_1","path_1","reference_1","util_1","validate_1","READ_AFTER_WRITE_ERROR_MSG","Transaction","constructor","firestore","requestTag","_firestore","_writeBatch","batch","_requestTag","_backoff","ExponentialBackoff","get","refOrQuery","isEmpty","Error","DocumentReference","getAll_","_transactionId","then","res","Promise","resolve","Query","_get","getAll","documentRefsOrReadOptions","validateMinNumberOfArguments","documents","fieldMask","parseGetAllArguments","create","documentRef","data","set","options","update","dataOrField","preconditionOrValues","arguments","delete","precondition","begin","request","database","formattedName","readWrite","retryTransaction","resp","transaction","commit","_commit","transactionId","rollback","runTransaction","updateFunction","maxAttempts","result","lastError","undefined","attempt","logger","_reset","maybeBackoff","promise","err","isRetryableTransactionError","reject","error","code","Status","RESOURCE_EXHAUSTED","resetToMax","backoffAndWait","readOptions","Array","isArray","length","isPlainObject","pop","i","validateDocumentReference","validateReadOptions","optional","map","fieldPath","FieldPath","fromArgument","arg","validateOptional","isObject","invalidArgumentMessage","validateFieldPath","message","ABORTED","CANCELLED","UNKNOWN","DEADLINE_EXCEEDED","INTERNAL","UNAVAILABLE","UNAUTHENTICATED","INVALID_ARGUMENT","match"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst google_gax_1 = require(\"google-gax\");\nconst backoff_1 = require(\"./backoff\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst reference_1 = require(\"./reference\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/*!\n * Error message for transactional reads that were executed after performing\n * writes.\n */\nconst READ_AFTER_WRITE_ERROR_MSG = 'Firestore transactions require all reads to be executed before all writes.';\n/**\n * A reference to a transaction.\n *\n * The Transaction object passed to a transaction's updateFunction provides\n * the methods to read and write data within the transaction context. See\n * [runTransaction()]{@link Firestore#runTransaction}.\n *\n * @class Transaction\n */\nclass Transaction {\n    /**\n     * @hideconstructor\n     *\n     * @param firestore The Firestore Database client.\n     * @param requestTag A unique client-assigned identifier for the scope of\n     * this transaction.\n     */\n    constructor(firestore, requestTag) {\n        this._firestore = firestore;\n        this._writeBatch = firestore.batch();\n        this._requestTag = requestTag;\n        this._backoff = new backoff_1.ExponentialBackoff();\n    }\n    /**\n     * Retrieve a document or a query result from the database. Holds a\n     * pessimistic lock on all returned documents.\n     *\n     * @param {DocumentReference|Query} refOrQuery The document or query to\n     * return.\n     * @returns {Promise} A Promise that resolves with a DocumentSnapshot or\n     * QuerySnapshot for the returned documents.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n     *     } else {\n     *       transaction.create(documentRef, { count: 1 });\n     *     }\n     *   });\n     * });\n     */\n    get(refOrQuery) {\n        if (!this._writeBatch.isEmpty) {\n            throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n        }\n        if (refOrQuery instanceof reference_1.DocumentReference) {\n            return this._firestore\n                .getAll_([refOrQuery], \n            /* fieldMask= */ null, this._requestTag, this._transactionId)\n                .then(res => {\n                return Promise.resolve(res[0]);\n            });\n        }\n        if (refOrQuery instanceof reference_1.Query) {\n            return refOrQuery._get(this._transactionId);\n        }\n        throw new Error('Value for argument \"refOrQuery\" must be a DocumentReference or a Query.');\n    }\n    /**\n     * Retrieves multiple documents from Firestore. Holds a pessimistic lock on\n     * all returned documents.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * let firstDoc = firestore.doc('col/doc1');\n     * let secondDoc = firestore.doc('col/doc2');\n     * let resultDoc = firestore.doc('col/doc3');\n     *\n     * firestore.runTransaction(transaction => {\n     *   return transaction.getAll(firstDoc, secondDoc).then(docs => {\n     *     transaction.set(resultDoc, {\n     *       sum: docs[0].get('count') + docs[1].get('count')\n     *     });\n     *   });\n     * });\n     */\n    getAll(...documentRefsOrReadOptions) {\n        if (!this._writeBatch.isEmpty) {\n            throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n        }\n        validate_1.validateMinNumberOfArguments('Transaction.getAll', documentRefsOrReadOptions, 1);\n        const { documents, fieldMask } = parseGetAllArguments(documentRefsOrReadOptions);\n        return this._firestore.getAll_(documents, fieldMask, this._requestTag, this._transactionId);\n    }\n    /**\n     * Create the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The operation will\n     * fail the transaction if a document exists at the specified location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {DocumentData} data The object data to serialize as the document.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (!doc.exists) {\n     *       transaction.create(documentRef, { foo: 'bar' });\n     *     }\n     *   });\n     * });\n     */\n    create(documentRef, data) {\n        this._writeBatch.create(documentRef, data);\n        return this;\n    }\n    /**\n     * Writes to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * does not exist yet, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into the\n     * existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T|Partial<T>} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call\n     * remain untouched.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.set(documentRef, { foo: 'bar' });\n     *   return Promise.resolve();\n     * });\n     */\n    set(documentRef, data, options) {\n        this._writeBatch.set(documentRef, data, options);\n        return this;\n    }\n    /**\n     * Updates fields in the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The update will\n     * fail if applied to a document that does not exist.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to to enforce on this update.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n     *     } else {\n     *       transaction.create(documentRef, { count: 1 });\n     *     }\n     *   });\n     * });\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        // eslint-disable-next-line prefer-rest-params\n        validate_1.validateMinNumberOfArguments('Transaction.update', arguments, 2);\n        this._writeBatch.update(documentRef, dataOrField, ...preconditionOrValues);\n        return this;\n    }\n    /**\n     * Deletes the document referred to by the provided [DocumentReference]\n     * {@link DocumentReference}.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the transaction if the\n     * document doesn't exist or was last updated at a different time.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.delete(documentRef);\n     *   return Promise.resolve();\n     * });\n     */\n    delete(documentRef, precondition) {\n        this._writeBatch.delete(documentRef, precondition);\n        return this;\n    }\n    /**\n     * Starts a transaction and obtains the transaction id from the server.\n     *\n     * @private\n     */\n    begin() {\n        const request = {\n            database: this._firestore.formattedName,\n        };\n        if (this._transactionId) {\n            request.options = {\n                readWrite: {\n                    retryTransaction: this._transactionId,\n                },\n            };\n        }\n        return this._firestore\n            .request('beginTransaction', request, this._requestTag)\n            .then(resp => {\n            this._transactionId = resp.transaction;\n        });\n    }\n    /**\n     * Commits all queued-up changes in this transaction and releases all locks.\n     *\n     * @private\n     */\n    commit() {\n        return this._writeBatch\n            ._commit({\n            transactionId: this._transactionId,\n            requestTag: this._requestTag,\n        })\n            .then(() => { });\n    }\n    /**\n     * Releases all locks and rolls back this transaction.\n     *\n     * @private\n     */\n    rollback() {\n        const request = {\n            database: this._firestore.formattedName,\n            transaction: this._transactionId,\n        };\n        return this._firestore.request('rollback', request, this._requestTag);\n    }\n    /**\n     * Executes `updateFunction()` and commits the transaction with retry.\n     *\n     * @private\n     * @param updateFunction The user function to execute within the transaction\n     * context.\n     * @param requestTag A unique client-assigned identifier for the scope of\n     * this transaction.\n     * @param maxAttempts The maximum number of attempts for this transaction.\n     */\n    async runTransaction(updateFunction, maxAttempts) {\n        let result;\n        let lastError = undefined;\n        for (let attempt = 0; attempt < maxAttempts; ++attempt) {\n            try {\n                if (lastError) {\n                    logger_1.logger('Firestore.runTransaction', this._requestTag, 'Retrying transaction after error:', lastError);\n                    await this.rollback();\n                }\n                this._writeBatch._reset();\n                await this.maybeBackoff(lastError);\n                await this.begin();\n                const promise = updateFunction(this);\n                if (!(promise instanceof Promise)) {\n                    throw new Error('You must return a Promise in your transaction()-callback.');\n                }\n                result = await promise;\n                await this.commit();\n                return result;\n            }\n            catch (err) {\n                logger_1.logger('Firestore.runTransaction', this._requestTag, 'Rolling back transaction after callback error:', err);\n                lastError = err;\n                if (!this._transactionId || !isRetryableTransactionError(err)) {\n                    break;\n                }\n            }\n        }\n        logger_1.logger('Firestore.runTransaction', this._requestTag, 'Transaction not eligible for retry, returning error: %s', lastError);\n        await this.rollback();\n        return Promise.reject(lastError);\n    }\n    /**\n     * Delays further operations based on the provided error.\n     *\n     * @private\n     * @return A Promise that resolves after the delay expired.\n     */\n    async maybeBackoff(error) {\n        if (error && error.code === google_gax_1.Status.RESOURCE_EXHAUSTED) {\n            this._backoff.resetToMax();\n        }\n        await this._backoff.backoffAndWait();\n    }\n}\nexports.Transaction = Transaction;\n/**\n * Parses the arguments for the `getAll()` call supported by both the Firestore\n * and Transaction class.\n *\n * @private\n * @param documentRefsOrReadOptions An array of document references followed by\n * an optional ReadOptions object.\n */\nfunction parseGetAllArguments(documentRefsOrReadOptions) {\n    let documents;\n    let readOptions = undefined;\n    if (Array.isArray(documentRefsOrReadOptions[0])) {\n        throw new Error('getAll() no longer accepts an array as its first argument. ' +\n            'Please unpack your array and call getAll() with individual arguments.');\n    }\n    if (documentRefsOrReadOptions.length > 0 &&\n        util_1.isPlainObject(documentRefsOrReadOptions[documentRefsOrReadOptions.length - 1])) {\n        readOptions = documentRefsOrReadOptions.pop();\n        documents = documentRefsOrReadOptions;\n    }\n    else {\n        documents = documentRefsOrReadOptions;\n    }\n    for (let i = 0; i < documents.length; ++i) {\n        reference_1.validateDocumentReference(i, documents[i]);\n    }\n    validateReadOptions('options', readOptions, { optional: true });\n    const fieldMask = readOptions && readOptions.fieldMask\n        ? readOptions.fieldMask.map(fieldPath => path_1.FieldPath.fromArgument(fieldPath))\n        : null;\n    return { fieldMask, documents };\n}\nexports.parseGetAllArguments = parseGetAllArguments;\n/**\n * Validates the use of 'options' as ReadOptions and enforces that 'fieldMask'\n * is an array of strings or field paths.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the ReadOptions can be omitted.\n */\nfunction validateReadOptions(arg, value, options) {\n    if (!validate_1.validateOptional(value, options)) {\n        if (!util_1.isObject(value)) {\n            throw new Error(`${validate_1.invalidArgumentMessage(arg, 'read option')} Input is not an object.'`);\n        }\n        const options = value;\n        if (options.fieldMask !== undefined) {\n            if (!Array.isArray(options.fieldMask)) {\n                throw new Error(`${validate_1.invalidArgumentMessage(arg, 'read option')} \"fieldMask\" is not an array.`);\n            }\n            for (let i = 0; i < options.fieldMask.length; ++i) {\n                try {\n                    path_1.validateFieldPath(i, options.fieldMask[i]);\n                }\n                catch (err) {\n                    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'read option')} \"fieldMask\" is not valid: ${err.message}`);\n                }\n            }\n        }\n    }\n}\nfunction isRetryableTransactionError(error) {\n    if (error.code !== undefined) {\n        // This list is based on https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/core/transaction_runner.ts#L112\n        switch (error.code) {\n            case google_gax_1.Status.ABORTED:\n            case google_gax_1.Status.CANCELLED:\n            case google_gax_1.Status.UNKNOWN:\n            case google_gax_1.Status.DEADLINE_EXCEEDED:\n            case google_gax_1.Status.INTERNAL:\n            case google_gax_1.Status.UNAVAILABLE:\n            case google_gax_1.Status.UNAUTHENTICATED:\n            case google_gax_1.Status.RESOURCE_EXHAUSTED:\n                return true;\n            case google_gax_1.Status.INVALID_ARGUMENT:\n                // The Firestore backend uses \"INVALID_ARGUMENT\" for transactions\n                // IDs that have expired. While INVALID_ARGUMENT is generally not\n                // retryable, we retry this specific case.\n                return !!error.message.match(/transaction has expired/);\n            default:\n                return false;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=transaction.js.map"]},"metadata":{},"sourceType":"script"}