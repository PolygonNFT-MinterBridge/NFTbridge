{"ast":null,"code":"/**\n * Debugging support for web applications.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n/* DEBUG API */\n\n\nmodule.exports = forge.debug = forge.debug || {}; // Private storage for debugging.\n// Useful to expose data that is otherwise unviewable behind closures.\n// NOTE: remember that this can hold references to data and cause leaks!\n// format is \"forge._debug.<modulename>.<dataname> = data\"\n// Example:\n// (function() {\n//   var cat = 'forge.test.Test'; // debugging category\n//   var sState = {...}; // local state\n//   forge.debug.set(cat, 'sState', sState);\n// })();\n\nforge.debug.storage = {};\n/**\n * Gets debug data. Omit name for all cat data  Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to get (optional).\n * @return object with requested debug data or undefined.\n */\n\nforge.debug.get = function (cat, name) {\n  var rval;\n\n  if (typeof cat === 'undefined') {\n    rval = forge.debug.storage;\n  } else if (cat in forge.debug.storage) {\n    if (typeof name === 'undefined') {\n      rval = forge.debug.storage[cat];\n    } else {\n      rval = forge.debug.storage[cat][name];\n    }\n  }\n\n  return rval;\n};\n/**\n * Sets debug data.\n *\n * @param cat name of debugging category.\n * @param name name of data to set.\n * @param data data to set.\n */\n\n\nforge.debug.set = function (cat, name, data) {\n  if (!(cat in forge.debug.storage)) {\n    forge.debug.storage[cat] = {};\n  }\n\n  forge.debug.storage[cat][name] = data;\n};\n/**\n * Clears debug data. Omit name for all cat data. Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to clear or omit to clear entire category.\n */\n\n\nforge.debug.clear = function (cat, name) {\n  if (typeof cat === 'undefined') {\n    forge.debug.storage = {};\n  } else if (cat in forge.debug.storage) {\n    if (typeof name === 'undefined') {\n      delete forge.debug.storage[cat];\n    } else {\n      delete forge.debug.storage[cat][name];\n    }\n  }\n};","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/node-forge/lib/debug.js"],"names":["forge","require","module","exports","debug","storage","get","cat","name","rval","set","data","clear"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiBH,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAACI,KAAN,IAAe,EAA9C,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,KAAK,CAACI,KAAN,CAAYC,OAAZ,GAAsB,EAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,KAAK,CAACI,KAAN,CAAYE,GAAZ,GAAkB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACpC,MAAIC,IAAJ;;AACA,MAAG,OAAOF,GAAP,KAAgB,WAAnB,EAAgC;AAC9BE,IAAAA,IAAI,GAAGT,KAAK,CAACI,KAAN,CAAYC,OAAnB;AACD,GAFD,MAEO,IAAGE,GAAG,IAAIP,KAAK,CAACI,KAAN,CAAYC,OAAtB,EAA+B;AACpC,QAAG,OAAOG,IAAP,KAAiB,WAApB,EAAiC;AAC/BC,MAAAA,IAAI,GAAGT,KAAK,CAACI,KAAN,CAAYC,OAAZ,CAAoBE,GAApB,CAAP;AACD,KAFD,MAEO;AACLE,MAAAA,IAAI,GAAGT,KAAK,CAACI,KAAN,CAAYC,OAAZ,CAAoBE,GAApB,EAAyBC,IAAzB,CAAP;AACD;AACF;;AACD,SAAOC,IAAP;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,KAAK,CAACI,KAAN,CAAYM,GAAZ,GAAkB,UAASH,GAAT,EAAcC,IAAd,EAAoBG,IAApB,EAA0B;AAC1C,MAAG,EAAEJ,GAAG,IAAIP,KAAK,CAACI,KAAN,CAAYC,OAArB,CAAH,EAAkC;AAChCL,IAAAA,KAAK,CAACI,KAAN,CAAYC,OAAZ,CAAoBE,GAApB,IAA2B,EAA3B;AACD;;AACDP,EAAAA,KAAK,CAACI,KAAN,CAAYC,OAAZ,CAAoBE,GAApB,EAAyBC,IAAzB,IAAiCG,IAAjC;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAX,KAAK,CAACI,KAAN,CAAYQ,KAAZ,GAAoB,UAASL,GAAT,EAAcC,IAAd,EAAoB;AACtC,MAAG,OAAOD,GAAP,KAAgB,WAAnB,EAAgC;AAC9BP,IAAAA,KAAK,CAACI,KAAN,CAAYC,OAAZ,GAAsB,EAAtB;AACD,GAFD,MAEO,IAAGE,GAAG,IAAIP,KAAK,CAACI,KAAN,CAAYC,OAAtB,EAA+B;AACpC,QAAG,OAAOG,IAAP,KAAiB,WAApB,EAAiC;AAC/B,aAAOR,KAAK,CAACI,KAAN,CAAYC,OAAZ,CAAoBE,GAApB,CAAP;AACD,KAFD,MAEO;AACL,aAAOP,KAAK,CAACI,KAAN,CAAYC,OAAZ,CAAoBE,GAApB,EAAyBC,IAAzB,CAAP;AACD;AACF;AACF,CAVD","sourcesContent":["/**\n * Debugging support for web applications.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\n/* DEBUG API */\nmodule.exports = forge.debug = forge.debug || {};\n\n// Private storage for debugging.\n// Useful to expose data that is otherwise unviewable behind closures.\n// NOTE: remember that this can hold references to data and cause leaks!\n// format is \"forge._debug.<modulename>.<dataname> = data\"\n// Example:\n// (function() {\n//   var cat = 'forge.test.Test'; // debugging category\n//   var sState = {...}; // local state\n//   forge.debug.set(cat, 'sState', sState);\n// })();\nforge.debug.storage = {};\n\n/**\n * Gets debug data. Omit name for all cat data  Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to get (optional).\n * @return object with requested debug data or undefined.\n */\nforge.debug.get = function(cat, name) {\n  var rval;\n  if(typeof(cat) === 'undefined') {\n    rval = forge.debug.storage;\n  } else if(cat in forge.debug.storage) {\n    if(typeof(name) === 'undefined') {\n      rval = forge.debug.storage[cat];\n    } else {\n      rval = forge.debug.storage[cat][name];\n    }\n  }\n  return rval;\n};\n\n/**\n * Sets debug data.\n *\n * @param cat name of debugging category.\n * @param name name of data to set.\n * @param data data to set.\n */\nforge.debug.set = function(cat, name, data) {\n  if(!(cat in forge.debug.storage)) {\n    forge.debug.storage[cat] = {};\n  }\n  forge.debug.storage[cat][name] = data;\n};\n\n/**\n * Clears debug data. Omit name for all cat data. Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to clear or omit to clear entire category.\n */\nforge.debug.clear = function(cat, name) {\n  if(typeof(cat) === 'undefined') {\n    forge.debug.storage = {};\n  } else if(cat in forge.debug.storage) {\n    if(typeof(name) === 'undefined') {\n      delete forge.debug.storage[cat];\n    } else {\n      delete forge.debug.storage[cat][name];\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}