{"ast":null,"code":"\"use strict\";\n\nmodule.exports = createRBTree;\nvar RED = 0;\nvar BLACK = 1;\n\nfunction RBNode(color, key, value, left, right, count) {\n  this._color = color;\n  this.key = key;\n  this.value = value;\n  this.left = left;\n  this.right = right;\n  this._count = count;\n}\n\nfunction cloneNode(node) {\n  return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count);\n}\n\nfunction repaint(color, node) {\n  return new RBNode(color, node.key, node.value, node.left, node.right, node._count);\n}\n\nfunction recount(node) {\n  node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0);\n}\n\nfunction RedBlackTree(compare, root) {\n  this._compare = compare;\n  this.root = root;\n}\n\nvar proto = RedBlackTree.prototype;\nObject.defineProperty(proto, \"keys\", {\n  get: function () {\n    var result = [];\n    this.forEach(function (k, v) {\n      result.push(k);\n    });\n    return result;\n  }\n});\nObject.defineProperty(proto, \"values\", {\n  get: function () {\n    var result = [];\n    this.forEach(function (k, v) {\n      result.push(v);\n    });\n    return result;\n  }\n}); //Returns the number of nodes in the tree\n\nObject.defineProperty(proto, \"length\", {\n  get: function () {\n    if (this.root) {\n      return this.root._count;\n    }\n\n    return 0;\n  }\n}); //Insert a new item into the tree\n\nproto.insert = function (key, value) {\n  var cmp = this._compare; //Find point to insert new node at\n\n  var n = this.root;\n  var n_stack = [];\n  var d_stack = [];\n\n  while (n) {\n    var d = cmp(key, n.key);\n    n_stack.push(n);\n    d_stack.push(d);\n\n    if (d <= 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  } //Rebuild path to leaf node\n\n\n  n_stack.push(new RBNode(RED, key, value, null, null, 1));\n\n  for (var s = n_stack.length - 2; s >= 0; --s) {\n    var n = n_stack[s];\n\n    if (d_stack[s] <= 0) {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s + 1], n.right, n._count + 1);\n    } else {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s + 1], n._count + 1);\n    }\n  } //Rebalance tree using rotations\n  //console.log(\"start insert\", key, d_stack)\n\n\n  for (var s = n_stack.length - 1; s > 1; --s) {\n    var p = n_stack[s - 1];\n    var n = n_stack[s];\n\n    if (p._color === BLACK || n._color === BLACK) {\n      break;\n    }\n\n    var pp = n_stack[s - 2];\n\n    if (pp.left === p) {\n      if (p.left === n) {\n        var y = pp.right;\n\n        if (y && y._color === RED) {\n          //console.log(\"LLr\")\n          p._color = BLACK;\n          pp.right = repaint(BLACK, y);\n          pp._color = RED;\n          s -= 1;\n        } else {\n          //console.log(\"LLb\")\n          pp._color = RED;\n          pp.left = p.right;\n          p._color = BLACK;\n          p.right = pp;\n          n_stack[s - 2] = p;\n          n_stack[s - 1] = n;\n          recount(pp);\n          recount(p);\n\n          if (s >= 3) {\n            var ppp = n_stack[s - 3];\n\n            if (ppp.left === pp) {\n              ppp.left = p;\n            } else {\n              ppp.right = p;\n            }\n          }\n\n          break;\n        }\n      } else {\n        var y = pp.right;\n\n        if (y && y._color === RED) {\n          //console.log(\"LRr\")\n          p._color = BLACK;\n          pp.right = repaint(BLACK, y);\n          pp._color = RED;\n          s -= 1;\n        } else {\n          //console.log(\"LRb\")\n          p.right = n.left;\n          pp._color = RED;\n          pp.left = n.right;\n          n._color = BLACK;\n          n.left = p;\n          n.right = pp;\n          n_stack[s - 2] = n;\n          n_stack[s - 1] = p;\n          recount(pp);\n          recount(p);\n          recount(n);\n\n          if (s >= 3) {\n            var ppp = n_stack[s - 3];\n\n            if (ppp.left === pp) {\n              ppp.left = n;\n            } else {\n              ppp.right = n;\n            }\n          }\n\n          break;\n        }\n      }\n    } else {\n      if (p.right === n) {\n        var y = pp.left;\n\n        if (y && y._color === RED) {\n          //console.log(\"RRr\", y.key)\n          p._color = BLACK;\n          pp.left = repaint(BLACK, y);\n          pp._color = RED;\n          s -= 1;\n        } else {\n          //console.log(\"RRb\")\n          pp._color = RED;\n          pp.right = p.left;\n          p._color = BLACK;\n          p.left = pp;\n          n_stack[s - 2] = p;\n          n_stack[s - 1] = n;\n          recount(pp);\n          recount(p);\n\n          if (s >= 3) {\n            var ppp = n_stack[s - 3];\n\n            if (ppp.right === pp) {\n              ppp.right = p;\n            } else {\n              ppp.left = p;\n            }\n          }\n\n          break;\n        }\n      } else {\n        var y = pp.left;\n\n        if (y && y._color === RED) {\n          //console.log(\"RLr\")\n          p._color = BLACK;\n          pp.left = repaint(BLACK, y);\n          pp._color = RED;\n          s -= 1;\n        } else {\n          //console.log(\"RLb\")\n          p.left = n.right;\n          pp._color = RED;\n          pp.right = n.left;\n          n._color = BLACK;\n          n.right = p;\n          n.left = pp;\n          n_stack[s - 2] = n;\n          n_stack[s - 1] = p;\n          recount(pp);\n          recount(p);\n          recount(n);\n\n          if (s >= 3) {\n            var ppp = n_stack[s - 3];\n\n            if (ppp.right === pp) {\n              ppp.right = n;\n            } else {\n              ppp.left = n;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n  } //Return new tree\n\n\n  n_stack[0]._color = BLACK;\n  return new RedBlackTree(cmp, n_stack[0]);\n}; //Visit all nodes inorder\n\n\nfunction doVisitFull(visit, node) {\n  if (node.left) {\n    var v = doVisitFull(visit, node.left);\n\n    if (v) {\n      return v;\n    }\n  }\n\n  var v = visit(node.key, node.value);\n\n  if (v) {\n    return v;\n  }\n\n  if (node.right) {\n    return doVisitFull(visit, node.right);\n  }\n} //Visit half nodes in order\n\n\nfunction doVisitHalf(lo, compare, visit, node) {\n  var l = compare(lo, node.key);\n\n  if (l <= 0) {\n    if (node.left) {\n      var v = doVisitHalf(lo, compare, visit, node.left);\n\n      if (v) {\n        return v;\n      }\n    }\n\n    var v = visit(node.key, node.value);\n\n    if (v) {\n      return v;\n    }\n  }\n\n  if (node.right) {\n    return doVisitHalf(lo, compare, visit, node.right);\n  }\n} //Visit all nodes within a range\n\n\nfunction doVisit(lo, hi, compare, visit, node) {\n  var l = compare(lo, node.key);\n  var h = compare(hi, node.key);\n  var v;\n\n  if (l <= 0) {\n    if (node.left) {\n      v = doVisit(lo, hi, compare, visit, node.left);\n\n      if (v) {\n        return v;\n      }\n    }\n\n    if (h > 0) {\n      v = visit(node.key, node.value);\n\n      if (v) {\n        return v;\n      }\n    }\n  }\n\n  if (h > 0 && node.right) {\n    return doVisit(lo, hi, compare, visit, node.right);\n  }\n}\n\nproto.forEach = function rbTreeForEach(visit, lo, hi) {\n  if (!this.root) {\n    return;\n  }\n\n  switch (arguments.length) {\n    case 1:\n      return doVisitFull(visit, this.root);\n      break;\n\n    case 2:\n      return doVisitHalf(lo, this._compare, visit, this.root);\n      break;\n\n    case 3:\n      if (this._compare(lo, hi) >= 0) {\n        return;\n      }\n\n      return doVisit(lo, hi, this._compare, visit, this.root);\n      break;\n  }\n}; //First item in list\n\n\nObject.defineProperty(proto, \"begin\", {\n  get: function () {\n    var stack = [];\n    var n = this.root;\n\n    while (n) {\n      stack.push(n);\n      n = n.left;\n    }\n\n    return new RedBlackTreeIterator(this, stack);\n  }\n}); //Last item in list\n\nObject.defineProperty(proto, \"end\", {\n  get: function () {\n    var stack = [];\n    var n = this.root;\n\n    while (n) {\n      stack.push(n);\n      n = n.right;\n    }\n\n    return new RedBlackTreeIterator(this, stack);\n  }\n}); //Find the ith item in the tree\n\nproto.at = function (idx) {\n  if (idx < 0) {\n    return new RedBlackTreeIterator(this, []);\n  }\n\n  var n = this.root;\n  var stack = [];\n\n  while (true) {\n    stack.push(n);\n\n    if (n.left) {\n      if (idx < n.left._count) {\n        n = n.left;\n        continue;\n      }\n\n      idx -= n.left._count;\n    }\n\n    if (!idx) {\n      return new RedBlackTreeIterator(this, stack);\n    }\n\n    idx -= 1;\n\n    if (n.right) {\n      if (idx >= n.right._count) {\n        break;\n      }\n\n      n = n.right;\n    } else {\n      break;\n    }\n  }\n\n  return new RedBlackTreeIterator(this, []);\n};\n\nproto.ge = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  var stack = [];\n  var last_ptr = 0;\n\n  while (n) {\n    var d = cmp(key, n.key);\n    stack.push(n);\n\n    if (d <= 0) {\n      last_ptr = stack.length;\n    }\n\n    if (d <= 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n\n  stack.length = last_ptr;\n  return new RedBlackTreeIterator(this, stack);\n};\n\nproto.gt = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  var stack = [];\n  var last_ptr = 0;\n\n  while (n) {\n    var d = cmp(key, n.key);\n    stack.push(n);\n\n    if (d < 0) {\n      last_ptr = stack.length;\n    }\n\n    if (d < 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n\n  stack.length = last_ptr;\n  return new RedBlackTreeIterator(this, stack);\n};\n\nproto.lt = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  var stack = [];\n  var last_ptr = 0;\n\n  while (n) {\n    var d = cmp(key, n.key);\n    stack.push(n);\n\n    if (d > 0) {\n      last_ptr = stack.length;\n    }\n\n    if (d <= 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n\n  stack.length = last_ptr;\n  return new RedBlackTreeIterator(this, stack);\n};\n\nproto.le = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  var stack = [];\n  var last_ptr = 0;\n\n  while (n) {\n    var d = cmp(key, n.key);\n    stack.push(n);\n\n    if (d >= 0) {\n      last_ptr = stack.length;\n    }\n\n    if (d < 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n\n  stack.length = last_ptr;\n  return new RedBlackTreeIterator(this, stack);\n}; //Finds the item with key if it exists\n\n\nproto.find = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n  var stack = [];\n\n  while (n) {\n    var d = cmp(key, n.key);\n    stack.push(n);\n\n    if (d === 0) {\n      return new RedBlackTreeIterator(this, stack);\n    }\n\n    if (d <= 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n\n  return new RedBlackTreeIterator(this, []);\n}; //Removes item with key from tree\n\n\nproto.remove = function (key) {\n  var iter = this.find(key);\n\n  if (iter) {\n    return iter.remove();\n  }\n\n  return this;\n}; //Returns the item at `key`\n\n\nproto.get = function (key) {\n  var cmp = this._compare;\n  var n = this.root;\n\n  while (n) {\n    var d = cmp(key, n.key);\n\n    if (d === 0) {\n      return n.value;\n    }\n\n    if (d <= 0) {\n      n = n.left;\n    } else {\n      n = n.right;\n    }\n  }\n\n  return;\n}; //Iterator for red black tree\n\n\nfunction RedBlackTreeIterator(tree, stack) {\n  this.tree = tree;\n  this._stack = stack;\n}\n\nvar iproto = RedBlackTreeIterator.prototype; //Test if iterator is valid\n\nObject.defineProperty(iproto, \"valid\", {\n  get: function () {\n    return this._stack.length > 0;\n  }\n}); //Node of the iterator\n\nObject.defineProperty(iproto, \"node\", {\n  get: function () {\n    if (this._stack.length > 0) {\n      return this._stack[this._stack.length - 1];\n    }\n\n    return null;\n  },\n  enumerable: true\n}); //Makes a copy of an iterator\n\niproto.clone = function () {\n  return new RedBlackTreeIterator(this.tree, this._stack.slice());\n}; //Swaps two nodes\n\n\nfunction swapNode(n, v) {\n  n.key = v.key;\n  n.value = v.value;\n  n.left = v.left;\n  n.right = v.right;\n  n._color = v._color;\n  n._count = v._count;\n} //Fix up a double black node in a tree\n\n\nfunction fixDoubleBlack(stack) {\n  var n, p, s, z;\n\n  for (var i = stack.length - 1; i >= 0; --i) {\n    n = stack[i];\n\n    if (i === 0) {\n      n._color = BLACK;\n      return;\n    } //console.log(\"visit node:\", n.key, i, stack[i].key, stack[i-1].key)\n\n\n    p = stack[i - 1];\n\n    if (p.left === n) {\n      //console.log(\"left child\")\n      s = p.right;\n\n      if (s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.right = cloneNode(s);\n        z = s.right = cloneNode(s.right);\n        p.right = s.left;\n        s.left = p;\n        s.right = z;\n        s._color = p._color;\n        n._color = BLACK;\n        p._color = BLACK;\n        z._color = BLACK;\n        recount(p);\n        recount(s);\n\n        if (i > 1) {\n          var pp = stack[i - 2];\n\n          if (pp.left === p) {\n            pp.left = s;\n          } else {\n            pp.right = s;\n          }\n        }\n\n        stack[i - 1] = s;\n        return;\n      } else if (s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\")\n        s = p.right = cloneNode(s);\n        z = s.left = cloneNode(s.left);\n        p.right = z.left;\n        s.left = z.right;\n        z.left = p;\n        z.right = s;\n        z._color = p._color;\n        p._color = BLACK;\n        s._color = BLACK;\n        n._color = BLACK;\n        recount(p);\n        recount(s);\n        recount(z);\n\n        if (i > 1) {\n          var pp = stack[i - 2];\n\n          if (pp.left === p) {\n            pp.left = z;\n          } else {\n            pp.right = z;\n          }\n        }\n\n        stack[i - 1] = z;\n        return;\n      }\n\n      if (s._color === BLACK) {\n        if (p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\", p.right.value)\n          p._color = BLACK;\n          p.right = repaint(RED, s);\n          return;\n        } else {\n          //console.log(\"case 2: black sibling, black parent\", p.right.value)\n          p.right = repaint(RED, s);\n          continue;\n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s);\n        p.right = s.left;\n        s.left = p;\n        s._color = p._color;\n        p._color = RED;\n        recount(p);\n        recount(s);\n\n        if (i > 1) {\n          var pp = stack[i - 2];\n\n          if (pp.left === p) {\n            pp.left = s;\n          } else {\n            pp.right = s;\n          }\n        }\n\n        stack[i - 1] = s;\n        stack[i] = p;\n\n        if (i + 1 < stack.length) {\n          stack[i + 1] = n;\n        } else {\n          stack.push(n);\n        }\n\n        i = i + 2;\n      }\n    } else {\n      //console.log(\"right child\")\n      s = p.left;\n\n      if (s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\", p.value, p._color)\n        s = p.left = cloneNode(s);\n        z = s.left = cloneNode(s.left);\n        p.left = s.right;\n        s.right = p;\n        s.left = z;\n        s._color = p._color;\n        n._color = BLACK;\n        p._color = BLACK;\n        z._color = BLACK;\n        recount(p);\n        recount(s);\n\n        if (i > 1) {\n          var pp = stack[i - 2];\n\n          if (pp.right === p) {\n            pp.right = s;\n          } else {\n            pp.left = s;\n          }\n        }\n\n        stack[i - 1] = s;\n        return;\n      } else if (s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.left = cloneNode(s);\n        z = s.right = cloneNode(s.right);\n        p.left = z.right;\n        s.right = z.left;\n        z.right = p;\n        z.left = s;\n        z._color = p._color;\n        p._color = BLACK;\n        s._color = BLACK;\n        n._color = BLACK;\n        recount(p);\n        recount(s);\n        recount(z);\n\n        if (i > 1) {\n          var pp = stack[i - 2];\n\n          if (pp.right === p) {\n            pp.right = z;\n          } else {\n            pp.left = z;\n          }\n        }\n\n        stack[i - 1] = z;\n        return;\n      }\n\n      if (s._color === BLACK) {\n        if (p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\")\n          p._color = BLACK;\n          p.left = repaint(RED, s);\n          return;\n        } else {\n          //console.log(\"case 2: black sibling, black parent\")\n          p.left = repaint(RED, s);\n          continue;\n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s);\n        p.left = s.right;\n        s.right = p;\n        s._color = p._color;\n        p._color = RED;\n        recount(p);\n        recount(s);\n\n        if (i > 1) {\n          var pp = stack[i - 2];\n\n          if (pp.right === p) {\n            pp.right = s;\n          } else {\n            pp.left = s;\n          }\n        }\n\n        stack[i - 1] = s;\n        stack[i] = p;\n\n        if (i + 1 < stack.length) {\n          stack[i + 1] = n;\n        } else {\n          stack.push(n);\n        }\n\n        i = i + 2;\n      }\n    }\n  }\n} //Removes item at iterator from tree\n\n\niproto.remove = function () {\n  var stack = this._stack;\n\n  if (stack.length === 0) {\n    return this.tree;\n  } //First copy path to node\n\n\n  var cstack = new Array(stack.length);\n  var n = stack[stack.length - 1];\n  cstack[cstack.length - 1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count);\n\n  for (var i = stack.length - 2; i >= 0; --i) {\n    var n = stack[i];\n\n    if (n.left === stack[i + 1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i + 1], n.right, n._count);\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);\n    }\n  } //Get node\n\n\n  n = cstack[cstack.length - 1]; //console.log(\"start remove: \", n.value)\n  //If not leaf, then swap with previous node\n\n  if (n.left && n.right) {\n    //console.log(\"moving to leaf\")\n    //First walk to previous leaf\n    var split = cstack.length;\n    n = n.left;\n\n    while (n.right) {\n      cstack.push(n);\n      n = n.right;\n    } //Copy path to leaf\n\n\n    var v = cstack[split - 1];\n    cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count));\n    cstack[split - 1].key = n.key;\n    cstack[split - 1].value = n.value; //Fix up stack\n\n    for (var i = cstack.length - 2; i >= split; --i) {\n      n = cstack[i];\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);\n    }\n\n    cstack[split - 1].left = cstack[split];\n  } //console.log(\"stack=\", cstack.map(function(v) { return v.value }))\n  //Remove leaf node\n\n\n  n = cstack[cstack.length - 1];\n\n  if (n._color === RED) {\n    //Easy case: removing red leaf\n    //console.log(\"RED leaf\")\n    var p = cstack[cstack.length - 2];\n\n    if (p.left === n) {\n      p.left = null;\n    } else if (p.right === n) {\n      p.right = null;\n    }\n\n    cstack.pop();\n\n    for (var i = 0; i < cstack.length; ++i) {\n      cstack[i]._count--;\n    }\n\n    return new RedBlackTree(this.tree._compare, cstack[0]);\n  } else {\n    if (n.left || n.right) {\n      //Second easy case:  Single child black parent\n      //console.log(\"BLACK single child\")\n      if (n.left) {\n        swapNode(n, n.left);\n      } else if (n.right) {\n        swapNode(n, n.right);\n      } //Child must be red, so repaint it black to balance color\n\n\n      n._color = BLACK;\n\n      for (var i = 0; i < cstack.length - 1; ++i) {\n        cstack[i]._count--;\n      }\n\n      return new RedBlackTree(this.tree._compare, cstack[0]);\n    } else if (cstack.length === 1) {\n      //Third easy case: root\n      //console.log(\"ROOT\")\n      return new RedBlackTree(this.tree._compare, null);\n    } else {\n      //Hard case: Repaint n, and then do some nasty stuff\n      //console.log(\"BLACK leaf no children\")\n      for (var i = 0; i < cstack.length; ++i) {\n        cstack[i]._count--;\n      }\n\n      var parent = cstack[cstack.length - 2];\n      fixDoubleBlack(cstack); //Fix up links\n\n      if (parent.left === n) {\n        parent.left = null;\n      } else {\n        parent.right = null;\n      }\n    }\n  }\n\n  return new RedBlackTree(this.tree._compare, cstack[0]);\n}; //Returns key\n\n\nObject.defineProperty(iproto, \"key\", {\n  get: function () {\n    if (this._stack.length > 0) {\n      return this._stack[this._stack.length - 1].key;\n    }\n\n    return;\n  },\n  enumerable: true\n}); //Returns value\n\nObject.defineProperty(iproto, \"value\", {\n  get: function () {\n    if (this._stack.length > 0) {\n      return this._stack[this._stack.length - 1].value;\n    }\n\n    return;\n  },\n  enumerable: true\n}); //Returns the position of this iterator in the sorted list\n\nObject.defineProperty(iproto, \"index\", {\n  get: function () {\n    var idx = 0;\n    var stack = this._stack;\n\n    if (stack.length === 0) {\n      var r = this.tree.root;\n\n      if (r) {\n        return r._count;\n      }\n\n      return 0;\n    } else if (stack[stack.length - 1].left) {\n      idx = stack[stack.length - 1].left._count;\n    }\n\n    for (var s = stack.length - 2; s >= 0; --s) {\n      if (stack[s + 1] === stack[s].right) {\n        ++idx;\n\n        if (stack[s].left) {\n          idx += stack[s].left._count;\n        }\n      }\n    }\n\n    return idx;\n  },\n  enumerable: true\n}); //Advances iterator to next element in list\n\niproto.next = function () {\n  var stack = this._stack;\n\n  if (stack.length === 0) {\n    return;\n  }\n\n  var n = stack[stack.length - 1];\n\n  if (n.right) {\n    n = n.right;\n\n    while (n) {\n      stack.push(n);\n      n = n.left;\n    }\n  } else {\n    stack.pop();\n\n    while (stack.length > 0 && stack[stack.length - 1].right === n) {\n      n = stack[stack.length - 1];\n      stack.pop();\n    }\n  }\n}; //Checks if iterator is at end of tree\n\n\nObject.defineProperty(iproto, \"hasNext\", {\n  get: function () {\n    var stack = this._stack;\n\n    if (stack.length === 0) {\n      return false;\n    }\n\n    if (stack[stack.length - 1].right) {\n      return true;\n    }\n\n    for (var s = stack.length - 1; s > 0; --s) {\n      if (stack[s - 1].left === stack[s]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}); //Update value\n\niproto.update = function (value) {\n  var stack = this._stack;\n\n  if (stack.length === 0) {\n    throw new Error(\"Can't update empty node!\");\n  }\n\n  var cstack = new Array(stack.length);\n  var n = stack[stack.length - 1];\n  cstack[cstack.length - 1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count);\n\n  for (var i = stack.length - 2; i >= 0; --i) {\n    n = stack[i];\n\n    if (n.left === stack[i + 1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i + 1], n.right, n._count);\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);\n    }\n  }\n\n  return new RedBlackTree(this.tree._compare, cstack[0]);\n}; //Moves iterator backward one element\n\n\niproto.prev = function () {\n  var stack = this._stack;\n\n  if (stack.length === 0) {\n    return;\n  }\n\n  var n = stack[stack.length - 1];\n\n  if (n.left) {\n    n = n.left;\n\n    while (n) {\n      stack.push(n);\n      n = n.right;\n    }\n  } else {\n    stack.pop();\n\n    while (stack.length > 0 && stack[stack.length - 1].left === n) {\n      n = stack[stack.length - 1];\n      stack.pop();\n    }\n  }\n}; //Checks if iterator is at start of tree\n\n\nObject.defineProperty(iproto, \"hasPrev\", {\n  get: function () {\n    var stack = this._stack;\n\n    if (stack.length === 0) {\n      return false;\n    }\n\n    if (stack[stack.length - 1].left) {\n      return true;\n    }\n\n    for (var s = stack.length - 1; s > 0; --s) {\n      if (stack[s - 1].right === stack[s]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}); //Default comparison function\n\nfunction defaultCompare(a, b) {\n  if (a < b) {\n    return -1;\n  }\n\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n} //Build a tree\n\n\nfunction createRBTree(compare) {\n  return new RedBlackTree(compare || defaultCompare, null);\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/functional-red-black-tree/rbtree.js"],"names":["module","exports","createRBTree","RED","BLACK","RBNode","color","key","value","left","right","count","_color","_count","cloneNode","node","repaint","recount","RedBlackTree","compare","root","_compare","proto","prototype","Object","defineProperty","get","result","forEach","k","v","push","insert","cmp","n","n_stack","d_stack","d","s","length","p","pp","y","ppp","doVisitFull","visit","doVisitHalf","lo","l","doVisit","hi","h","rbTreeForEach","arguments","stack","RedBlackTreeIterator","at","idx","ge","last_ptr","gt","lt","le","find","remove","iter","tree","_stack","iproto","enumerable","clone","slice","swapNode","fixDoubleBlack","z","i","cstack","Array","split","pop","parent","r","next","update","Error","prev","defaultCompare","a","b"],"mappings":"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","sourcesContent":["\"use strict\"\n\nmodule.exports = createRBTree\n\nvar RED   = 0\nvar BLACK = 1\n\nfunction RBNode(color, key, value, left, right, count) {\n  this._color = color\n  this.key = key\n  this.value = value\n  this.left = left\n  this.right = right\n  this._count = count\n}\n\nfunction cloneNode(node) {\n  return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count)\n}\n\nfunction repaint(color, node) {\n  return new RBNode(color, node.key, node.value, node.left, node.right, node._count)\n}\n\nfunction recount(node) {\n  node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0)\n}\n\nfunction RedBlackTree(compare, root) {\n  this._compare = compare\n  this.root = root\n}\n\nvar proto = RedBlackTree.prototype\n\nObject.defineProperty(proto, \"keys\", {\n  get: function() {\n    var result = []\n    this.forEach(function(k,v) {\n      result.push(k)\n    })\n    return result\n  }\n})\n\nObject.defineProperty(proto, \"values\", {\n  get: function() {\n    var result = []\n    this.forEach(function(k,v) {\n      result.push(v)\n    })\n    return result\n  }\n})\n\n//Returns the number of nodes in the tree\nObject.defineProperty(proto, \"length\", {\n  get: function() {\n    if(this.root) {\n      return this.root._count\n    }\n    return 0\n  }\n})\n\n//Insert a new item into the tree\nproto.insert = function(key, value) {\n  var cmp = this._compare\n  //Find point to insert new node at\n  var n = this.root\n  var n_stack = []\n  var d_stack = []\n  while(n) {\n    var d = cmp(key, n.key)\n    n_stack.push(n)\n    d_stack.push(d)\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  //Rebuild path to leaf node\n  n_stack.push(new RBNode(RED, key, value, null, null, 1))\n  for(var s=n_stack.length-2; s>=0; --s) {\n    var n = n_stack[s]\n    if(d_stack[s] <= 0) {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s+1], n.right, n._count+1)\n    } else {\n      n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s+1], n._count+1)\n    }\n  }\n  //Rebalance tree using rotations\n  //console.log(\"start insert\", key, d_stack)\n  for(var s=n_stack.length-1; s>1; --s) {\n    var p = n_stack[s-1]\n    var n = n_stack[s]\n    if(p._color === BLACK || n._color === BLACK) {\n      break\n    }\n    var pp = n_stack[s-2]\n    if(pp.left === p) {\n      if(p.left === n) {\n        var y = pp.right\n        if(y && y._color === RED) {\n          //console.log(\"LLr\")\n          p._color = BLACK\n          pp.right = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"LLb\")\n          pp._color = RED\n          pp.left = p.right\n          p._color = BLACK\n          p.right = pp\n          n_stack[s-2] = p\n          n_stack[s-1] = n\n          recount(pp)\n          recount(p)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.left === pp) {\n              ppp.left = p\n            } else {\n              ppp.right = p\n            }\n          }\n          break\n        }\n      } else {\n        var y = pp.right\n        if(y && y._color === RED) {\n          //console.log(\"LRr\")\n          p._color = BLACK\n          pp.right = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"LRb\")\n          p.right = n.left\n          pp._color = RED\n          pp.left = n.right\n          n._color = BLACK\n          n.left = p\n          n.right = pp\n          n_stack[s-2] = n\n          n_stack[s-1] = p\n          recount(pp)\n          recount(p)\n          recount(n)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.left === pp) {\n              ppp.left = n\n            } else {\n              ppp.right = n\n            }\n          }\n          break\n        }\n      }\n    } else {\n      if(p.right === n) {\n        var y = pp.left\n        if(y && y._color === RED) {\n          //console.log(\"RRr\", y.key)\n          p._color = BLACK\n          pp.left = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"RRb\")\n          pp._color = RED\n          pp.right = p.left\n          p._color = BLACK\n          p.left = pp\n          n_stack[s-2] = p\n          n_stack[s-1] = n\n          recount(pp)\n          recount(p)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.right === pp) {\n              ppp.right = p\n            } else {\n              ppp.left = p\n            }\n          }\n          break\n        }\n      } else {\n        var y = pp.left\n        if(y && y._color === RED) {\n          //console.log(\"RLr\")\n          p._color = BLACK\n          pp.left = repaint(BLACK, y)\n          pp._color = RED\n          s -= 1\n        } else {\n          //console.log(\"RLb\")\n          p.left = n.right\n          pp._color = RED\n          pp.right = n.left\n          n._color = BLACK\n          n.right = p\n          n.left = pp\n          n_stack[s-2] = n\n          n_stack[s-1] = p\n          recount(pp)\n          recount(p)\n          recount(n)\n          if(s >= 3) {\n            var ppp = n_stack[s-3]\n            if(ppp.right === pp) {\n              ppp.right = n\n            } else {\n              ppp.left = n\n            }\n          }\n          break\n        }\n      }\n    }\n  }\n  //Return new tree\n  n_stack[0]._color = BLACK\n  return new RedBlackTree(cmp, n_stack[0])\n}\n\n\n//Visit all nodes inorder\nfunction doVisitFull(visit, node) {\n  if(node.left) {\n    var v = doVisitFull(visit, node.left)\n    if(v) { return v }\n  }\n  var v = visit(node.key, node.value)\n  if(v) { return v }\n  if(node.right) {\n    return doVisitFull(visit, node.right)\n  }\n}\n\n//Visit half nodes in order\nfunction doVisitHalf(lo, compare, visit, node) {\n  var l = compare(lo, node.key)\n  if(l <= 0) {\n    if(node.left) {\n      var v = doVisitHalf(lo, compare, visit, node.left)\n      if(v) { return v }\n    }\n    var v = visit(node.key, node.value)\n    if(v) { return v }\n  }\n  if(node.right) {\n    return doVisitHalf(lo, compare, visit, node.right)\n  }\n}\n\n//Visit all nodes within a range\nfunction doVisit(lo, hi, compare, visit, node) {\n  var l = compare(lo, node.key)\n  var h = compare(hi, node.key)\n  var v\n  if(l <= 0) {\n    if(node.left) {\n      v = doVisit(lo, hi, compare, visit, node.left)\n      if(v) { return v }\n    }\n    if(h > 0) {\n      v = visit(node.key, node.value)\n      if(v) { return v }\n    }\n  }\n  if(h > 0 && node.right) {\n    return doVisit(lo, hi, compare, visit, node.right)\n  }\n}\n\n\nproto.forEach = function rbTreeForEach(visit, lo, hi) {\n  if(!this.root) {\n    return\n  }\n  switch(arguments.length) {\n    case 1:\n      return doVisitFull(visit, this.root)\n    break\n\n    case 2:\n      return doVisitHalf(lo, this._compare, visit, this.root)\n    break\n\n    case 3:\n      if(this._compare(lo, hi) >= 0) {\n        return\n      }\n      return doVisit(lo, hi, this._compare, visit, this.root)\n    break\n  }\n}\n\n//First item in list\nObject.defineProperty(proto, \"begin\", {\n  get: function() {\n    var stack = []\n    var n = this.root\n    while(n) {\n      stack.push(n)\n      n = n.left\n    }\n    return new RedBlackTreeIterator(this, stack)\n  }\n})\n\n//Last item in list\nObject.defineProperty(proto, \"end\", {\n  get: function() {\n    var stack = []\n    var n = this.root\n    while(n) {\n      stack.push(n)\n      n = n.right\n    }\n    return new RedBlackTreeIterator(this, stack)\n  }\n})\n\n//Find the ith item in the tree\nproto.at = function(idx) {\n  if(idx < 0) {\n    return new RedBlackTreeIterator(this, [])\n  }\n  var n = this.root\n  var stack = []\n  while(true) {\n    stack.push(n)\n    if(n.left) {\n      if(idx < n.left._count) {\n        n = n.left\n        continue\n      }\n      idx -= n.left._count\n    }\n    if(!idx) {\n      return new RedBlackTreeIterator(this, stack)\n    }\n    idx -= 1\n    if(n.right) {\n      if(idx >= n.right._count) {\n        break\n      }\n      n = n.right\n    } else {\n      break\n    }\n  }\n  return new RedBlackTreeIterator(this, [])\n}\n\nproto.ge = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d <= 0) {\n      last_ptr = stack.length\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.gt = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d < 0) {\n      last_ptr = stack.length\n    }\n    if(d < 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.lt = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d > 0) {\n      last_ptr = stack.length\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\nproto.le = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  var last_ptr = 0\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d >= 0) {\n      last_ptr = stack.length\n    }\n    if(d < 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  stack.length = last_ptr\n  return new RedBlackTreeIterator(this, stack)\n}\n\n//Finds the item with key if it exists\nproto.find = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  var stack = []\n  while(n) {\n    var d = cmp(key, n.key)\n    stack.push(n)\n    if(d === 0) {\n      return new RedBlackTreeIterator(this, stack)\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  return new RedBlackTreeIterator(this, [])\n}\n\n//Removes item with key from tree\nproto.remove = function(key) {\n  var iter = this.find(key)\n  if(iter) {\n    return iter.remove()\n  }\n  return this\n}\n\n//Returns the item at `key`\nproto.get = function(key) {\n  var cmp = this._compare\n  var n = this.root\n  while(n) {\n    var d = cmp(key, n.key)\n    if(d === 0) {\n      return n.value\n    }\n    if(d <= 0) {\n      n = n.left\n    } else {\n      n = n.right\n    }\n  }\n  return\n}\n\n//Iterator for red black tree\nfunction RedBlackTreeIterator(tree, stack) {\n  this.tree = tree\n  this._stack = stack\n}\n\nvar iproto = RedBlackTreeIterator.prototype\n\n//Test if iterator is valid\nObject.defineProperty(iproto, \"valid\", {\n  get: function() {\n    return this._stack.length > 0\n  }\n})\n\n//Node of the iterator\nObject.defineProperty(iproto, \"node\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1]\n    }\n    return null\n  },\n  enumerable: true\n})\n\n//Makes a copy of an iterator\niproto.clone = function() {\n  return new RedBlackTreeIterator(this.tree, this._stack.slice())\n}\n\n//Swaps two nodes\nfunction swapNode(n, v) {\n  n.key = v.key\n  n.value = v.value\n  n.left = v.left\n  n.right = v.right\n  n._color = v._color\n  n._count = v._count\n}\n\n//Fix up a double black node in a tree\nfunction fixDoubleBlack(stack) {\n  var n, p, s, z\n  for(var i=stack.length-1; i>=0; --i) {\n    n = stack[i]\n    if(i === 0) {\n      n._color = BLACK\n      return\n    }\n    //console.log(\"visit node:\", n.key, i, stack[i].key, stack[i-1].key)\n    p = stack[i-1]\n    if(p.left === n) {\n      //console.log(\"left child\")\n      s = p.right\n      if(s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.right = cloneNode(s)\n        z = s.right = cloneNode(s.right)\n        p.right = s.left\n        s.left = p\n        s.right = z\n        s._color = p._color\n        n._color = BLACK\n        p._color = BLACK\n        z._color = BLACK\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i-1] = s\n        return\n      } else if(s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\")\n        s = p.right = cloneNode(s)\n        z = s.left = cloneNode(s.left)\n        p.right = z.left\n        s.left = z.right\n        z.left = p\n        z.right = s\n        z._color = p._color\n        p._color = BLACK\n        s._color = BLACK\n        n._color = BLACK\n        recount(p)\n        recount(s)\n        recount(z)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = z\n          } else {\n            pp.right = z\n          }\n        }\n        stack[i-1] = z\n        return\n      }\n      if(s._color === BLACK) {\n        if(p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\", p.right.value)\n          p._color = BLACK\n          p.right = repaint(RED, s)\n          return\n        } else {\n          //console.log(\"case 2: black sibling, black parent\", p.right.value)\n          p.right = repaint(RED, s)\n          continue  \n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s)\n        p.right = s.left\n        s.left = p\n        s._color = p._color\n        p._color = RED\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.left === p) {\n            pp.left = s\n          } else {\n            pp.right = s\n          }\n        }\n        stack[i-1] = s\n        stack[i] = p\n        if(i+1 < stack.length) {\n          stack[i+1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i+2\n      }\n    } else {\n      //console.log(\"right child\")\n      s = p.left\n      if(s.left && s.left._color === RED) {\n        //console.log(\"case 1: left sibling child red\", p.value, p._color)\n        s = p.left = cloneNode(s)\n        z = s.left = cloneNode(s.left)\n        p.left = s.right\n        s.right = p\n        s.left = z\n        s._color = p._color\n        n._color = BLACK\n        p._color = BLACK\n        z._color = BLACK\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i-1] = s\n        return\n      } else if(s.right && s.right._color === RED) {\n        //console.log(\"case 1: right sibling child red\")\n        s = p.left = cloneNode(s)\n        z = s.right = cloneNode(s.right)\n        p.left = z.right\n        s.right = z.left\n        z.right = p\n        z.left = s\n        z._color = p._color\n        p._color = BLACK\n        s._color = BLACK\n        n._color = BLACK\n        recount(p)\n        recount(s)\n        recount(z)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = z\n          } else {\n            pp.left = z\n          }\n        }\n        stack[i-1] = z\n        return\n      }\n      if(s._color === BLACK) {\n        if(p._color === RED) {\n          //console.log(\"case 2: black sibling, red parent\")\n          p._color = BLACK\n          p.left = repaint(RED, s)\n          return\n        } else {\n          //console.log(\"case 2: black sibling, black parent\")\n          p.left = repaint(RED, s)\n          continue  \n        }\n      } else {\n        //console.log(\"case 3: red sibling\")\n        s = cloneNode(s)\n        p.left = s.right\n        s.right = p\n        s._color = p._color\n        p._color = RED\n        recount(p)\n        recount(s)\n        if(i > 1) {\n          var pp = stack[i-2]\n          if(pp.right === p) {\n            pp.right = s\n          } else {\n            pp.left = s\n          }\n        }\n        stack[i-1] = s\n        stack[i] = p\n        if(i+1 < stack.length) {\n          stack[i+1] = n\n        } else {\n          stack.push(n)\n        }\n        i = i+2\n      }\n    }\n  }\n}\n\n//Removes item at iterator from tree\niproto.remove = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return this.tree\n  }\n  //First copy path to node\n  var cstack = new Array(stack.length)\n  var n = stack[stack.length-1]\n  cstack[cstack.length-1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count)\n  for(var i=stack.length-2; i>=0; --i) {\n    var n = stack[i]\n    if(n.left === stack[i+1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n  }\n\n  //Get node\n  n = cstack[cstack.length-1]\n  //console.log(\"start remove: \", n.value)\n\n  //If not leaf, then swap with previous node\n  if(n.left && n.right) {\n    //console.log(\"moving to leaf\")\n\n    //First walk to previous leaf\n    var split = cstack.length\n    n = n.left\n    while(n.right) {\n      cstack.push(n)\n      n = n.right\n    }\n    //Copy path to leaf\n    var v = cstack[split-1]\n    cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count))\n    cstack[split-1].key = n.key\n    cstack[split-1].value = n.value\n\n    //Fix up stack\n    for(var i=cstack.length-2; i>=split; --i) {\n      n = cstack[i]\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n    cstack[split-1].left = cstack[split]\n  }\n  //console.log(\"stack=\", cstack.map(function(v) { return v.value }))\n\n  //Remove leaf node\n  n = cstack[cstack.length-1]\n  if(n._color === RED) {\n    //Easy case: removing red leaf\n    //console.log(\"RED leaf\")\n    var p = cstack[cstack.length-2]\n    if(p.left === n) {\n      p.left = null\n    } else if(p.right === n) {\n      p.right = null\n    }\n    cstack.pop()\n    for(var i=0; i<cstack.length; ++i) {\n      cstack[i]._count--\n    }\n    return new RedBlackTree(this.tree._compare, cstack[0])\n  } else {\n    if(n.left || n.right) {\n      //Second easy case:  Single child black parent\n      //console.log(\"BLACK single child\")\n      if(n.left) {\n        swapNode(n, n.left)\n      } else if(n.right) {\n        swapNode(n, n.right)\n      }\n      //Child must be red, so repaint it black to balance color\n      n._color = BLACK\n      for(var i=0; i<cstack.length-1; ++i) {\n        cstack[i]._count--\n      }\n      return new RedBlackTree(this.tree._compare, cstack[0])\n    } else if(cstack.length === 1) {\n      //Third easy case: root\n      //console.log(\"ROOT\")\n      return new RedBlackTree(this.tree._compare, null)\n    } else {\n      //Hard case: Repaint n, and then do some nasty stuff\n      //console.log(\"BLACK leaf no children\")\n      for(var i=0; i<cstack.length; ++i) {\n        cstack[i]._count--\n      }\n      var parent = cstack[cstack.length-2]\n      fixDoubleBlack(cstack)\n      //Fix up links\n      if(parent.left === n) {\n        parent.left = null\n      } else {\n        parent.right = null\n      }\n    }\n  }\n  return new RedBlackTree(this.tree._compare, cstack[0])\n}\n\n//Returns key\nObject.defineProperty(iproto, \"key\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1].key\n    }\n    return\n  },\n  enumerable: true\n})\n\n//Returns value\nObject.defineProperty(iproto, \"value\", {\n  get: function() {\n    if(this._stack.length > 0) {\n      return this._stack[this._stack.length-1].value\n    }\n    return\n  },\n  enumerable: true\n})\n\n\n//Returns the position of this iterator in the sorted list\nObject.defineProperty(iproto, \"index\", {\n  get: function() {\n    var idx = 0\n    var stack = this._stack\n    if(stack.length === 0) {\n      var r = this.tree.root\n      if(r) {\n        return r._count\n      }\n      return 0\n    } else if(stack[stack.length-1].left) {\n      idx = stack[stack.length-1].left._count\n    }\n    for(var s=stack.length-2; s>=0; --s) {\n      if(stack[s+1] === stack[s].right) {\n        ++idx\n        if(stack[s].left) {\n          idx += stack[s].left._count\n        }\n      }\n    }\n    return idx\n  },\n  enumerable: true\n})\n\n//Advances iterator to next element in list\niproto.next = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return\n  }\n  var n = stack[stack.length-1]\n  if(n.right) {\n    n = n.right\n    while(n) {\n      stack.push(n)\n      n = n.left\n    }\n  } else {\n    stack.pop()\n    while(stack.length > 0 && stack[stack.length-1].right === n) {\n      n = stack[stack.length-1]\n      stack.pop()\n    }\n  }\n}\n\n//Checks if iterator is at end of tree\nObject.defineProperty(iproto, \"hasNext\", {\n  get: function() {\n    var stack = this._stack\n    if(stack.length === 0) {\n      return false\n    }\n    if(stack[stack.length-1].right) {\n      return true\n    }\n    for(var s=stack.length-1; s>0; --s) {\n      if(stack[s-1].left === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n})\n\n//Update value\niproto.update = function(value) {\n  var stack = this._stack\n  if(stack.length === 0) {\n    throw new Error(\"Can't update empty node!\")\n  }\n  var cstack = new Array(stack.length)\n  var n = stack[stack.length-1]\n  cstack[cstack.length-1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count)\n  for(var i=stack.length-2; i>=0; --i) {\n    n = stack[i]\n    if(n.left === stack[i+1]) {\n      cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i+1], n.right, n._count)\n    } else {\n      cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i+1], n._count)\n    }\n  }\n  return new RedBlackTree(this.tree._compare, cstack[0])\n}\n\n//Moves iterator backward one element\niproto.prev = function() {\n  var stack = this._stack\n  if(stack.length === 0) {\n    return\n  }\n  var n = stack[stack.length-1]\n  if(n.left) {\n    n = n.left\n    while(n) {\n      stack.push(n)\n      n = n.right\n    }\n  } else {\n    stack.pop()\n    while(stack.length > 0 && stack[stack.length-1].left === n) {\n      n = stack[stack.length-1]\n      stack.pop()\n    }\n  }\n}\n\n//Checks if iterator is at start of tree\nObject.defineProperty(iproto, \"hasPrev\", {\n  get: function() {\n    var stack = this._stack\n    if(stack.length === 0) {\n      return false\n    }\n    if(stack[stack.length-1].left) {\n      return true\n    }\n    for(var s=stack.length-1; s>0; --s) {\n      if(stack[s-1].right === stack[s]) {\n        return true\n      }\n    }\n    return false\n  }\n})\n\n//Default comparison function\nfunction defaultCompare(a, b) {\n  if(a < b) {\n    return -1\n  }\n  if(a > b) {\n    return 1\n  }\n  return 0\n}\n\n//Build a tree\nfunction createRBTree(compare) {\n  return new RedBlackTree(compare || defaultCompare, null)\n}"]},"metadata":{},"sourceType":"script"}