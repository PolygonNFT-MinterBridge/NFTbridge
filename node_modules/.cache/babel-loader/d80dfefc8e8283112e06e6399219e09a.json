{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst net_1 = __importDefault(require(\"net\"));\n\nconst tls_1 = __importDefault(require(\"tls\"));\n\nconst url_1 = __importDefault(require(\"url\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst once_1 = __importDefault(require(\"@tootallnate/once\"));\n\nconst agent_base_1 = require(\"agent-base\");\n\nconst debug = debug_1.default('http-proxy-agent');\n\nfunction isHTTPS(protocol) {\n  return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\n}\n/**\n * The `HttpProxyAgent` implements an HTTP Agent subclass that connects\n * to the specified \"HTTP proxy server\" in order to proxy HTTP requests.\n *\n * @api public\n */\n\n\nclass HttpProxyAgent extends agent_base_1.Agent {\n  constructor(_opts) {\n    let opts;\n\n    if (typeof _opts === 'string') {\n      opts = url_1.default.parse(_opts);\n    } else {\n      opts = _opts;\n    }\n\n    if (!opts) {\n      throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n    }\n\n    debug('Creating new HttpProxyAgent instance: %o', opts);\n    super(opts);\n    const proxy = Object.assign({}, opts); // If `true`, then connect to the proxy server over TLS.\n    // Defaults to `false`.\n\n    this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol); // Prefer `hostname` over `host`, and set the `port` if needed.\n\n    proxy.host = proxy.hostname || proxy.host;\n\n    if (typeof proxy.port === 'string') {\n      proxy.port = parseInt(proxy.port, 10);\n    }\n\n    if (!proxy.port && proxy.host) {\n      proxy.port = this.secureProxy ? 443 : 80;\n    }\n\n    if (proxy.host && proxy.path) {\n      // If both a `host` and `path` are specified then it's most likely\n      // the result of a `url.parse()` call... we need to remove the\n      // `path` portion so that `net.connect()` doesn't attempt to open\n      // that as a Unix socket file.\n      delete proxy.path;\n      delete proxy.pathname;\n    }\n\n    this.proxy = proxy;\n  }\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   *\n   * @api protected\n   */\n\n\n  callback(req, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        proxy,\n        secureProxy\n      } = this;\n      const parsed = url_1.default.parse(req.path);\n\n      if (!parsed.protocol) {\n        parsed.protocol = 'http:';\n      }\n\n      if (!parsed.hostname) {\n        parsed.hostname = opts.hostname || opts.host || null;\n      }\n\n      if (parsed.port == null && typeof opts.port) {\n        parsed.port = String(opts.port);\n      }\n\n      if (parsed.port === '80') {\n        // if port is 80, then we can remove the port so that the\n        // \":80\" portion is not on the produced URL\n        delete parsed.port;\n      } // Change the `http.ClientRequest` instance's \"path\" field\n      // to the absolute path of the URL that will be requested.\n\n\n      req.path = url_1.default.format(parsed); // Inject the `Proxy-Authorization` header if necessary.\n\n      if (proxy.auth) {\n        req.setHeader('Proxy-Authorization', `Basic ${Buffer.from(proxy.auth).toString('base64')}`);\n      } // Create a socket connection to the proxy server.\n\n\n      let socket;\n\n      if (secureProxy) {\n        debug('Creating `tls.Socket`: %o', proxy);\n        socket = tls_1.default.connect(proxy);\n      } else {\n        debug('Creating `net.Socket`: %o', proxy);\n        socket = net_1.default.connect(proxy);\n      } // At this point, the http ClientRequest's internal `_header` field\n      // might have already been set. If this is the case then we'll need\n      // to re-generate the string since we just changed the `req.path`.\n\n\n      if (req._header) {\n        let first;\n        let endOfHeaders;\n        debug('Regenerating stored HTTP header string for request');\n        req._header = null;\n\n        req._implicitHeader();\n\n        if (req.output && req.output.length > 0) {\n          // Node < 12\n          debug('Patching connection write() output buffer with updated header');\n          first = req.output[0];\n          endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n          req.output[0] = req._header + first.substring(endOfHeaders);\n          debug('Output buffer: %o', req.output);\n        } else if (req.outputData && req.outputData.length > 0) {\n          // Node >= 12\n          debug('Patching connection write() output buffer with updated header');\n          first = req.outputData[0].data;\n          endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n          req.outputData[0].data = req._header + first.substring(endOfHeaders);\n          debug('Output buffer: %o', req.outputData[0].data);\n        }\n      } // Wait for the socket's `connect` event, so that this `callback()`\n      // function throws instead of the `http` request machinery. This is\n      // important for i.e. `PacProxyAgent` which determines a failed proxy\n      // connection via the `callback()` function throwing.\n\n\n      yield once_1.default(socket, 'connect');\n      return socket;\n    });\n  }\n\n}\n\nexports.default = HttpProxyAgent;","map":{"version":3,"sources":["../src/agent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst net_1 = __importDefault(require(\"net\"));\nconst tls_1 = __importDefault(require(\"tls\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst once_1 = __importDefault(require(\"@tootallnate/once\"));\nconst agent_base_1 = require(\"agent-base\");\nconst debug = debug_1.default('http-proxy-agent');\nfunction isHTTPS(protocol) {\n    return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\n}\n/**\n * The `HttpProxyAgent` implements an HTTP Agent subclass that connects\n * to the specified \"HTTP proxy server\" in order to proxy HTTP requests.\n *\n * @api public\n */\nclass HttpProxyAgent extends agent_base_1.Agent {\n    constructor(_opts) {\n        let opts;\n        if (typeof _opts === 'string') {\n            opts = url_1.default.parse(_opts);\n        }\n        else {\n            opts = _opts;\n        }\n        if (!opts) {\n            throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n        }\n        debug('Creating new HttpProxyAgent instance: %o', opts);\n        super(opts);\n        const proxy = Object.assign({}, opts);\n        // If `true`, then connect to the proxy server over TLS.\n        // Defaults to `false`.\n        this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);\n        // Prefer `hostname` over `host`, and set the `port` if needed.\n        proxy.host = proxy.hostname || proxy.host;\n        if (typeof proxy.port === 'string') {\n            proxy.port = parseInt(proxy.port, 10);\n        }\n        if (!proxy.port && proxy.host) {\n            proxy.port = this.secureProxy ? 443 : 80;\n        }\n        if (proxy.host && proxy.path) {\n            // If both a `host` and `path` are specified then it's most likely\n            // the result of a `url.parse()` call... we need to remove the\n            // `path` portion so that `net.connect()` doesn't attempt to open\n            // that as a Unix socket file.\n            delete proxy.path;\n            delete proxy.pathname;\n        }\n        this.proxy = proxy;\n    }\n    /**\n     * Called when the node-core HTTP client library is creating a\n     * new HTTP request.\n     *\n     * @api protected\n     */\n    callback(req, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { proxy, secureProxy } = this;\n            const parsed = url_1.default.parse(req.path);\n            if (!parsed.protocol) {\n                parsed.protocol = 'http:';\n            }\n            if (!parsed.hostname) {\n                parsed.hostname = opts.hostname || opts.host || null;\n            }\n            if (parsed.port == null && typeof opts.port) {\n                parsed.port = String(opts.port);\n            }\n            if (parsed.port === '80') {\n                // if port is 80, then we can remove the port so that the\n                // \":80\" portion is not on the produced URL\n                delete parsed.port;\n            }\n            // Change the `http.ClientRequest` instance's \"path\" field\n            // to the absolute path of the URL that will be requested.\n            req.path = url_1.default.format(parsed);\n            // Inject the `Proxy-Authorization` header if necessary.\n            if (proxy.auth) {\n                req.setHeader('Proxy-Authorization', `Basic ${Buffer.from(proxy.auth).toString('base64')}`);\n            }\n            // Create a socket connection to the proxy server.\n            let socket;\n            if (secureProxy) {\n                debug('Creating `tls.Socket`: %o', proxy);\n                socket = tls_1.default.connect(proxy);\n            }\n            else {\n                debug('Creating `net.Socket`: %o', proxy);\n                socket = net_1.default.connect(proxy);\n            }\n            // At this point, the http ClientRequest's internal `_header` field\n            // might have already been set. If this is the case then we'll need\n            // to re-generate the string since we just changed the `req.path`.\n            if (req._header) {\n                let first;\n                let endOfHeaders;\n                debug('Regenerating stored HTTP header string for request');\n                req._header = null;\n                req._implicitHeader();\n                if (req.output && req.output.length > 0) {\n                    // Node < 12\n                    debug('Patching connection write() output buffer with updated header');\n                    first = req.output[0];\n                    endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n                    req.output[0] = req._header + first.substring(endOfHeaders);\n                    debug('Output buffer: %o', req.output);\n                }\n                else if (req.outputData && req.outputData.length > 0) {\n                    // Node >= 12\n                    debug('Patching connection write() output buffer with updated header');\n                    first = req.outputData[0].data;\n                    endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n                    req.outputData[0].data =\n                        req._header + first.substring(endOfHeaders);\n                    debug('Output buffer: %o', req.outputData[0].data);\n                }\n            }\n            // Wait for the socket's `connect` event, so that this `callback()`\n            // function throws instead of the `http` request machinery. This is\n            // important for i.e. `PacProxyAgent` which determines a failed proxy\n            // connection via the `callback()` function throwing.\n            yield once_1.default(socket, 'connect');\n            return socket;\n        });\n    }\n}\nexports.default = HttpProxyAgent;\n//# sourceMappingURL=agent.js.map"]},"metadata":{},"sourceType":"script"}