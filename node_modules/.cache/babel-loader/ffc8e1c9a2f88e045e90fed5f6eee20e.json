{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FallbackErrorDecoder = void 0;\n\nconst protobuf = require(\"protobufjs\");\n\nconst status_1 = require(\"./status\");\n\nclass FallbackErrorDecoder {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const errorProtoJson = require('../../protos/status.json');\n\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n  }\n\n  decodeProtobufAny(anyValue) {\n    const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n\n    if (!match) {\n      throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n    }\n\n    const typeName = match[1];\n    const type = this.root.lookupType(typeName);\n\n    if (!type) {\n      throw new Error(`Cannot lookup type ${typeName}`);\n    }\n\n    return type.decode(anyValue.value);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n\n  decodeRpcStatus(buffer) {\n    const uint8array = new Uint8Array(buffer);\n    const status = this.statusType.decode(uint8array); // google.rpc.Status contains an array of google.protobuf.Any\n    // which need a special treatment\n\n    const result = {\n      code: status.code,\n      message: status.message,\n      details: status.details.map(detail => this.decodeProtobufAny(detail))\n    };\n    return result;\n  } // Construct an Error from a StatusObject.\n  // Adapted from https://github.com/grpc/grpc-node/blob/master/packages/grpc-js/src/call.ts#L79\n\n\n  callErrorFromStatus(status) {\n    status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n    return Object.assign(new Error(status.message), status);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n  // and puts it into the object similar to gRPC ServiceError object.\n\n\n  decodeErrorFromBuffer(buffer) {\n    return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n  }\n\n}\n\nexports.FallbackErrorDecoder = FallbackErrorDecoder;","map":{"version":3,"sources":["../../src/fallbackError.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAEH,MAAA,QAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAqBA,MAAa,oBAAb,CAAiC;AAK/B,EAAA,WAAA,GAAA;AACE;AACA,UAAM,cAAc,GAAG,OAAO,CAAC,0BAAD,CAA9B;;AACA,SAAK,IAAL,GAAY,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAuB,cAAvB,CAAZ;AACA,SAAK,OAAL,GAAe,KAAK,IAAL,CAAU,UAAV,CAAqB,qBAArB,CAAf;AACA,SAAK,UAAL,GAAkB,KAAK,IAAL,CAAU,UAAV,CAAqB,mBAArB,CAAlB;AACD;;AAED,EAAA,iBAAiB,CAAC,QAAD,EAAsB;AACrC,UAAM,KAAK,GAAG,QAAQ,CAAC,QAAT,CAAkB,KAAlB,CAAwB,4BAAxB,CAAd;;AACA,QAAI,CAAC,KAAL,EAAY;AACV,YAAM,IAAI,KAAJ,CACJ,gDAAgD,QAAQ,CAAC,QAAQ,EAD7D,CAAN;AAGD;;AACD,UAAM,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAtB;AACA,UAAM,IAAI,GAAG,KAAK,IAAL,CAAU,UAAV,CAAqB,QAArB,CAAb;;AACA,QAAI,CAAC,IAAL,EAAW;AACT,YAAM,IAAI,KAAJ,CAAU,sBAAsB,QAAQ,EAAxC,CAAN;AACD;;AACD,WAAO,IAAI,CAAC,MAAL,CAAY,QAAQ,CAAC,KAArB,CAAP;AACD,GA1B8B,CA4B/B;;;AACA,EAAA,eAAe,CAAC,MAAD,EAA6B;AAC1C,UAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAnB;AACA,UAAM,MAAM,GAAI,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAvB,CAAhB,CAF0C,CAI1C;AACA;;AACA,UAAM,MAAM,GAAG;AACb,MAAA,IAAI,EAAE,MAAM,CAAC,IADA;AAEb,MAAA,OAAO,EAAE,MAAM,CAAC,OAFH;AAGb,MAAA,OAAO,EAAE,MAAM,CAAC,OAAP,CAAe,GAAf,CAAmB,MAAM,IAAI,KAAK,iBAAL,CAAuB,MAAvB,CAA7B;AAHI,KAAf;AAKA,WAAO,MAAP;AACD,GAzC8B,CA2C/B;AACA;;;AACA,EAAA,mBAAmB,CAAC,MAAD,EAA6B;AAC9C,IAAA,MAAM,CAAC,OAAP,GAAiB,GAAG,MAAM,CAAC,IAAI,IAAI,QAAA,CAAA,MAAA,CAAO,MAAM,CAAC,IAAd,CAAmB,KAAK,MAAM,CAAC,OAAO,EAAzE;AACA,WAAO,MAAM,CAAC,MAAP,CAAc,IAAI,KAAJ,CAAU,MAAM,CAAC,OAAjB,CAAd,EAAyC,MAAzC,CAAP;AACD,GAhD8B,CAkD/B;AACA;;;AACA,EAAA,qBAAqB,CAAC,MAAD,EAA6B;AAChD,WAAO,KAAK,mBAAL,CAAyB,KAAK,eAAL,CAAqB,MAArB,CAAzB,CAAP;AACD;;AAtD8B;;AAAjC,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FallbackErrorDecoder = void 0;\nconst protobuf = require(\"protobufjs\");\nconst status_1 = require(\"./status\");\nclass FallbackErrorDecoder {\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const errorProtoJson = require('../../protos/status.json');\n        this.root = protobuf.Root.fromJSON(errorProtoJson);\n        this.anyType = this.root.lookupType('google.protobuf.Any');\n        this.statusType = this.root.lookupType('google.rpc.Status');\n    }\n    decodeProtobufAny(anyValue) {\n        const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n        if (!match) {\n            throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n        }\n        const typeName = match[1];\n        const type = this.root.lookupType(typeName);\n        if (!type) {\n            throw new Error(`Cannot lookup type ${typeName}`);\n        }\n        return type.decode(anyValue.value);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n    decodeRpcStatus(buffer) {\n        const uint8array = new Uint8Array(buffer);\n        const status = this.statusType.decode(uint8array);\n        // google.rpc.Status contains an array of google.protobuf.Any\n        // which need a special treatment\n        const result = {\n            code: status.code,\n            message: status.message,\n            details: status.details.map(detail => this.decodeProtobufAny(detail)),\n        };\n        return result;\n    }\n    // Construct an Error from a StatusObject.\n    // Adapted from https://github.com/grpc/grpc-node/blob/master/packages/grpc-js/src/call.ts#L79\n    callErrorFromStatus(status) {\n        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n        return Object.assign(new Error(status.message), status);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n    // and puts it into the object similar to gRPC ServiceError object.\n    decodeErrorFromBuffer(buffer) {\n        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n    }\n}\nexports.FallbackErrorDecoder = FallbackErrorDecoder;\n//# sourceMappingURL=fallbackError.js.map"]},"metadata":{},"sourceType":"script"}