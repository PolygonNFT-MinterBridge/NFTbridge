{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file ENS.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\"use strict\";\n\nvar config = require('./config');\n\nvar formatters = require('web3-core-helpers').formatters;\n\nvar utils = require('web3-utils');\n\nvar Registry = require('./contracts/Registry');\n\nvar ResolverMethodHandler = require('./lib/ResolverMethodHandler');\n\nvar contenthash = require('./lib/contentHash');\n/**\n * Constructs a new instance of ENS\n *\n * @param {Eth} eth\n *\n * @constructor\n */\n\n\nfunction ENS(eth) {\n  this.eth = eth;\n  var registryAddress = null;\n  this._detectedAddress = null;\n  this._lastSyncCheck = null;\n  Object.defineProperty(this, 'registry', {\n    get: function () {\n      return new Registry(this);\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'resolverMethodHandler', {\n    get: function () {\n      return new ResolverMethodHandler(this.registry);\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'registryAddress', {\n    get: function () {\n      return registryAddress;\n    },\n    set: function (value) {\n      if (value === null) {\n        registryAddress = value;\n        return;\n      }\n\n      registryAddress = formatters.inputAddressFormatter(value);\n    },\n    enumerable: true\n  });\n}\n/**\n * Returns true if the given interfaceId is supported and otherwise false.\n *\n * @method supportsInterface\n *\n * @param {string} name\n * @param {string} interfaceId\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\n\n\nENS.prototype.supportsInterface = function (name, interfaceId, callback) {\n  return this.getResolver(name).then(function (resolver) {\n    if (!utils.isHexStrict(interfaceId)) {\n      interfaceId = utils.sha3(interfaceId).slice(0, 10);\n    }\n\n    return resolver.methods.supportsInterface(interfaceId).call(callback);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    throw error;\n  });\n};\n/**\n * Returns the Resolver by the given address\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\n\n\nENS.prototype.resolver = function (name, callback) {\n  return this.registry.resolver(name, callback);\n};\n/**\n * Returns the Resolver by the given address\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\n\n\nENS.prototype.getResolver = function (name, callback) {\n  return this.registry.getResolver(name, callback);\n};\n/**\n * Does set the resolver of the given name\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setResolver = function (name, address, txConfig, callback) {\n  return this.registry.setResolver(name, address, txConfig, callback);\n};\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n  return this.registry.setRecord(name, owner, resolver, ttl, txConfig, callback);\n};\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n  return this.registry.setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, callback);\n};\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n  return this.registry.setApprovalForAll(operator, approved, txConfig, callback);\n};\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\n\n\nENS.prototype.isApprovedForAll = function (owner, operator, callback) {\n  return this.registry.isApprovedForAll(owner, operator, callback);\n};\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\n\n\nENS.prototype.recordExists = function (name, callback) {\n  return this.registry.recordExists(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n  return this.registry.setSubnodeOwner(name, label, address, txConfig, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.getTTL = function (name, callback) {\n  return this.registry.getTTL(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setTTL = function (name, ttl, txConfig, callback) {\n  return this.registry.setTTL(name, ttl, txConfig, callback);\n};\n/**\n * Returns the owner by the given name and current configured or detected Registry\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.getOwner = function (name, callback) {\n  return this.registry.getOwner(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setOwner = function (name, address, txConfig, callback) {\n  return this.registry.setOwner(name, address, txConfig, callback);\n};\n/**\n * Returns the address record associated with a name.\n *\n * @method getAddress\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.getAddress = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'addr', []).call(callback);\n};\n/**\n * Sets a new address\n *\n * @method setAddress\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setAddress = function (name, address, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(txConfig, callback);\n};\n/**\n * Returns the public key\n *\n * @method getPubkey\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.getPubkey = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'pubkey', [], null, callback).call(callback);\n};\n/**\n * Set the new public key\n *\n * @method setPubkey\n *\n * @param {string} name\n * @param {string} x\n * @param {string} y\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setPubkey = function (name, x, y, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(txConfig, callback);\n};\n/**\n * Returns the content\n *\n * @method getContent\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.getContent = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'content', []).call(callback);\n};\n/**\n * Set the content\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setContent = function (name, hash, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(txConfig, callback);\n};\n/**\n * Returns the contenthash\n *\n * @method getContenthash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<ContentHash>}\n */\n\n\nENS.prototype.getContenthash = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'contenthash', [], contenthash.decode).call(callback);\n};\n/**\n * Set the contenthash\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setContenthash = function (name, hash, txConfig, callback) {\n  var encoded;\n\n  try {\n    encoded = contenthash.encode(hash);\n  } catch (err) {\n    var error = new Error('Could not encode ' + hash + '. See docs for supported hash protocols.');\n\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    throw error;\n  }\n\n  return this.resolverMethodHandler.method(name, 'setContenthash', [encoded]).send(txConfig, callback);\n};\n/**\n * Get the multihash\n *\n * @method getMultihash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.getMultihash = function (name, callback) {\n  return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);\n};\n/**\n * Set the multihash\n *\n * @method setMultihash\n *\n * @param {string} name\n * @param {string} hash\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\n\n\nENS.prototype.setMultihash = function (name, hash, txConfig, callback) {\n  return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(txConfig, callback);\n};\n/**\n * Checks if the current used network is synced and looks for ENS support there.\n * Throws an error if not.\n *\n * @returns {Promise<string>}\n */\n\n\nENS.prototype.checkNetwork = async function () {\n  var now = new Date() / 1000;\n\n  if (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {\n    var block = await this.eth.getBlock('latest');\n    var headAge = now - block.timestamp;\n\n    if (headAge > 3600) {\n      throw new Error(\"Network not synced; last block was \" + headAge + \" seconds ago\");\n    }\n\n    this._lastSyncCheck = now;\n  }\n\n  if (this.registryAddress) {\n    return this.registryAddress;\n  }\n\n  if (!this._detectedAddress) {\n    var networkType = await this.eth.net.getNetworkType();\n    var addr = config.addresses[networkType];\n\n    if (typeof addr === 'undefined') {\n      throw new Error(\"ENS is not supported on network \" + networkType);\n    }\n\n    this._detectedAddress = addr;\n    return this._detectedAddress;\n  }\n\n  return this._detectedAddress;\n};\n\nmodule.exports = ENS;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/web3-eth-ens/lib/ENS.js"],"names":["config","require","formatters","utils","Registry","ResolverMethodHandler","contenthash","ENS","eth","registryAddress","_detectedAddress","_lastSyncCheck","Object","defineProperty","get","enumerable","registry","set","value","inputAddressFormatter","prototype","supportsInterface","name","interfaceId","callback","getResolver","then","resolver","isHexStrict","sha3","slice","methods","call","catch","error","setResolver","address","txConfig","setRecord","owner","ttl","setSubnodeRecord","label","setApprovalForAll","operator","approved","isApprovedForAll","recordExists","setSubnodeOwner","getTTL","setTTL","getOwner","setOwner","getAddress","resolverMethodHandler","method","setAddress","send","getPubkey","setPubkey","x","y","getContent","setContent","hash","getContenthash","decode","setContenthash","encoded","encode","err","Error","getMultihash","setMultihash","checkNetwork","now","Date","block","getBlock","headAge","timestamp","networkType","net","getNetworkType","addr","addresses","module","exports"],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file ENS.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\"use strict\";\nvar config = require('./config');\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar Registry = require('./contracts/Registry');\nvar ResolverMethodHandler = require('./lib/ResolverMethodHandler');\nvar contenthash = require('./lib/contentHash');\n/**\n * Constructs a new instance of ENS\n *\n * @param {Eth} eth\n *\n * @constructor\n */\nfunction ENS(eth) {\n    this.eth = eth;\n    var registryAddress = null;\n    this._detectedAddress = null;\n    this._lastSyncCheck = null;\n    Object.defineProperty(this, 'registry', {\n        get: function () {\n            return new Registry(this);\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'resolverMethodHandler', {\n        get: function () {\n            return new ResolverMethodHandler(this.registry);\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'registryAddress', {\n        get: function () {\n            return registryAddress;\n        },\n        set: function (value) {\n            if (value === null) {\n                registryAddress = value;\n                return;\n            }\n            registryAddress = formatters.inputAddressFormatter(value);\n        },\n        enumerable: true\n    });\n}\n/**\n * Returns true if the given interfaceId is supported and otherwise false.\n *\n * @method supportsInterface\n *\n * @param {string} name\n * @param {string} interfaceId\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.supportsInterface = function (name, interfaceId, callback) {\n    return this.getResolver(name).then(function (resolver) {\n        if (!utils.isHexStrict(interfaceId)) {\n            interfaceId = utils.sha3(interfaceId).slice(0, 10);\n        }\n        return resolver.methods.supportsInterface(interfaceId).call(callback);\n    }).catch(function (error) {\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        throw error;\n    });\n};\n/**\n * Returns the Resolver by the given address\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nENS.prototype.resolver = function (name, callback) {\n    return this.registry.resolver(name, callback);\n};\n/**\n * Returns the Resolver by the given address\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nENS.prototype.getResolver = function (name, callback) {\n    return this.registry.getResolver(name, callback);\n};\n/**\n * Does set the resolver of the given name\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setResolver = function (name, address, txConfig, callback) {\n    return this.registry.setResolver(name, address, txConfig, callback);\n};\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n    return this.registry.setRecord(name, owner, resolver, ttl, txConfig, callback);\n};\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n    return this.registry.setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, callback);\n};\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n    return this.registry.setApprovalForAll(operator, approved, txConfig, callback);\n};\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.isApprovedForAll = function (owner, operator, callback) {\n    return this.registry.isApprovedForAll(owner, operator, callback);\n};\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nENS.prototype.recordExists = function (name, callback) {\n    return this.registry.recordExists(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n    return this.registry.setSubnodeOwner(name, label, address, txConfig, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getTTL = function (name, callback) {\n    return this.registry.getTTL(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setTTL = function (name, ttl, txConfig, callback) {\n    return this.registry.setTTL(name, ttl, txConfig, callback);\n};\n/**\n * Returns the owner by the given name and current configured or detected Registry\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getOwner = function (name, callback) {\n    return this.registry.getOwner(name, callback);\n};\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setOwner = function (name, address, txConfig, callback) {\n    return this.registry.setOwner(name, address, txConfig, callback);\n};\n/**\n * Returns the address record associated with a name.\n *\n * @method getAddress\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getAddress = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'addr', []).call(callback);\n};\n/**\n * Sets a new address\n *\n * @method setAddress\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setAddress = function (name, address, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(txConfig, callback);\n};\n/**\n * Returns the public key\n *\n * @method getPubkey\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getPubkey = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'pubkey', [], null, callback).call(callback);\n};\n/**\n * Set the new public key\n *\n * @method setPubkey\n *\n * @param {string} name\n * @param {string} x\n * @param {string} y\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setPubkey = function (name, x, y, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(txConfig, callback);\n};\n/**\n * Returns the content\n *\n * @method getContent\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getContent = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'content', []).call(callback);\n};\n/**\n * Set the content\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setContent = function (name, hash, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(txConfig, callback);\n};\n/**\n * Returns the contenthash\n *\n * @method getContenthash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<ContentHash>}\n */\nENS.prototype.getContenthash = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'contenthash', [], contenthash.decode).call(callback);\n};\n/**\n * Set the contenthash\n *\n * @method setContent\n *\n * @param {string} name\n * @param {string} hash\n * @param {function} callback\n * @param {TransactionConfig} txConfig\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setContenthash = function (name, hash, txConfig, callback) {\n    var encoded;\n    try {\n        encoded = contenthash.encode(hash);\n    }\n    catch (err) {\n        var error = new Error('Could not encode ' + hash + '. See docs for supported hash protocols.');\n        if (typeof callback === 'function') {\n            callback(error, null);\n            return;\n        }\n        throw error;\n    }\n    return this.resolverMethodHandler.method(name, 'setContenthash', [encoded]).send(txConfig, callback);\n};\n/**\n * Get the multihash\n *\n * @method getMultihash\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.getMultihash = function (name, callback) {\n    return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);\n};\n/**\n * Set the multihash\n *\n * @method setMultihash\n *\n * @param {string} name\n * @param {string} hash\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nENS.prototype.setMultihash = function (name, hash, txConfig, callback) {\n    return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(txConfig, callback);\n};\n/**\n * Checks if the current used network is synced and looks for ENS support there.\n * Throws an error if not.\n *\n * @returns {Promise<string>}\n */\nENS.prototype.checkNetwork = async function () {\n    var now = new Date() / 1000;\n    if (!this._lastSyncCheck || (now - this._lastSyncCheck) > 3600) {\n        var block = await this.eth.getBlock('latest');\n        var headAge = now - block.timestamp;\n        if (headAge > 3600) {\n            throw new Error(\"Network not synced; last block was \" + headAge + \" seconds ago\");\n        }\n        this._lastSyncCheck = now;\n    }\n    if (this.registryAddress) {\n        return this.registryAddress;\n    }\n    if (!this._detectedAddress) {\n        var networkType = await this.eth.net.getNetworkType();\n        var addr = config.addresses[networkType];\n        if (typeof addr === 'undefined') {\n            throw new Error(\"ENS is not supported on network \" + networkType);\n        }\n        this._detectedAddress = addr;\n        return this._detectedAddress;\n    }\n    return this._detectedAddress;\n};\nmodule.exports = ENS;\n"]},"metadata":{},"sourceType":"script"}