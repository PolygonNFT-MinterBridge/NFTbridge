{"ast":null,"code":"/*!\n * compressible\n * Copyright(c) 2013 Jonathan Ong\n * Copyright(c) 2014 Jeremiah Senkpiel\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db');\n/**\n * Module variables.\n * @private\n */\n\n\nvar COMPRESSIBLE_TYPE_REGEXP = /^text\\/|\\+(?:json|text|xml)$/i;\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = compressible;\n/**\n * Checks if a type is compressible.\n *\n * @param {string} type\n * @return {Boolean} compressible\n * @public\n */\n\nfunction compressible(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  } // strip parameters\n\n\n  var match = EXTRACT_TYPE_REGEXP.exec(type);\n  var mime = match && match[1].toLowerCase();\n  var data = db[mime]; // return database information\n\n  if (data && data.compressible !== undefined) {\n    return data.compressible;\n  } // fallback to regexp or unknown\n\n\n  return COMPRESSIBLE_TYPE_REGEXP.test(mime) || undefined;\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/compressible/index.js"],"names":["db","require","COMPRESSIBLE_TYPE_REGEXP","EXTRACT_TYPE_REGEXP","module","exports","compressible","type","match","exec","mime","toLowerCase","data","undefined","test"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,SAAD,CAAhB;AAEA;AACA;AACA;AACA;;;AAEA,IAAIC,wBAAwB,GAAG,+BAA/B;AACA,IAAIC,mBAAmB,GAAG,yBAA1B;AAEA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAI,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACrC,WAAO,KAAP;AACD,GAH0B,CAK3B;;;AACA,MAAIC,KAAK,GAAGL,mBAAmB,CAACM,IAApB,CAAyBF,IAAzB,CAAZ;AACA,MAAIG,IAAI,GAAGF,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,CAASG,WAAT,EAApB;AACA,MAAIC,IAAI,GAAGZ,EAAE,CAACU,IAAD,CAAb,CAR2B,CAU3B;;AACA,MAAIE,IAAI,IAAIA,IAAI,CAACN,YAAL,KAAsBO,SAAlC,EAA6C;AAC3C,WAAOD,IAAI,CAACN,YAAZ;AACD,GAb0B,CAe3B;;;AACA,SAAOJ,wBAAwB,CAACY,IAAzB,CAA8BJ,IAA9B,KAAuCG,SAA9C;AACD","sourcesContent":["/*!\n * compressible\n * Copyright(c) 2013 Jonathan Ong\n * Copyright(c) 2014 Jeremiah Senkpiel\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\n\n/**\n * Module variables.\n * @private\n */\n\nvar COMPRESSIBLE_TYPE_REGEXP = /^text\\/|\\+(?:json|text|xml)$/i\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = compressible\n\n/**\n * Checks if a type is compressible.\n *\n * @param {string} type\n * @return {Boolean} compressible\n * @public\n */\n\nfunction compressible (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // strip parameters\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && match[1].toLowerCase()\n  var data = db[mime]\n\n  // return database information\n  if (data && data.compressible !== undefined) {\n    return data.compressible\n  }\n\n  // fallback to regexp or unknown\n  return COMPRESSIBLE_TYPE_REGEXP.test(mime) || undefined\n}\n"]},"metadata":{},"sourceType":"script"}