{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDescriptor = void 0;\n\nconst streamingApiCaller_1 = require(\"./streamingApiCaller\");\n/**\n * A descriptor for streaming calls.\n */\n\n\nclass StreamDescriptor {\n  constructor(streamType) {\n    this.type = streamType;\n    this.streaming = true;\n  }\n\n  getApiCaller(settings) {\n    // Right now retrying does not work with gRPC-streaming, because retryable\n    // assumes an API call returns an event emitter while gRPC-streaming methods\n    // return Stream.\n    // TODO: support retrying.\n    settings.retry = null;\n    return new streamingApiCaller_1.StreamingApiCaller(this);\n  }\n\n}\n\nexports.StreamDescriptor = StreamDescriptor;","map":{"version":3,"sources":["../../../src/streamingCalls/streamDescriptor.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAOH,MAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,gBAAb,CAA6B;AAI3B,EAAA,WAAA,CAAY,UAAZ,EAAkC;AAChC,SAAK,IAAL,GAAY,UAAZ;AACA,SAAK,SAAL,GAAiB,IAAjB;AACD;;AAED,EAAA,YAAY,CAAC,QAAD,EAAuB;AACjC;AACA;AACA;AACA;AACA,IAAA,QAAQ,CAAC,KAAT,GAAiB,IAAjB;AACA,WAAO,IAAI,oBAAA,CAAA,kBAAJ,CAAuB,IAAvB,CAAP;AACD;;AAhB0B;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamDescriptor = void 0;\nconst streamingApiCaller_1 = require(\"./streamingApiCaller\");\n/**\n * A descriptor for streaming calls.\n */\nclass StreamDescriptor {\n    constructor(streamType) {\n        this.type = streamType;\n        this.streaming = true;\n    }\n    getApiCaller(settings) {\n        // Right now retrying does not work with gRPC-streaming, because retryable\n        // assumes an API call returns an event emitter while gRPC-streaming methods\n        // return Stream.\n        // TODO: support retrying.\n        settings.retry = null;\n        return new streamingApiCaller_1.StreamingApiCaller(this);\n    }\n}\nexports.StreamDescriptor = StreamDescriptor;\n//# sourceMappingURL=streamDescriptor.js.map"]},"metadata":{},"sourceType":"script"}