{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst assert = require(\"assert\");\n\nconst logger_1 = require(\"./logger\");\n/**\n * A helper that uses the Token Bucket algorithm to rate limit the number of\n * operations that can be made in a second.\n *\n * Before a given request containing a number of operations can proceed,\n * RateLimiter determines doing so stays under the provided rate limits. It can\n * also determine how much time is required before a request can be made.\n *\n * RateLimiter can also implement a gradually increasing rate limit. This is\n * used to enforce the 500/50/5 rule\n * (https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic).\n *\n * @private\n */\n\n\nclass RateLimiter {\n  /**\n   * @param initialCapacity Initial maximum number of operations per second.\n   * @param multiplier Rate by which to increase the capacity.\n   * @param multiplierMillis How often the capacity should increase in\n   * milliseconds.\n   * @param maximumCapacity Maximum number of allowed operations per second.\n   * The number of tokens added per second will never exceed this number.\n   * @param startTimeMillis The starting time in epoch milliseconds that the\n   * rate limit is based on. Used for testing the limiter.\n   */\n  constructor(initialCapacity, multiplier, multiplierMillis, maximumCapacity, startTimeMillis = Date.now()) {\n    this.initialCapacity = initialCapacity;\n    this.multiplier = multiplier;\n    this.multiplierMillis = multiplierMillis;\n    this.maximumCapacity = maximumCapacity;\n    this.startTimeMillis = startTimeMillis;\n    this.availableTokens = initialCapacity;\n    this.lastRefillTimeMillis = startTimeMillis;\n    this.previousCapacity = initialCapacity;\n  }\n  /**\n   * Tries to make the number of operations. Returns true if the request\n   * succeeded and false otherwise.\n   *\n   * @param requestTimeMillis The time used to calculate the number of available\n   * tokens. Used for testing the limiter.\n   * @private\n   */\n\n\n  tryMakeRequest(numOperations, requestTimeMillis = Date.now()) {\n    this.refillTokens(requestTimeMillis);\n\n    if (numOperations <= this.availableTokens) {\n      this.availableTokens -= numOperations;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Returns the number of ms needed to make a request with the provided number\n   * of operations. Returns 0 if the request can be made with the existing\n   * capacity. Returns -1 if the request is not possible with the current\n   * capacity.\n   *\n   * @param requestTimeMillis The time used to calculate the number of available\n   * tokens. Used for testing the limiter.\n   * @private\n   */\n\n\n  getNextRequestDelayMs(numOperations, requestTimeMillis = Date.now()) {\n    this.refillTokens(requestTimeMillis);\n\n    if (numOperations < this.availableTokens) {\n      return 0;\n    }\n\n    const capacity = this.calculateCapacity(requestTimeMillis);\n\n    if (capacity < numOperations) {\n      return -1;\n    }\n\n    const requiredTokens = numOperations - this.availableTokens;\n    return Math.ceil(requiredTokens * 1000 / capacity);\n  }\n  /**\n   * Refills the number of available tokens based on how much time has elapsed\n   * since the last time the tokens were refilled.\n   *\n   * @param requestTimeMillis The time used to calculate the number of available\n   * tokens. Used for testing the limiter.\n   * @private\n   */\n\n\n  refillTokens(requestTimeMillis) {\n    if (requestTimeMillis >= this.lastRefillTimeMillis) {\n      const elapsedTime = requestTimeMillis - this.lastRefillTimeMillis;\n      const capacity = this.calculateCapacity(requestTimeMillis);\n      const tokensToAdd = Math.floor(elapsedTime * capacity / 1000);\n\n      if (tokensToAdd > 0) {\n        this.availableTokens = Math.min(capacity, this.availableTokens + tokensToAdd);\n        this.lastRefillTimeMillis = requestTimeMillis;\n      }\n    } else {\n      throw new Error('Request time should not be before the last token refill time.');\n    }\n  }\n  /**\n   * Calculates the maximum capacity based on the provided date.\n   *\n   * @private\n   */\n  // Visible for testing.\n\n\n  calculateCapacity(requestTimeMillis) {\n    assert(requestTimeMillis >= this.startTimeMillis, 'startTime cannot be after currentTime');\n    const millisElapsed = requestTimeMillis - this.startTimeMillis;\n    const operationsPerSecond = Math.min(Math.floor(Math.pow(this.multiplier, Math.floor(millisElapsed / this.multiplierMillis)) * this.initialCapacity), this.maximumCapacity);\n\n    if (operationsPerSecond !== this.previousCapacity) {\n      logger_1.logger('RateLimiter.calculateCapacity', null, `New request capacity: ${operationsPerSecond} operations per second.`);\n    }\n\n    this.previousCapacity = operationsPerSecond;\n    return operationsPerSecond;\n  }\n\n}\n\nexports.RateLimiter = RateLimiter;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/firestore/build/src/rate-limiter.js"],"names":["Object","defineProperty","exports","value","assert","require","logger_1","RateLimiter","constructor","initialCapacity","multiplier","multiplierMillis","maximumCapacity","startTimeMillis","Date","now","availableTokens","lastRefillTimeMillis","previousCapacity","tryMakeRequest","numOperations","requestTimeMillis","refillTokens","getNextRequestDelayMs","capacity","calculateCapacity","requiredTokens","Math","ceil","elapsedTime","tokensToAdd","floor","min","Error","millisElapsed","operationsPerSecond","pow","logger"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,WAAN,CAAkB;AACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,UAAlB,EAA8BC,gBAA9B,EAAgDC,eAAhD,EAAiEC,eAAe,GAAGC,IAAI,CAACC,GAAL,EAAnF,EAA+F;AACtG,SAAKN,eAAL,GAAuBA,eAAvB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKG,eAAL,GAAuBP,eAAvB;AACA,SAAKQ,oBAAL,GAA4BJ,eAA5B;AACA,SAAKK,gBAAL,GAAwBT,eAAxB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIU,EAAAA,cAAc,CAACC,aAAD,EAAgBC,iBAAiB,GAAGP,IAAI,CAACC,GAAL,EAApC,EAAgD;AAC1D,SAAKO,YAAL,CAAkBD,iBAAlB;;AACA,QAAID,aAAa,IAAI,KAAKJ,eAA1B,EAA2C;AACvC,WAAKA,eAAL,IAAwBI,aAAxB;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,qBAAqB,CAACH,aAAD,EAAgBC,iBAAiB,GAAGP,IAAI,CAACC,GAAL,EAApC,EAAgD;AACjE,SAAKO,YAAL,CAAkBD,iBAAlB;;AACA,QAAID,aAAa,GAAG,KAAKJ,eAAzB,EAA0C;AACtC,aAAO,CAAP;AACH;;AACD,UAAMQ,QAAQ,GAAG,KAAKC,iBAAL,CAAuBJ,iBAAvB,CAAjB;;AACA,QAAIG,QAAQ,GAAGJ,aAAf,EAA8B;AAC1B,aAAO,CAAC,CAAR;AACH;;AACD,UAAMM,cAAc,GAAGN,aAAa,GAAG,KAAKJ,eAA5C;AACA,WAAOW,IAAI,CAACC,IAAL,CAAWF,cAAc,GAAG,IAAlB,GAA0BF,QAApC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,YAAY,CAACD,iBAAD,EAAoB;AAC5B,QAAIA,iBAAiB,IAAI,KAAKJ,oBAA9B,EAAoD;AAChD,YAAMY,WAAW,GAAGR,iBAAiB,GAAG,KAAKJ,oBAA7C;AACA,YAAMO,QAAQ,GAAG,KAAKC,iBAAL,CAAuBJ,iBAAvB,CAAjB;AACA,YAAMS,WAAW,GAAGH,IAAI,CAACI,KAAL,CAAYF,WAAW,GAAGL,QAAf,GAA2B,IAAtC,CAApB;;AACA,UAAIM,WAAW,GAAG,CAAlB,EAAqB;AACjB,aAAKd,eAAL,GAAuBW,IAAI,CAACK,GAAL,CAASR,QAAT,EAAmB,KAAKR,eAAL,GAAuBc,WAA1C,CAAvB;AACA,aAAKb,oBAAL,GAA4BI,iBAA5B;AACH;AACJ,KARD,MASK;AACD,YAAM,IAAIY,KAAJ,CAAU,+DAAV,CAAN;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACI;;;AACAR,EAAAA,iBAAiB,CAACJ,iBAAD,EAAoB;AACjCjB,IAAAA,MAAM,CAACiB,iBAAiB,IAAI,KAAKR,eAA3B,EAA4C,uCAA5C,CAAN;AACA,UAAMqB,aAAa,GAAGb,iBAAiB,GAAG,KAAKR,eAA/C;AACA,UAAMsB,mBAAmB,GAAGR,IAAI,CAACK,GAAL,CAASL,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACS,GAAL,CAAS,KAAK1B,UAAd,EAA0BiB,IAAI,CAACI,KAAL,CAAWG,aAAa,GAAG,KAAKvB,gBAAhC,CAA1B,IAA+E,KAAKF,eAA/F,CAAT,EAA0H,KAAKG,eAA/H,CAA5B;;AACA,QAAIuB,mBAAmB,KAAK,KAAKjB,gBAAjC,EAAmD;AAC/CZ,MAAAA,QAAQ,CAAC+B,MAAT,CAAgB,+BAAhB,EAAiD,IAAjD,EAAwD,yBAAwBF,mBAAoB,yBAApG;AACH;;AACD,SAAKjB,gBAAL,GAAwBiB,mBAAxB;AACA,WAAOA,mBAAP;AACH;;AAhGa;;AAkGlBjC,OAAO,CAACK,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*!\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst assert = require(\"assert\");\nconst logger_1 = require(\"./logger\");\n/**\n * A helper that uses the Token Bucket algorithm to rate limit the number of\n * operations that can be made in a second.\n *\n * Before a given request containing a number of operations can proceed,\n * RateLimiter determines doing so stays under the provided rate limits. It can\n * also determine how much time is required before a request can be made.\n *\n * RateLimiter can also implement a gradually increasing rate limit. This is\n * used to enforce the 500/50/5 rule\n * (https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic).\n *\n * @private\n */\nclass RateLimiter {\n    /**\n     * @param initialCapacity Initial maximum number of operations per second.\n     * @param multiplier Rate by which to increase the capacity.\n     * @param multiplierMillis How often the capacity should increase in\n     * milliseconds.\n     * @param maximumCapacity Maximum number of allowed operations per second.\n     * The number of tokens added per second will never exceed this number.\n     * @param startTimeMillis The starting time in epoch milliseconds that the\n     * rate limit is based on. Used for testing the limiter.\n     */\n    constructor(initialCapacity, multiplier, multiplierMillis, maximumCapacity, startTimeMillis = Date.now()) {\n        this.initialCapacity = initialCapacity;\n        this.multiplier = multiplier;\n        this.multiplierMillis = multiplierMillis;\n        this.maximumCapacity = maximumCapacity;\n        this.startTimeMillis = startTimeMillis;\n        this.availableTokens = initialCapacity;\n        this.lastRefillTimeMillis = startTimeMillis;\n        this.previousCapacity = initialCapacity;\n    }\n    /**\n     * Tries to make the number of operations. Returns true if the request\n     * succeeded and false otherwise.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     */\n    tryMakeRequest(numOperations, requestTimeMillis = Date.now()) {\n        this.refillTokens(requestTimeMillis);\n        if (numOperations <= this.availableTokens) {\n            this.availableTokens -= numOperations;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns the number of ms needed to make a request with the provided number\n     * of operations. Returns 0 if the request can be made with the existing\n     * capacity. Returns -1 if the request is not possible with the current\n     * capacity.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     */\n    getNextRequestDelayMs(numOperations, requestTimeMillis = Date.now()) {\n        this.refillTokens(requestTimeMillis);\n        if (numOperations < this.availableTokens) {\n            return 0;\n        }\n        const capacity = this.calculateCapacity(requestTimeMillis);\n        if (capacity < numOperations) {\n            return -1;\n        }\n        const requiredTokens = numOperations - this.availableTokens;\n        return Math.ceil((requiredTokens * 1000) / capacity);\n    }\n    /**\n     * Refills the number of available tokens based on how much time has elapsed\n     * since the last time the tokens were refilled.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     */\n    refillTokens(requestTimeMillis) {\n        if (requestTimeMillis >= this.lastRefillTimeMillis) {\n            const elapsedTime = requestTimeMillis - this.lastRefillTimeMillis;\n            const capacity = this.calculateCapacity(requestTimeMillis);\n            const tokensToAdd = Math.floor((elapsedTime * capacity) / 1000);\n            if (tokensToAdd > 0) {\n                this.availableTokens = Math.min(capacity, this.availableTokens + tokensToAdd);\n                this.lastRefillTimeMillis = requestTimeMillis;\n            }\n        }\n        else {\n            throw new Error('Request time should not be before the last token refill time.');\n        }\n    }\n    /**\n     * Calculates the maximum capacity based on the provided date.\n     *\n     * @private\n     */\n    // Visible for testing.\n    calculateCapacity(requestTimeMillis) {\n        assert(requestTimeMillis >= this.startTimeMillis, 'startTime cannot be after currentTime');\n        const millisElapsed = requestTimeMillis - this.startTimeMillis;\n        const operationsPerSecond = Math.min(Math.floor(Math.pow(this.multiplier, Math.floor(millisElapsed / this.multiplierMillis)) * this.initialCapacity), this.maximumCapacity);\n        if (operationsPerSecond !== this.previousCapacity) {\n            logger_1.logger('RateLimiter.calculateCapacity', null, `New request capacity: ${operationsPerSecond} operations per second.`);\n        }\n        this.previousCapacity = operationsPerSecond;\n        return operationsPerSecond;\n    }\n}\nexports.RateLimiter = RateLimiter;\n//# sourceMappingURL=rate-limiter.js.map"]},"metadata":{},"sourceType":"script"}