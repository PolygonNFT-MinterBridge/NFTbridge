{"ast":null,"code":"\"use strict\";\n/**\n * Common type constants.\n * @namespace\n */\n\nvar types = exports;\n\nvar util = require(\"./util\");\n\nvar s = [\"double\", // 0\n\"float\", // 1\n\"int32\", // 2\n\"uint32\", // 3\n\"sint32\", // 4\n\"fixed32\", // 5\n\"sfixed32\", // 6\n\"int64\", // 7\n\"uint64\", // 8\n\"sint64\", // 9\n\"fixed64\", // 10\n\"sfixed64\", // 11\n\"bool\", // 12\n\"string\", // 13\n\"bytes\" // 14\n];\n\nfunction bake(values, offset) {\n  var i = 0,\n      o = {};\n  offset |= 0;\n\n  while (i < values.length) o[s[i + offset]] = values[i++];\n\n  return o;\n}\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\n\n\ntypes.basic = bake([\n/* double   */\n1,\n/* float    */\n5,\n/* int32    */\n0,\n/* uint32   */\n0,\n/* sint32   */\n0,\n/* fixed32  */\n5,\n/* sfixed32 */\n5,\n/* int64    */\n0,\n/* uint64   */\n0,\n/* sint64   */\n0,\n/* fixed64  */\n1,\n/* sfixed64 */\n1,\n/* bool     */\n0,\n/* string   */\n2,\n/* bytes    */\n2]);\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\n\ntypes.defaults = bake([\n/* double   */\n0,\n/* float    */\n0,\n/* int32    */\n0,\n/* uint32   */\n0,\n/* sint32   */\n0,\n/* fixed32  */\n0,\n/* sfixed32 */\n0,\n/* int64    */\n0,\n/* uint64   */\n0,\n/* sint64   */\n0,\n/* fixed64  */\n0,\n/* sfixed64 */\n0,\n/* bool     */\nfalse,\n/* string   */\n\"\",\n/* bytes    */\nutil.emptyArray,\n/* message  */\nnull]);\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\n\ntypes.long = bake([\n/* int64    */\n0,\n/* uint64   */\n0,\n/* sint64   */\n0,\n/* fixed64  */\n1,\n/* sfixed64 */\n1], 7);\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\n\ntypes.mapKey = bake([\n/* int32    */\n0,\n/* uint32   */\n0,\n/* sint32   */\n0,\n/* fixed32  */\n5,\n/* sfixed32 */\n5,\n/* int64    */\n0,\n/* uint64   */\n0,\n/* sint64   */\n0,\n/* fixed64  */\n1,\n/* sfixed64 */\n1,\n/* bool     */\n0,\n/* string   */\n2], 2);\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\n\ntypes.packed = bake([\n/* double   */\n1,\n/* float    */\n5,\n/* int32    */\n0,\n/* uint32   */\n0,\n/* sint32   */\n0,\n/* fixed32  */\n5,\n/* sfixed32 */\n5,\n/* int64    */\n0,\n/* uint64   */\n0,\n/* sint64   */\n0,\n/* fixed64  */\n1,\n/* sfixed64 */\n1,\n/* bool     */\n0]);","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/protobufjs/src/types.js"],"names":["types","exports","util","require","s","bake","values","offset","i","o","length","basic","defaults","emptyArray","long","mapKey","packed"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\n\nvar util = require(\"./util\");\n\nvar s = [\n    \"double\",   // 0\n    \"float\",    // 1\n    \"int32\",    // 2\n    \"uint32\",   // 3\n    \"sint32\",   // 4\n    \"fixed32\",  // 5\n    \"sfixed32\", // 6\n    \"int64\",    // 7\n    \"uint64\",   // 8\n    \"sint64\",   // 9\n    \"fixed64\",  // 10\n    \"sfixed64\", // 11\n    \"bool\",     // 12\n    \"string\",   // 13\n    \"bytes\"     // 14\n];\n\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n"]},"metadata":{},"sourceType":"script"}