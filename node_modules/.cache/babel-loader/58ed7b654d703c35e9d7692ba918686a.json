{"ast":null,"code":"\"use strict\"; // Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoginTicket = void 0;\n\nclass LoginTicket {\n  /**\n   * Create a simple class to extract user ID from an ID Token\n   *\n   * @param {string} env Envelope of the jwt\n   * @param {TokenPayload} pay Payload of the jwt\n   * @constructor\n   */\n  constructor(env, pay) {\n    this.envelope = env;\n    this.payload = pay;\n  }\n\n  getEnvelope() {\n    return this.envelope;\n  }\n\n  getPayload() {\n    return this.payload;\n  }\n  /**\n   * Create a simple class to extract user ID from an ID Token\n   *\n   * @return The user ID\n   */\n\n\n  getUserId() {\n    const payload = this.getPayload();\n\n    if (payload && payload.sub) {\n      return payload.sub;\n    }\n\n    return null;\n  }\n  /**\n   * Returns attributes from the login ticket.  This can contain\n   * various information about the user session.\n   *\n   * @return The envelope and payload\n   */\n\n\n  getAttributes() {\n    return {\n      envelope: this.getEnvelope(),\n      payload: this.getPayload()\n    };\n  }\n\n}\n\nexports.LoginTicket = LoginTicket;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/common/node_modules/google-auth-library/build/src/auth/loginticket.js"],"names":["Object","defineProperty","exports","value","LoginTicket","constructor","env","pay","envelope","payload","getEnvelope","getPayload","getUserId","sub","getAttributes"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,MAAMA,WAAN,CAAkB;AACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,GAAD,EAAMC,GAAN,EAAW;AAClB,SAAKC,QAAL,GAAgBF,GAAhB;AACA,SAAKG,OAAL,GAAeF,GAAf;AACH;;AACDG,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKF,QAAZ;AACH;;AACDG,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKF,OAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,SAAS,GAAG;AACR,UAAMH,OAAO,GAAG,KAAKE,UAAL,EAAhB;;AACA,QAAIF,OAAO,IAAIA,OAAO,CAACI,GAAvB,EAA4B;AACxB,aAAOJ,OAAO,CAACI,GAAf;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,aAAa,GAAG;AACZ,WAAO;AAAEN,MAAAA,QAAQ,EAAE,KAAKE,WAAL,EAAZ;AAAgCD,MAAAA,OAAO,EAAE,KAAKE,UAAL;AAAzC,KAAP;AACH;;AAtCa;;AAwClBT,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoginTicket = void 0;\nclass LoginTicket {\n    /**\n     * Create a simple class to extract user ID from an ID Token\n     *\n     * @param {string} env Envelope of the jwt\n     * @param {TokenPayload} pay Payload of the jwt\n     * @constructor\n     */\n    constructor(env, pay) {\n        this.envelope = env;\n        this.payload = pay;\n    }\n    getEnvelope() {\n        return this.envelope;\n    }\n    getPayload() {\n        return this.payload;\n    }\n    /**\n     * Create a simple class to extract user ID from an ID Token\n     *\n     * @return The user ID\n     */\n    getUserId() {\n        const payload = this.getPayload();\n        if (payload && payload.sub) {\n            return payload.sub;\n        }\n        return null;\n    }\n    /**\n     * Returns attributes from the login ticket.  This can contain\n     * various information about the user session.\n     *\n     * @return The envelope and payload\n     */\n    getAttributes() {\n        return { envelope: this.getEnvelope(), payload: this.getPayload() };\n    }\n}\nexports.LoginTicket = LoginTicket;\n//# sourceMappingURL=loginticket.js.map"]},"metadata":{},"sourceType":"script"}