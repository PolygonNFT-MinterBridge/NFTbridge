{"ast":null,"code":"'use strict';\n\nconst {\n  PassThrough: PassThroughStream\n} = require('stream');\n\nmodule.exports = options => {\n  options = { ...options\n  };\n  const {\n    array\n  } = options;\n  let {\n    encoding\n  } = options;\n  const isBuffer = encoding === 'buffer';\n  let objectMode = false;\n\n  if (array) {\n    objectMode = !(encoding || isBuffer);\n  } else {\n    encoding = encoding || 'utf8';\n  }\n\n  if (isBuffer) {\n    encoding = null;\n  }\n\n  const stream = new PassThroughStream({\n    objectMode\n  });\n\n  if (encoding) {\n    stream.setEncoding(encoding);\n  }\n\n  let length = 0;\n  const chunks = [];\n  stream.on('data', chunk => {\n    chunks.push(chunk);\n\n    if (objectMode) {\n      length = chunks.length;\n    } else {\n      length += chunk.length;\n    }\n  });\n\n  stream.getBufferedValue = () => {\n    if (array) {\n      return chunks;\n    }\n\n    return isBuffer ? Buffer.concat(chunks, length) : chunks.join('');\n  };\n\n  stream.getBufferedLength = () => length;\n\n  return stream;\n};","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/get-stream/buffer-stream.js"],"names":["PassThrough","PassThroughStream","require","module","exports","options","array","encoding","isBuffer","objectMode","stream","setEncoding","length","chunks","on","chunk","push","getBufferedValue","Buffer","concat","join","getBufferedLength"],"mappings":"AAAA;;AACA,MAAM;AAACA,EAAAA,WAAW,EAAEC;AAAd,IAAmCC,OAAO,CAAC,QAAD,CAAhD;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,OAAO,IAAI;AAC3BA,EAAAA,OAAO,GAAG,EAAC,GAAGA;AAAJ,GAAV;AAEA,QAAM;AAACC,IAAAA;AAAD,MAAUD,OAAhB;AACA,MAAI;AAACE,IAAAA;AAAD,MAAaF,OAAjB;AACA,QAAMG,QAAQ,GAAGD,QAAQ,KAAK,QAA9B;AACA,MAAIE,UAAU,GAAG,KAAjB;;AAEA,MAAIH,KAAJ,EAAW;AACVG,IAAAA,UAAU,GAAG,EAAEF,QAAQ,IAAIC,QAAd,CAAb;AACA,GAFD,MAEO;AACND,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,MAAvB;AACA;;AAED,MAAIC,QAAJ,EAAc;AACbD,IAAAA,QAAQ,GAAG,IAAX;AACA;;AAED,QAAMG,MAAM,GAAG,IAAIT,iBAAJ,CAAsB;AAACQ,IAAAA;AAAD,GAAtB,CAAf;;AAEA,MAAIF,QAAJ,EAAc;AACbG,IAAAA,MAAM,CAACC,WAAP,CAAmBJ,QAAnB;AACA;;AAED,MAAIK,MAAM,GAAG,CAAb;AACA,QAAMC,MAAM,GAAG,EAAf;AAEAH,EAAAA,MAAM,CAACI,EAAP,CAAU,MAAV,EAAkBC,KAAK,IAAI;AAC1BF,IAAAA,MAAM,CAACG,IAAP,CAAYD,KAAZ;;AAEA,QAAIN,UAAJ,EAAgB;AACfG,MAAAA,MAAM,GAAGC,MAAM,CAACD,MAAhB;AACA,KAFD,MAEO;AACNA,MAAAA,MAAM,IAAIG,KAAK,CAACH,MAAhB;AACA;AACD,GARD;;AAUAF,EAAAA,MAAM,CAACO,gBAAP,GAA0B,MAAM;AAC/B,QAAIX,KAAJ,EAAW;AACV,aAAOO,MAAP;AACA;;AAED,WAAOL,QAAQ,GAAGU,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsBD,MAAtB,CAAH,GAAmCC,MAAM,CAACO,IAAP,CAAY,EAAZ,CAAlD;AACA,GAND;;AAQAV,EAAAA,MAAM,CAACW,iBAAP,GAA2B,MAAMT,MAAjC;;AAEA,SAAOF,MAAP;AACA,CAhDD","sourcesContent":["'use strict';\nconst {PassThrough: PassThroughStream} = require('stream');\n\nmodule.exports = options => {\n\toptions = {...options};\n\n\tconst {array} = options;\n\tlet {encoding} = options;\n\tconst isBuffer = encoding === 'buffer';\n\tlet objectMode = false;\n\n\tif (array) {\n\t\tobjectMode = !(encoding || isBuffer);\n\t} else {\n\t\tencoding = encoding || 'utf8';\n\t}\n\n\tif (isBuffer) {\n\t\tencoding = null;\n\t}\n\n\tconst stream = new PassThroughStream({objectMode});\n\n\tif (encoding) {\n\t\tstream.setEncoding(encoding);\n\t}\n\n\tlet length = 0;\n\tconst chunks = [];\n\n\tstream.on('data', chunk => {\n\t\tchunks.push(chunk);\n\n\t\tif (objectMode) {\n\t\t\tlength = chunks.length;\n\t\t} else {\n\t\t\tlength += chunk.length;\n\t\t}\n\t});\n\n\tstream.getBufferedValue = () => {\n\t\tif (array) {\n\t\t\treturn chunks;\n\t\t}\n\n\t\treturn isBuffer ? Buffer.concat(chunks, length) : chunks.join('');\n\t};\n\n\tstream.getBufferedLength = () => length;\n\n\treturn stream;\n};\n"]},"metadata":{},"sourceType":"script"}