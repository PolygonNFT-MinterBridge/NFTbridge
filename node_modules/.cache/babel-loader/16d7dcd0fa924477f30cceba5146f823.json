{"ast":null,"code":"/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IosApp = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\n\nvar index_1 = require(\"./index\");\n\nvar AppPlatform = index_1.projectManagement.AppPlatform;\n\nvar IosApp =\n/** @class */\nfunction () {\n  function IosApp(appId, requestHandler) {\n    this.appId = appId;\n    this.requestHandler = requestHandler;\n\n    if (!validator.isNonEmptyString(appId)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n    }\n\n    this.resourceName = \"projects/-/iosApps/\" + appId;\n  }\n  /**\n   * Retrieves metadata about this iOS app.\n   *\n   * @return {!Promise<admin.projectManagement.IosAppMetadata>} A promise that\n   *     resolves to the retrieved metadata about this iOS app.\n   */\n\n\n  IosApp.prototype.getMetadata = function () {\n    return this.requestHandler.getResource(this.resourceName).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n      var requiredFieldsList = ['name', 'appId', 'projectId', 'bundleId'];\n      requiredFieldsList.forEach(function (requiredField) {\n        project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData[requiredField]), responseData, \"getMetadata()'s responseData.\" + requiredField + \" must be a non-empty string.\");\n      });\n      var metadata = {\n        platform: AppPlatform.IOS,\n        resourceName: responseData.name,\n        appId: responseData.appId,\n        displayName: responseData.displayName || null,\n        projectId: responseData.projectId,\n        bundleId: responseData.bundleId\n      };\n      return metadata;\n    });\n  };\n  /**\n   * Sets the optional user-assigned display name of the app.\n   *\n   * @param newDisplayName The new display name to set.\n   *\n   * @return A promise that resolves when the display name has\n   *     been set.\n   */\n\n\n  IosApp.prototype.setDisplayName = function (newDisplayName) {\n    return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n  };\n  /**\n   * Gets the configuration artifact associated with this app.\n   *\n   * @return A promise that resolves to the iOS app's Firebase\n   *     config file, in UTF-8 string format. This string is typically intended to\n   *     be written to a plist file that gets shipped with your iOS app.\n   */\n\n\n  IosApp.prototype.getConfig = function () {\n    return this.requestHandler.getConfig(this.resourceName).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n      var base64ConfigFileContents = responseData.configFileContents;\n      project_management_api_request_internal_1.assertServerResponse(validator.isBase64String(base64ConfigFileContents), responseData, 'getConfig()\\'s responseData.configFileContents must be a base64 string.');\n      return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n    });\n  };\n\n  return IosApp;\n}();\n\nexports.IosApp = IosApp;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/firebase-admin/lib/project-management/ios-app.js"],"names":["Object","defineProperty","exports","value","IosApp","error_1","require","validator","project_management_api_request_internal_1","index_1","AppPlatform","projectManagement","appId","requestHandler","isNonEmptyString","FirebaseProjectManagementError","resourceName","prototype","getMetadata","getResource","then","responseData","assertServerResponse","isNonNullObject","requiredFieldsList","forEach","requiredField","metadata","platform","IOS","name","displayName","projectId","bundleId","setDisplayName","newDisplayName","getConfig","base64ConfigFileContents","configFileContents","isBase64String","Buffer","from","toString"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IosApp = void 0;\nvar error_1 = require(\"../utils/error\");\nvar validator = require(\"../utils/validator\");\nvar project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\nvar index_1 = require(\"./index\");\nvar AppPlatform = index_1.projectManagement.AppPlatform;\nvar IosApp = /** @class */ (function () {\n    function IosApp(appId, requestHandler) {\n        this.appId = appId;\n        this.requestHandler = requestHandler;\n        if (!validator.isNonEmptyString(appId)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n        }\n        this.resourceName = \"projects/-/iosApps/\" + appId;\n    }\n    /**\n     * Retrieves metadata about this iOS app.\n     *\n     * @return {!Promise<admin.projectManagement.IosAppMetadata>} A promise that\n     *     resolves to the retrieved metadata about this iOS app.\n     */\n    IosApp.prototype.getMetadata = function () {\n        return this.requestHandler.getResource(this.resourceName)\n            .then(function (responseData) {\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n            var requiredFieldsList = ['name', 'appId', 'projectId', 'bundleId'];\n            requiredFieldsList.forEach(function (requiredField) {\n                project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData[requiredField]), responseData, \"getMetadata()'s responseData.\" + requiredField + \" must be a non-empty string.\");\n            });\n            var metadata = {\n                platform: AppPlatform.IOS,\n                resourceName: responseData.name,\n                appId: responseData.appId,\n                displayName: responseData.displayName || null,\n                projectId: responseData.projectId,\n                bundleId: responseData.bundleId,\n            };\n            return metadata;\n        });\n    };\n    /**\n     * Sets the optional user-assigned display name of the app.\n     *\n     * @param newDisplayName The new display name to set.\n     *\n     * @return A promise that resolves when the display name has\n     *     been set.\n     */\n    IosApp.prototype.setDisplayName = function (newDisplayName) {\n        return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n    };\n    /**\n     * Gets the configuration artifact associated with this app.\n     *\n     * @return A promise that resolves to the iOS app's Firebase\n     *     config file, in UTF-8 string format. This string is typically intended to\n     *     be written to a plist file that gets shipped with your iOS app.\n     */\n    IosApp.prototype.getConfig = function () {\n        return this.requestHandler.getConfig(this.resourceName)\n            .then(function (responseData) {\n            project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n            var base64ConfigFileContents = responseData.configFileContents;\n            project_management_api_request_internal_1.assertServerResponse(validator.isBase64String(base64ConfigFileContents), responseData, 'getConfig()\\'s responseData.configFileContents must be a base64 string.');\n            return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n        });\n    };\n    return IosApp;\n}());\nexports.IosApp = IosApp;\n"]},"metadata":{},"sourceType":"script"}