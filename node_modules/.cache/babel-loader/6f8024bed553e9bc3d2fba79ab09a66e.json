{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addTimeoutArg = void 0;\n/**\n * Updates func so that it gets called with the timeout as its final arg.\n *\n * This converts a function, func, into another function with updated deadline.\n *\n * @private\n *\n * @param {GRPCCall} func - a function to be updated.\n * @param {number} timeout - to be added to the original function as it final\n *   positional arg.\n * @param {Object} otherArgs - the additional arguments to be passed to func.\n * @param {Object=} abTests - the A/B testing key/value pairs.\n * @return {function(Object, APICallback)}\n *  the function with other arguments and the timeout.\n */\n\nfunction addTimeoutArg(func, timeout, otherArgs, abTests) {\n  // TODO: this assumes the other arguments consist of metadata and options,\n  // which is specific to gRPC calls. Remove the hidden dependency on gRPC.\n  return (argument, callback) => {\n    const now = new Date();\n    const options = otherArgs.options || {};\n    options.deadline = new Date(now.getTime() + timeout);\n    const metadata = otherArgs.metadataBuilder ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {}) : null;\n    return func(argument, metadata, options, callback);\n  };\n}\n\nexports.addTimeoutArg = addTimeoutArg;","map":{"version":3,"sources":["../../../src/normalCalls/timeout.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;AASH;;;;;;;;;;;;;;AAcG;;AACH,SAAgB,aAAhB,CACE,IADF,EAEE,OAFF,EAGE,SAHF,EAIE,OAJF,EAIc;AAEZ;AACA;AACA,SAAO,CAAC,QAAD,EAAW,QAAX,KAAuB;AAC5B,UAAM,GAAG,GAAG,IAAI,IAAJ,EAAZ;AACA,UAAM,OAAO,GAAG,SAAS,CAAC,OAAV,IAAqB,EAArC;AACA,IAAA,OAAO,CAAC,QAAR,GAAmB,IAAI,IAAJ,CAAS,GAAG,CAAC,OAAJ,KAAgB,OAAzB,CAAnB;AACA,UAAM,QAAQ,GAAG,SAAS,CAAC,eAAV,GACb,SAAS,CAAC,eAAV,CAA0B,OAA1B,EAAmC,SAAS,CAAC,OAAV,IAAqB,EAAxD,CADa,GAEb,IAFJ;AAGA,WAAQ,IAAkB,CAAC,QAAD,EAAW,QAAX,EAAsB,OAAtB,EAA+B,QAA/B,CAA1B;AACD,GARD;AASD;;AAjBD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addTimeoutArg = void 0;\n/**\n * Updates func so that it gets called with the timeout as its final arg.\n *\n * This converts a function, func, into another function with updated deadline.\n *\n * @private\n *\n * @param {GRPCCall} func - a function to be updated.\n * @param {number} timeout - to be added to the original function as it final\n *   positional arg.\n * @param {Object} otherArgs - the additional arguments to be passed to func.\n * @param {Object=} abTests - the A/B testing key/value pairs.\n * @return {function(Object, APICallback)}\n *  the function with other arguments and the timeout.\n */\nfunction addTimeoutArg(func, timeout, otherArgs, abTests) {\n    // TODO: this assumes the other arguments consist of metadata and options,\n    // which is specific to gRPC calls. Remove the hidden dependency on gRPC.\n    return (argument, callback) => {\n        const now = new Date();\n        const options = otherArgs.options || {};\n        options.deadline = new Date(now.getTime() + timeout);\n        const metadata = otherArgs.metadataBuilder\n            ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {})\n            : null;\n        return func(argument, metadata, options, callback);\n    };\n}\nexports.addTimeoutArg = addTimeoutArg;\n//# sourceMappingURL=timeout.js.map"]},"metadata":{},"sourceType":"script"}