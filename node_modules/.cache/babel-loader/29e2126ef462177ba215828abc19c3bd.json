{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst deepEqual = require(\"fast-deep-equal\");\n\nconst serializer_1 = require(\"./serializer\");\n\nconst validate_1 = require(\"./validate\");\n/**\n * Sentinel values that can be used when writing documents with set(), create()\n * or update().\n *\n * @class FieldValue\n */\n\n\nclass FieldValue {\n  /**\n   * @hideconstructor\n   */\n  constructor() {}\n  /**\n   * Returns a sentinel for use with update() or set() with {merge:true} to mark\n   * a field for deletion.\n   *\n   * @returns {FieldValue} The sentinel value to use in your objects.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   * let data = { a: 'b', c: 'd' };\n   *\n   * documentRef.set(data).then(() => {\n   *   return documentRef.update({a: Firestore.FieldValue.delete()});\n   * }).then(() => {\n   *   // Document now only contains { c: 'd' }\n   * });\n   */\n\n\n  static delete() {\n    return DeleteTransform.DELETE_SENTINEL;\n  }\n  /**\n   * Returns a sentinel used with set(), create() or update() to include a\n   * server-generated timestamp in the written data.\n   *\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.set({\n   *   time: Firestore.FieldValue.serverTimestamp()\n   * }).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   console.log(`Server time set to ${doc.get('time')}`);\n   * });\n   */\n\n\n  static serverTimestamp() {\n    return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;\n  }\n  /**\n   * Returns a special value that can be used with set(), create() or update()\n   * that tells the server to increment the the field's current value by the\n   * given value.\n   *\n   * If either current field value or the operand uses floating point\n   * precision, both values will be interpreted as floating point numbers and\n   * all arithmetic will follow IEEE 754 semantics. Otherwise, integer\n   * precision is kept and the result is capped between -2^63 and 2^63-1.\n   *\n   * If the current field value is not of type 'number', or if the field does\n   * not yet exist, the transformation will set the field to the given value.\n   *\n   * @param {number} n The value to increment by.\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.update(\n   *   'counter', Firestore.FieldValue.increment(1)\n   * ).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   // doc.get('counter') was incremented\n   * });\n   */\n\n\n  static increment(n) {\n    // eslint-disable-next-line prefer-rest-params\n    validate_1.validateMinNumberOfArguments('FieldValue.increment', arguments, 1);\n    return new NumericIncrementTransform(n);\n  }\n  /**\n   * Returns a special value that can be used with set(), create() or update()\n   * that tells the server to union the given elements with any array value that\n   * already exists on the server. Each specified element that doesn't already\n   * exist in the array will be added to the end. If the field being modified is\n   * not already an array it will be overwritten with an array containing\n   * exactly the specified elements.\n   *\n   * @param {...*} elements The elements to union into the array.\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.update(\n   *   'array', Firestore.FieldValue.arrayUnion('foo')\n   * ).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   // doc.get('array') contains field 'foo'\n   * });\n   */\n\n\n  static arrayUnion(...elements) {\n    validate_1.validateMinNumberOfArguments('FieldValue.arrayUnion', elements, 1);\n    return new ArrayUnionTransform(elements);\n  }\n  /**\n   * Returns a special value that can be used with set(), create() or update()\n   * that tells the server to remove the given elements from any array value\n   * that already exists on the server. All instances of each element specified\n   * will be removed from the array. If the field being modified is not already\n   * an array it will be overwritten with an empty array.\n   *\n   * @param {...*} elements The elements to remove from the array.\n   * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n   * create() or update().\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.update(\n   *   'array', Firestore.FieldValue.arrayRemove('foo')\n   * ).then(() => {\n   *   return documentRef.get();\n   * }).then(doc => {\n   *   // doc.get('array') no longer contains field 'foo'\n   * });\n   */\n\n\n  static arrayRemove(...elements) {\n    validate_1.validateMinNumberOfArguments('FieldValue.arrayRemove', elements, 1);\n    return new ArrayRemoveTransform(elements);\n  }\n  /**\n   * Returns true if this `FieldValue` is equal to the provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return {boolean} true if this `FieldValue` is equal to the provided value.\n   *\n   * @example\n   * let fieldValues = [\n   *   Firestore.FieldValue.increment(-1.0),\n   *   Firestore.FieldValue.increment(-1),\n   *   Firestore.FieldValue.increment(-0.0),\n   *   Firestore.FieldValue.increment(-0),\n   *   Firestore.FieldValue.increment(0),\n   *   Firestore.FieldValue.increment(0.0),\n   *   Firestore.FieldValue.increment(1),\n   *   Firestore.FieldValue.increment(1.0)\n   * ];\n   *\n   * let equal = 0;\n   * for (let i = 0; i < fieldValues.length; ++i) {\n   *   for (let j = i + 1; j < fieldValues.length; ++j) {\n   *     if (fieldValues[i].isEqual(fieldValues[j])) {\n   *       ++equal;\n   *     }\n   *   }\n   * }\n   * console.log(`Found ${equal} equalities.`);\n   */\n\n\n  isEqual(other) {\n    return this === other;\n  }\n\n}\n\nexports.FieldValue = FieldValue;\n/**\n * An internal interface shared by all field transforms.\n *\n * A 'FieldTransform` subclass should implement '.includeInDocumentMask',\n * '.includeInDocumentTransform' and 'toProto' (if '.includeInDocumentTransform'\n * is 'true').\n *\n * @private\n * @abstract\n */\n\nclass FieldTransform extends FieldValue {}\n\nexports.FieldTransform = FieldTransform;\n/**\n * A transform that deletes a field from a Firestore document.\n *\n * @private\n */\n\nclass DeleteTransform extends FieldTransform {\n  constructor() {\n    super();\n  }\n  /**\n   * Deletes are included in document masks.\n   * @private\n   */\n\n\n  get includeInDocumentMask() {\n    return true;\n  }\n  /**\n   * Deletes are are omitted from document transforms.\n   * @private\n   */\n\n\n  get includeInDocumentTransform() {\n    return false;\n  }\n\n  get methodName() {\n    return 'FieldValue.delete';\n  }\n\n  validate() {}\n\n  toProto() {\n    throw new Error('FieldValue.delete() should not be included in a FieldTransform');\n  }\n\n}\n\nexports.DeleteTransform = DeleteTransform;\n/**\n * Sentinel value for a field delete.\n * @private\n */\n\nDeleteTransform.DELETE_SENTINEL = new DeleteTransform();\n/**\n * A transform that sets a field to the Firestore server time.\n *\n * @private\n */\n\nclass ServerTimestampTransform extends FieldTransform {\n  constructor() {\n    super();\n  }\n  /**\n   * Server timestamps are omitted from document masks.\n   *\n   * @private\n   */\n\n\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Server timestamps are included in document transforms.\n   *\n   * @private\n   */\n\n\n  get includeInDocumentTransform() {\n    return true;\n  }\n\n  get methodName() {\n    return 'FieldValue.serverTimestamp';\n  }\n\n  validate() {}\n\n  toProto(serializer, fieldPath) {\n    return {\n      fieldPath: fieldPath.formattedName,\n      setToServerValue: 'REQUEST_TIME'\n    };\n  }\n\n}\n/**\n * Sentinel value for a server timestamp.\n *\n * @private\n */\n\n\nServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();\n/**\n * Increments a field value on the backend.\n *\n * @private\n */\n\nclass NumericIncrementTransform extends FieldTransform {\n  constructor(operand) {\n    super();\n    this.operand = operand;\n  }\n  /**\n   * Numeric transforms are omitted from document masks.\n   *\n   * @private\n   */\n\n\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Numeric transforms are included in document transforms.\n   *\n   * @private\n   */\n\n\n  get includeInDocumentTransform() {\n    return true;\n  }\n\n  get methodName() {\n    return 'FieldValue.increment';\n  }\n\n  validate() {\n    validate_1.validateNumber('FieldValue.increment()', this.operand);\n  }\n\n  toProto(serializer, fieldPath) {\n    const encodedOperand = serializer.encodeValue(this.operand);\n    return {\n      fieldPath: fieldPath.formattedName,\n      increment: encodedOperand\n    };\n  }\n\n  isEqual(other) {\n    return this === other || other instanceof NumericIncrementTransform && this.operand === other.operand;\n  }\n\n}\n/**\n * Transforms an array value via a union operation.\n *\n * @private\n */\n\n\nclass ArrayUnionTransform extends FieldTransform {\n  constructor(elements) {\n    super();\n    this.elements = elements;\n  }\n  /**\n   * Array transforms are omitted from document masks.\n   * @private\n   */\n\n\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Array transforms are included in document transforms.\n   * @private\n   */\n\n\n  get includeInDocumentTransform() {\n    return true;\n  }\n\n  get methodName() {\n    return 'FieldValue.arrayUnion';\n  }\n\n  validate(allowUndefined) {\n    for (let i = 0; i < this.elements.length; ++i) {\n      validateArrayElement(i, this.elements[i], allowUndefined);\n    }\n  }\n\n  toProto(serializer, fieldPath) {\n    const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n    return {\n      fieldPath: fieldPath.formattedName,\n      appendMissingElements: encodedElements\n    };\n  }\n\n  isEqual(other) {\n    return this === other || other instanceof ArrayUnionTransform && deepEqual(this.elements, other.elements);\n  }\n\n}\n/**\n * Transforms an array value via a remove operation.\n *\n * @private\n */\n\n\nclass ArrayRemoveTransform extends FieldTransform {\n  constructor(elements) {\n    super();\n    this.elements = elements;\n  }\n  /**\n   * Array transforms are omitted from document masks.\n   * @private\n   */\n\n\n  get includeInDocumentMask() {\n    return false;\n  }\n  /**\n   * Array transforms are included in document transforms.\n   * @private\n   */\n\n\n  get includeInDocumentTransform() {\n    return true;\n  }\n\n  get methodName() {\n    return 'FieldValue.arrayRemove';\n  }\n\n  validate(allowUndefined) {\n    for (let i = 0; i < this.elements.length; ++i) {\n      validateArrayElement(i, this.elements[i], allowUndefined);\n    }\n  }\n\n  toProto(serializer, fieldPath) {\n    const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n    return {\n      fieldPath: fieldPath.formattedName,\n      removeAllFromArray: encodedElements\n    };\n  }\n\n  isEqual(other) {\n    return this === other || other instanceof ArrayRemoveTransform && deepEqual(this.elements, other.elements);\n  }\n\n}\n/**\n * Validates that `value` can be used as an element inside of an array. Certain\n * field values (such as ServerTimestamps) are rejected. Nested arrays are also\n * rejected.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\n\n\nfunction validateArrayElement(arg, value, allowUndefined) {\n  if (Array.isArray(value)) {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'array element')} Nested arrays are not supported.`);\n  }\n\n  serializer_1.validateUserInput(arg, value, 'array element',\n  /*path=*/\n  {\n    allowDeletes: 'none',\n    allowTransforms: false,\n    allowUndefined\n  },\n  /*path=*/\n  undefined,\n  /*level=*/\n  0,\n  /*inArray=*/\n  true);\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/firestore/build/src/field-value.js"],"names":["Object","defineProperty","exports","value","deepEqual","require","serializer_1","validate_1","FieldValue","constructor","delete","DeleteTransform","DELETE_SENTINEL","serverTimestamp","ServerTimestampTransform","SERVER_TIMESTAMP_SENTINEL","increment","n","validateMinNumberOfArguments","arguments","NumericIncrementTransform","arrayUnion","elements","ArrayUnionTransform","arrayRemove","ArrayRemoveTransform","isEqual","other","FieldTransform","includeInDocumentMask","includeInDocumentTransform","methodName","validate","toProto","Error","serializer","fieldPath","formattedName","setToServerValue","operand","validateNumber","encodedOperand","encodeValue","allowUndefined","i","length","validateArrayElement","encodedElements","arrayValue","appendMissingElements","removeAllFromArray","arg","Array","isArray","invalidArgumentMessage","validateUserInput","allowDeletes","allowTransforms","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,UAAN,CAAiB;AACb;AACJ;AACA;AACIC,EAAAA,WAAW,GAAG,CAAG;AACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACiB,SAANC,MAAM,GAAG;AACZ,WAAOC,eAAe,CAACC,eAAvB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC0B,SAAfC,eAAe,GAAG;AACrB,WAAOC,wBAAwB,CAACC,yBAAhC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACoB,SAATC,SAAS,CAACC,CAAD,EAAI;AAChB;AACAV,IAAAA,UAAU,CAACW,4BAAX,CAAwC,sBAAxC,EAAgEC,SAAhE,EAA2E,CAA3E;AACA,WAAO,IAAIC,yBAAJ,CAA8BH,CAA9B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACqB,SAAVI,UAAU,CAAC,GAAGC,QAAJ,EAAc;AAC3Bf,IAAAA,UAAU,CAACW,4BAAX,CAAwC,uBAAxC,EAAiEI,QAAjE,EAA2E,CAA3E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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst deepEqual = require(\"fast-deep-equal\");\nconst serializer_1 = require(\"./serializer\");\nconst validate_1 = require(\"./validate\");\n/**\n * Sentinel values that can be used when writing documents with set(), create()\n * or update().\n *\n * @class FieldValue\n */\nclass FieldValue {\n    /**\n     * @hideconstructor\n     */\n    constructor() { }\n    /**\n     * Returns a sentinel for use with update() or set() with {merge:true} to mark\n     * a field for deletion.\n     *\n     * @returns {FieldValue} The sentinel value to use in your objects.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     * let data = { a: 'b', c: 'd' };\n     *\n     * documentRef.set(data).then(() => {\n     *   return documentRef.update({a: Firestore.FieldValue.delete()});\n     * }).then(() => {\n     *   // Document now only contains { c: 'd' }\n     * });\n     */\n    static delete() {\n        return DeleteTransform.DELETE_SENTINEL;\n    }\n    /**\n     * Returns a sentinel used with set(), create() or update() to include a\n     * server-generated timestamp in the written data.\n     *\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({\n     *   time: Firestore.FieldValue.serverTimestamp()\n     * }).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   console.log(`Server time set to ${doc.get('time')}`);\n     * });\n     */\n    static serverTimestamp() {\n        return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to increment the the field's current value by the\n     * given value.\n     *\n     * If either current field value or the operand uses floating point\n     * precision, both values will be interpreted as floating point numbers and\n     * all arithmetic will follow IEEE 754 semantics. Otherwise, integer\n     * precision is kept and the result is capped between -2^63 and 2^63-1.\n     *\n     * If the current field value is not of type 'number', or if the field does\n     * not yet exist, the transformation will set the field to the given value.\n     *\n     * @param {number} n The value to increment by.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'counter', Firestore.FieldValue.increment(1)\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('counter') was incremented\n     * });\n     */\n    static increment(n) {\n        // eslint-disable-next-line prefer-rest-params\n        validate_1.validateMinNumberOfArguments('FieldValue.increment', arguments, 1);\n        return new NumericIncrementTransform(n);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to union the given elements with any array value that\n     * already exists on the server. Each specified element that doesn't already\n     * exist in the array will be added to the end. If the field being modified is\n     * not already an array it will be overwritten with an array containing\n     * exactly the specified elements.\n     *\n     * @param {...*} elements The elements to union into the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayUnion('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') contains field 'foo'\n     * });\n     */\n    static arrayUnion(...elements) {\n        validate_1.validateMinNumberOfArguments('FieldValue.arrayUnion', elements, 1);\n        return new ArrayUnionTransform(elements);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to remove the given elements from any array value\n     * that already exists on the server. All instances of each element specified\n     * will be removed from the array. If the field being modified is not already\n     * an array it will be overwritten with an empty array.\n     *\n     * @param {...*} elements The elements to remove from the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayRemove('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') no longer contains field 'foo'\n     * });\n     */\n    static arrayRemove(...elements) {\n        validate_1.validateMinNumberOfArguments('FieldValue.arrayRemove', elements, 1);\n        return new ArrayRemoveTransform(elements);\n    }\n    /**\n     * Returns true if this `FieldValue` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldValue` is equal to the provided value.\n     *\n     * @example\n     * let fieldValues = [\n     *   Firestore.FieldValue.increment(-1.0),\n     *   Firestore.FieldValue.increment(-1),\n     *   Firestore.FieldValue.increment(-0.0),\n     *   Firestore.FieldValue.increment(-0),\n     *   Firestore.FieldValue.increment(0),\n     *   Firestore.FieldValue.increment(0.0),\n     *   Firestore.FieldValue.increment(1),\n     *   Firestore.FieldValue.increment(1.0)\n     * ];\n     *\n     * let equal = 0;\n     * for (let i = 0; i < fieldValues.length; ++i) {\n     *   for (let j = i + 1; j < fieldValues.length; ++j) {\n     *     if (fieldValues[i].isEqual(fieldValues[j])) {\n     *       ++equal;\n     *     }\n     *   }\n     * }\n     * console.log(`Found ${equal} equalities.`);\n     */\n    isEqual(other) {\n        return this === other;\n    }\n}\nexports.FieldValue = FieldValue;\n/**\n * An internal interface shared by all field transforms.\n *\n * A 'FieldTransform` subclass should implement '.includeInDocumentMask',\n * '.includeInDocumentTransform' and 'toProto' (if '.includeInDocumentTransform'\n * is 'true').\n *\n * @private\n * @abstract\n */\nclass FieldTransform extends FieldValue {\n}\nexports.FieldTransform = FieldTransform;\n/**\n * A transform that deletes a field from a Firestore document.\n *\n * @private\n */\nclass DeleteTransform extends FieldTransform {\n    constructor() {\n        super();\n    }\n    /**\n     * Deletes are included in document masks.\n     * @private\n     */\n    get includeInDocumentMask() {\n        return true;\n    }\n    /**\n     * Deletes are are omitted from document transforms.\n     * @private\n     */\n    get includeInDocumentTransform() {\n        return false;\n    }\n    get methodName() {\n        return 'FieldValue.delete';\n    }\n    validate() { }\n    toProto() {\n        throw new Error('FieldValue.delete() should not be included in a FieldTransform');\n    }\n}\nexports.DeleteTransform = DeleteTransform;\n/**\n * Sentinel value for a field delete.\n * @private\n */\nDeleteTransform.DELETE_SENTINEL = new DeleteTransform();\n/**\n * A transform that sets a field to the Firestore server time.\n *\n * @private\n */\nclass ServerTimestampTransform extends FieldTransform {\n    constructor() {\n        super();\n    }\n    /**\n     * Server timestamps are omitted from document masks.\n     *\n     * @private\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Server timestamps are included in document transforms.\n     *\n     * @private\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.serverTimestamp';\n    }\n    validate() { }\n    toProto(serializer, fieldPath) {\n        return {\n            fieldPath: fieldPath.formattedName,\n            setToServerValue: 'REQUEST_TIME',\n        };\n    }\n}\n/**\n * Sentinel value for a server timestamp.\n *\n * @private\n */\nServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();\n/**\n * Increments a field value on the backend.\n *\n * @private\n */\nclass NumericIncrementTransform extends FieldTransform {\n    constructor(operand) {\n        super();\n        this.operand = operand;\n    }\n    /**\n     * Numeric transforms are omitted from document masks.\n     *\n     * @private\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Numeric transforms are included in document transforms.\n     *\n     * @private\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.increment';\n    }\n    validate() {\n        validate_1.validateNumber('FieldValue.increment()', this.operand);\n    }\n    toProto(serializer, fieldPath) {\n        const encodedOperand = serializer.encodeValue(this.operand);\n        return { fieldPath: fieldPath.formattedName, increment: encodedOperand };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof NumericIncrementTransform &&\n                this.operand === other.operand));\n    }\n}\n/**\n * Transforms an array value via a union operation.\n *\n * @private\n */\nclass ArrayUnionTransform extends FieldTransform {\n    constructor(elements) {\n        super();\n        this.elements = elements;\n    }\n    /**\n     * Array transforms are omitted from document masks.\n     * @private\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.arrayUnion';\n    }\n    validate(allowUndefined) {\n        for (let i = 0; i < this.elements.length; ++i) {\n            validateArrayElement(i, this.elements[i], allowUndefined);\n        }\n    }\n    toProto(serializer, fieldPath) {\n        const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n        return {\n            fieldPath: fieldPath.formattedName,\n            appendMissingElements: encodedElements,\n        };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof ArrayUnionTransform &&\n                deepEqual(this.elements, other.elements)));\n    }\n}\n/**\n * Transforms an array value via a remove operation.\n *\n * @private\n */\nclass ArrayRemoveTransform extends FieldTransform {\n    constructor(elements) {\n        super();\n        this.elements = elements;\n    }\n    /**\n     * Array transforms are omitted from document masks.\n     * @private\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.arrayRemove';\n    }\n    validate(allowUndefined) {\n        for (let i = 0; i < this.elements.length; ++i) {\n            validateArrayElement(i, this.elements[i], allowUndefined);\n        }\n    }\n    toProto(serializer, fieldPath) {\n        const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n        return {\n            fieldPath: fieldPath.formattedName,\n            removeAllFromArray: encodedElements,\n        };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof ArrayRemoveTransform &&\n                deepEqual(this.elements, other.elements)));\n    }\n}\n/**\n * Validates that `value` can be used as an element inside of an array. Certain\n * field values (such as ServerTimestamps) are rejected. Nested arrays are also\n * rejected.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateArrayElement(arg, value, allowUndefined) {\n    if (Array.isArray(value)) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'array element')} Nested arrays are not supported.`);\n    }\n    serializer_1.validateUserInput(arg, value, 'array element', \n    /*path=*/ { allowDeletes: 'none', allowTransforms: false, allowUndefined }, \n    /*path=*/ undefined, \n    /*level=*/ 0, \n    /*inArray=*/ true);\n}\n//# sourceMappingURL=field-value.js.map"]},"metadata":{},"sourceType":"script"}