{"ast":null,"code":"export const approveERC721 = async (pos_client, rootTokenAddress) => {\n  const tx = await pos_client.approveAllERC721ForDeposit(rootTokenAddress);\n  console.log(\"approve\", tx.transactionHash);\n  return tx;\n};\nexport const depositERC721 = async (pos_client, rootTokenAddress, receiverAddress, tokenIds) => {\n  // console.log(rootTokenAddress)\n  // console.log(pos_client)\n  const tx = await pos_client.depositBatchERC721ForUser(rootTokenAddress, receiverAddress, tokenIds);\n  return tx;\n};\nexport const burnERC721 = async (pos_client, childTokenAddress, tokenIds) => {\n  const tx = await pos_client.burnBatchERC721(childTokenAddress, tokenIds // { from: from }\n  );\n  console.log(tx, tx.transactionHash);\n  return tx.transactionHash;\n};\nexport const exitERC721 = async (pos_client, txnHash) => {\n  const tx = await pos_client.exitBatchERC721(txnHash // { from: from }\n  );\n  console.log(tx, tx.transactionHash);\n  return tx.transactionHash;\n};","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/src/utils/erc721.js"],"names":["approveERC721","pos_client","rootTokenAddress","tx","approveAllERC721ForDeposit","console","log","transactionHash","depositERC721","receiverAddress","tokenIds","depositBatchERC721ForUser","burnERC721","childTokenAddress","burnBatchERC721","exitERC721","txnHash","exitBatchERC721"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,OAAOC,UAAP,EAAmBC,gBAAnB,KAAwC;AACjE,QAAMC,EAAE,GAAG,MAAMF,UAAU,CAACG,0BAAX,CAAsCF,gBAAtC,CAAjB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,EAAE,CAACI,eAA1B;AACA,SAAOJ,EAAP;AACH,CAJM;AAMP,OAAO,MAAMK,aAAa,GAAG,OAAOP,UAAP,EAAmBC,gBAAnB,EAAqCO,eAArC,EAAsDC,QAAtD,KAAmE;AAC5F;AACA;AACA,QAAMP,EAAE,GAAG,MAAMF,UAAU,CAACU,yBAAX,CACbT,gBADa,EAEbO,eAFa,EAGbC,QAHa,CAAjB;AAKA,SAAOP,EAAP;AACH,CATM;AAWP,OAAO,MAAMS,UAAU,GAAG,OAAOX,UAAP,EAAmBY,iBAAnB,EAAsCH,QAAtC,KAAmD;AACzE,QAAMP,EAAE,GAAG,MAAMF,UAAU,CAACa,eAAX,CACbD,iBADa,EAEbH,QAFa,CAGb;AAHa,GAAjB;AAKAL,EAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ,EAAgBA,EAAE,CAACI,eAAnB;AACA,SAAOJ,EAAE,CAACI,eAAV;AACH,CARM;AAUP,OAAO,MAAMQ,UAAU,GAAG,OAAOd,UAAP,EAAmBe,OAAnB,KAA+B;AACrD,QAAMb,EAAE,GAAG,MAAMF,UAAU,CAACgB,eAAX,CACbD,OADa,CAEb;AAFa,GAAjB;AAIAX,EAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ,EAAgBA,EAAE,CAACI,eAAnB;AACA,SAAOJ,EAAE,CAACI,eAAV;AACH,CAPM","sourcesContent":["export const approveERC721 = async (pos_client, rootTokenAddress) => {\n    const tx = await pos_client.approveAllERC721ForDeposit(rootTokenAddress);\n    console.log(\"approve\", tx.transactionHash)\n    return tx;\n}\n\nexport const depositERC721 = async (pos_client, rootTokenAddress, receiverAddress, tokenIds) => {\n    // console.log(rootTokenAddress)\n    // console.log(pos_client)\n    const tx = await pos_client.depositBatchERC721ForUser(\n        rootTokenAddress,\n        receiverAddress,\n        tokenIds,\n    )\n    return tx;\n}\n\nexport const burnERC721 = async (pos_client, childTokenAddress, tokenIds) => {\n    const tx = await pos_client.burnBatchERC721(\n        childTokenAddress,\n        tokenIds,\n        // { from: from }\n    )\n    console.log(tx, tx.transactionHash);\n    return tx.transactionHash;\n}\n\nexport const exitERC721 = async (pos_client, txnHash) => {\n    const tx = await pos_client.exitBatchERC721(\n        txnHash,\n        // { from: from }\n    )\n    console.log(tx, tx.transactionHash);\n    return tx.transactionHash;\n}\n"]},"metadata":{},"sourceType":"module"}