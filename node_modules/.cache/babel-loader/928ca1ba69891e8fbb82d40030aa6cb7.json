{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OngoingCallPromise = exports.OngoingCall = void 0;\n\nconst status_1 = require(\"./status\");\n\nconst googleError_1 = require(\"./googleError\");\n\nclass OngoingCall {\n  /**\n   * OngoingCall manages callback, API calls, and cancellation\n   * of the API calls.\n   * @param {APICallback=} callback\n   *   The callback to be called asynchronously when the API call\n   *   finishes.\n   * @constructor\n   * @property {APICallback} callback\n   *   The callback function to be called.\n   * @private\n   */\n  constructor(callback) {\n    this.callback = callback;\n    this.completed = false;\n  }\n  /**\n   * Cancels the ongoing promise.\n   */\n\n\n  cancel() {\n    if (this.completed) {\n      return;\n    }\n\n    this.completed = true;\n\n    if (this.cancelFunc) {\n      this.cancelFunc();\n    } else {\n      const error = new googleError_1.GoogleError('cancelled');\n      error.code = status_1.Status.CANCELLED;\n      this.callback(error);\n    }\n  }\n  /**\n   * Call calls the specified function. Result will be used to fulfill\n   * the promise.\n   *\n   * @param {SimpleCallbackFunction} func\n   *   A function for an API call.\n   * @param {Object} argument\n   *   A request object.\n   */\n\n\n  call(func, argument) {\n    if (this.completed) {\n      return;\n    } // eslint-disable-next-line\n\n\n    const canceller = func(argument, (...args) => {\n      this.completed = true;\n      setImmediate(this.callback, ...args);\n    });\n\n    this.cancelFunc = () => canceller.cancel();\n  }\n\n}\n\nexports.OngoingCall = OngoingCall;\n\nclass OngoingCallPromise extends OngoingCall {\n  /**\n   * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\n   * the API call finishes.\n   * @constructor\n   * @private\n   */\n  constructor() {\n    let resolveCallback;\n    let rejectCallback;\n\n    const callback = (err, response, next, rawResponse) => {\n      if (err) {\n        rejectCallback(err);\n      } else if (response !== undefined) {\n        resolveCallback([response, next || null, rawResponse || null]);\n      } else {\n        throw new googleError_1.GoogleError('Neither error nor response are defined');\n      }\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      resolveCallback = resolve;\n      rejectCallback = reject;\n    });\n    super(callback);\n    this.promise = promise;\n\n    this.promise.cancel = () => {\n      this.cancel();\n    };\n  }\n\n}\n\nexports.OngoingCallPromise = OngoingCallPromise;","map":{"version":3,"sources":["../../src/call.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAEH,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAWA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,MAAa,WAAb,CAAwB;AAKtB;;;;;;;;;;AAUG;AACH,EAAA,WAAA,CAAY,QAAZ,EAAiC;AAC/B,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,SAAL,GAAiB,KAAjB;AACD;AAED;;AAEG;;;AACH,EAAA,MAAM,GAAA;AACJ,QAAI,KAAK,SAAT,EAAoB;AAClB;AACD;;AACD,SAAK,SAAL,GAAiB,IAAjB;;AACA,QAAI,KAAK,UAAT,EAAqB;AACnB,WAAK,UAAL;AACD,KAFD,MAEO;AACL,YAAM,KAAK,GAAG,IAAI,aAAA,CAAA,WAAJ,CAAgB,WAAhB,CAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,QAAA,CAAA,MAAA,CAAO,SAApB;AACA,WAAK,QAAL,CAAe,KAAf;AACD;AACF;AAED;;;;;;;;AAQG;;;AACH,EAAA,IAAI,CAAC,IAAD,EAA+B,QAA/B,EAAoD;AACtD,QAAI,KAAK,SAAT,EAAoB;AAClB;AACD,KAHqD,CAItD;;;AACA,UAAM,SAAS,GAAG,IAAI,CAAC,QAAD,EAAW,CAAC,GAAG,IAAJ,KAAmB;AAClD,WAAK,SAAL,GAAiB,IAAjB;AACA,MAAA,YAAY,CAAC,KAAK,QAAN,EAAiB,GAAG,IAApB,CAAZ;AACD,KAHqB,CAAtB;;AAIA,SAAK,UAAL,GAAkB,MAAM,SAAS,CAAC,MAAV,EAAxB;AACD;;AAzDqB;;AAAxB,OAAA,CAAA,WAAA,GAAA,WAAA;;AAgEA,MAAa,kBAAb,SAAwC,WAAxC,CAAmD;AAEjD;;;;;AAKG;AACH,EAAA,WAAA,GAAA;AACE,QAAI,eAAJ;AAGA,QAAI,cAAJ;;AACA,UAAM,QAAQ,GAAgB,CAC5B,GAD4B,EAE5B,QAF4B,EAG5B,IAH4B,EAI5B,WAJ4B,KAK1B;AACF,UAAI,GAAJ,EAAS;AACP,QAAA,cAAc,CAAC,GAAD,CAAd;AACD,OAFD,MAEO,IAAI,QAAQ,KAAK,SAAjB,EAA4B;AACjC,QAAA,eAAe,CAAC,CAAC,QAAD,EAAW,IAAI,IAAI,IAAnB,EAAyB,WAAW,IAAI,IAAxC,CAAD,CAAf;AACD,OAFM,MAEA;AACL,cAAM,IAAI,aAAA,CAAA,WAAJ,CAAgB,wCAAhB,CAAN;AACD;AACF,KAbD;;AAcA,UAAM,OAAO,GAAG,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AAC9C,MAAA,eAAe,GAAG,OAAlB;AACA,MAAA,cAAc,GAAG,MAAjB;AACD,KAHe,CAAhB;AAIA,UAAM,QAAN;AACA,SAAK,OAAL,GAAe,OAAf;;AACA,SAAK,OAAL,CAAa,MAAb,GAAsB,MAAK;AACzB,WAAK,MAAL;AACD,KAFD;AAGD;;AApCgD;;AAAnD,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OngoingCallPromise = exports.OngoingCall = void 0;\nconst status_1 = require(\"./status\");\nconst googleError_1 = require(\"./googleError\");\nclass OngoingCall {\n    /**\n     * OngoingCall manages callback, API calls, and cancellation\n     * of the API calls.\n     * @param {APICallback=} callback\n     *   The callback to be called asynchronously when the API call\n     *   finishes.\n     * @constructor\n     * @property {APICallback} callback\n     *   The callback function to be called.\n     * @private\n     */\n    constructor(callback) {\n        this.callback = callback;\n        this.completed = false;\n    }\n    /**\n     * Cancels the ongoing promise.\n     */\n    cancel() {\n        if (this.completed) {\n            return;\n        }\n        this.completed = true;\n        if (this.cancelFunc) {\n            this.cancelFunc();\n        }\n        else {\n            const error = new googleError_1.GoogleError('cancelled');\n            error.code = status_1.Status.CANCELLED;\n            this.callback(error);\n        }\n    }\n    /**\n     * Call calls the specified function. Result will be used to fulfill\n     * the promise.\n     *\n     * @param {SimpleCallbackFunction} func\n     *   A function for an API call.\n     * @param {Object} argument\n     *   A request object.\n     */\n    call(func, argument) {\n        if (this.completed) {\n            return;\n        }\n        // eslint-disable-next-line\n        const canceller = func(argument, (...args) => {\n            this.completed = true;\n            setImmediate(this.callback, ...args);\n        });\n        this.cancelFunc = () => canceller.cancel();\n    }\n}\nexports.OngoingCall = OngoingCall;\nclass OngoingCallPromise extends OngoingCall {\n    /**\n     * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\n     * the API call finishes.\n     * @constructor\n     * @private\n     */\n    constructor() {\n        let resolveCallback;\n        let rejectCallback;\n        const callback = (err, response, next, rawResponse) => {\n            if (err) {\n                rejectCallback(err);\n            }\n            else if (response !== undefined) {\n                resolveCallback([response, next || null, rawResponse || null]);\n            }\n            else {\n                throw new googleError_1.GoogleError('Neither error nor response are defined');\n            }\n        };\n        const promise = new Promise((resolve, reject) => {\n            resolveCallback = resolve;\n            rejectCallback = reject;\n        });\n        super(callback);\n        this.promise = promise;\n        this.promise.cancel = () => {\n            this.cancel();\n        };\n    }\n}\nexports.OngoingCallPromise = OngoingCallPromise;\n//# sourceMappingURL=call.js.map"]},"metadata":{},"sourceType":"script"}