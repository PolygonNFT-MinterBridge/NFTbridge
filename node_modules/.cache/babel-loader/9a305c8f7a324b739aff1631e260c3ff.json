{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global window */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromArrayBufferToHex = exports.hasBrowserCrypto = exports.createCrypto = void 0;\n\nconst crypto_1 = require(\"./browser/crypto\");\n\nconst crypto_2 = require(\"./node/crypto\");\n\nfunction createCrypto() {\n  if (hasBrowserCrypto()) {\n    return new crypto_1.BrowserCrypto();\n  }\n\n  return new crypto_2.NodeCrypto();\n}\n\nexports.createCrypto = createCrypto;\n\nfunction hasBrowserCrypto() {\n  return typeof window !== 'undefined' && typeof window.crypto !== 'undefined' && typeof window.crypto.subtle !== 'undefined';\n}\n\nexports.hasBrowserCrypto = hasBrowserCrypto;\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @param arrayBuffer The ArrayBuffer to convert to hexadecimal string.\n * @return The hexadecimal encoding of the ArrayBuffer.\n */\n\nfunction fromArrayBufferToHex(arrayBuffer) {\n  // Convert buffer to byte array.\n  const byteArray = Array.from(new Uint8Array(arrayBuffer)); // Convert bytes to hex string.\n\n  return byteArray.map(byte => {\n    return byte.toString(16).padStart(2, '0');\n  }).join('');\n}\n\nexports.fromArrayBufferToHex = fromArrayBufferToHex;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/google-gax/node_modules/google-auth-library/build/src/crypto/crypto.js"],"names":["Object","defineProperty","exports","value","fromArrayBufferToHex","hasBrowserCrypto","createCrypto","crypto_1","require","crypto_2","BrowserCrypto","NodeCrypto","window","crypto","subtle","arrayBuffer","byteArray","Array","from","Uint8Array","map","byte","toString","padStart","join"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+BF,OAAO,CAACG,gBAAR,GAA2BH,OAAO,CAACI,YAAR,GAAuB,KAAK,CAAtF;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,eAAD,CAAxB;;AACA,SAASF,YAAT,GAAwB;AACpB,MAAID,gBAAgB,EAApB,EAAwB;AACpB,WAAO,IAAIE,QAAQ,CAACG,aAAb,EAAP;AACH;;AACD,SAAO,IAAID,QAAQ,CAACE,UAAb,EAAP;AACH;;AACDT,OAAO,CAACI,YAAR,GAAuBA,YAAvB;;AACA,SAASD,gBAAT,GAA4B;AACxB,SAAQ,OAAOO,MAAP,KAAkB,WAAlB,IACJ,OAAOA,MAAM,CAACC,MAAd,KAAyB,WADrB,IAEJ,OAAOD,MAAM,CAACC,MAAP,CAAcC,MAArB,KAAgC,WAFpC;AAGH;;AACDZ,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,oBAAT,CAA8BW,WAA9B,EAA2C;AACvC;AACA,QAAMC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,UAAJ,CAAeJ,WAAf,CAAX,CAAlB,CAFuC,CAGvC;;AACA,SAAOC,SAAS,CACXI,GADE,CACEC,IAAI,IAAI;AACb,WAAOA,IAAI,CAACC,QAAL,CAAc,EAAd,EAAkBC,QAAlB,CAA2B,CAA3B,EAA8B,GAA9B,CAAP;AACH,GAHM,EAIFC,IAJE,CAIG,EAJH,CAAP;AAKH;;AACDtB,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromArrayBufferToHex = exports.hasBrowserCrypto = exports.createCrypto = void 0;\nconst crypto_1 = require(\"./browser/crypto\");\nconst crypto_2 = require(\"./node/crypto\");\nfunction createCrypto() {\n    if (hasBrowserCrypto()) {\n        return new crypto_1.BrowserCrypto();\n    }\n    return new crypto_2.NodeCrypto();\n}\nexports.createCrypto = createCrypto;\nfunction hasBrowserCrypto() {\n    return (typeof window !== 'undefined' &&\n        typeof window.crypto !== 'undefined' &&\n        typeof window.crypto.subtle !== 'undefined');\n}\nexports.hasBrowserCrypto = hasBrowserCrypto;\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @param arrayBuffer The ArrayBuffer to convert to hexadecimal string.\n * @return The hexadecimal encoding of the ArrayBuffer.\n */\nfunction fromArrayBufferToHex(arrayBuffer) {\n    // Convert buffer to byte array.\n    const byteArray = Array.from(new Uint8Array(arrayBuffer));\n    // Convert bytes to hex string.\n    return byteArray\n        .map(byte => {\n        return byte.toString(16).padStart(2, '0');\n    })\n        .join('');\n}\nexports.fromArrayBufferToHex = fromArrayBufferToHex;\n//# sourceMappingURL=crypto.js.map"]},"metadata":{},"sourceType":"script"}