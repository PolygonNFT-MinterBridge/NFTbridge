{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst validate_1 = require(\"./validate\");\n/*!\n * @module firestore/convert\n * @private\n *\n * This module contains utility functions to convert\n * `firestore.v1.Documents` from Proto3 JSON to their equivalent\n * representation in Protobuf JS. Protobuf JS is the only encoding supported by\n * this client, and dependencies that use Proto3 JSON (such as the Google Cloud\n * Functions SDK) are supported through this conversion and its usage in\n * {@see Firestore#snapshot_}.\n */\n\n/**\n * Converts an ISO 8601 or google.protobuf.Timestamp proto into Protobuf JS.\n *\n * @private\n * @param timestampValue The value to convert.\n * @param argumentName The argument name to use in the error message if the\n * conversion fails. If omitted, 'timestampValue' is used.\n * @return The value as expected by Protobuf JS or undefined if no input was\n * provided.\n */\n\n\nfunction timestampFromJson(timestampValue, argumentName) {\n  let timestampProto;\n\n  if (typeof timestampValue === 'string') {\n    const date = new Date(timestampValue);\n    const seconds = Math.floor(date.getTime() / 1000);\n    let nanos = 0;\n\n    if (timestampValue.length > 20) {\n      const nanoString = timestampValue.substring(20, timestampValue.length - 1);\n      const trailingZeroes = 9 - nanoString.length;\n      nanos = Number(nanoString) * Math.pow(10, trailingZeroes);\n    }\n\n    if (isNaN(seconds) || isNaN(nanos)) {\n      argumentName = argumentName || 'timestampValue';\n      throw new Error(`Specify a valid ISO 8601 timestamp for \"${argumentName}\".`);\n    }\n\n    timestampProto = {\n      seconds: seconds || undefined,\n      nanos: nanos || undefined\n    };\n  } else if (timestampValue !== undefined) {\n    validate_1.validateObject('timestampValue', timestampValue);\n    timestampProto = {\n      seconds: timestampValue.seconds || undefined,\n      nanos: timestampValue.nanos || undefined\n    };\n  }\n\n  return timestampProto;\n}\n\nexports.timestampFromJson = timestampFromJson;\n/**\n * Converts a Proto3 JSON 'bytesValue' field into Protobuf JS.\n *\n * @private\n * @param bytesValue The value to convert.\n * @return The value as expected by Protobuf JS.\n */\n\nfunction bytesFromJson(bytesValue) {\n  if (typeof bytesValue === 'string') {\n    return Buffer.from(bytesValue, 'base64');\n  } else {\n    return bytesValue;\n  }\n}\n/**\n * Detects 'valueType' from a Proto3 JSON `firestore.v1.Value` proto.\n *\n * @private\n * @param proto The `firestore.v1.Value` proto.\n * @return The string value for 'valueType'.\n */\n\n\nfunction detectValueType(proto) {\n  if (proto.valueType) {\n    return proto.valueType;\n  }\n\n  const detectedValues = [];\n\n  if (proto.stringValue !== undefined) {\n    detectedValues.push('stringValue');\n  }\n\n  if (proto.booleanValue !== undefined) {\n    detectedValues.push('booleanValue');\n  }\n\n  if (proto.integerValue !== undefined) {\n    detectedValues.push('integerValue');\n  }\n\n  if (proto.doubleValue !== undefined) {\n    detectedValues.push('doubleValue');\n  }\n\n  if (proto.timestampValue !== undefined) {\n    detectedValues.push('timestampValue');\n  }\n\n  if (proto.referenceValue !== undefined) {\n    detectedValues.push('referenceValue');\n  }\n\n  if (proto.arrayValue !== undefined) {\n    detectedValues.push('arrayValue');\n  }\n\n  if (proto.nullValue !== undefined) {\n    detectedValues.push('nullValue');\n  }\n\n  if (proto.mapValue !== undefined) {\n    detectedValues.push('mapValue');\n  }\n\n  if (proto.geoPointValue !== undefined) {\n    detectedValues.push('geoPointValue');\n  }\n\n  if (proto.bytesValue !== undefined) {\n    detectedValues.push('bytesValue');\n  }\n\n  if (detectedValues.length !== 1) {\n    throw new Error(`Unable to infer type value fom '${JSON.stringify(proto)}'.`);\n  }\n\n  return detectedValues[0];\n}\n\nexports.detectValueType = detectValueType;\n/**\n * Converts a `firestore.v1.Value` in Proto3 JSON encoding into the\n * Protobuf JS format expected by this client.\n *\n * @private\n * @param fieldValue The `firestore.v1.Value` in Proto3 JSON format.\n * @return The `firestore.v1.Value` in Protobuf JS format.\n */\n\nfunction valueFromJson(fieldValue) {\n  const valueType = detectValueType(fieldValue);\n\n  switch (valueType) {\n    case 'timestampValue':\n      return {\n        timestampValue: timestampFromJson(fieldValue.timestampValue)\n      };\n\n    case 'bytesValue':\n      return {\n        bytesValue: bytesFromJson(fieldValue.bytesValue)\n      };\n\n    case 'doubleValue':\n      return {\n        doubleValue: Number(fieldValue.doubleValue)\n      };\n\n    case 'arrayValue':\n      {\n        const arrayValue = [];\n\n        if (Array.isArray(fieldValue.arrayValue.values)) {\n          for (const value of fieldValue.arrayValue.values) {\n            arrayValue.push(valueFromJson(value));\n          }\n        }\n\n        return {\n          arrayValue: {\n            values: arrayValue\n          }\n        };\n      }\n\n    case 'mapValue':\n      {\n        const mapValue = {};\n        const fields = fieldValue.mapValue.fields;\n\n        if (fields) {\n          for (const prop of Object.keys(fields)) {\n            mapValue[prop] = valueFromJson(fieldValue.mapValue.fields[prop]);\n          }\n        }\n\n        return {\n          mapValue: {\n            fields: mapValue\n          }\n        };\n      }\n\n    default:\n      return fieldValue;\n  }\n}\n\nexports.valueFromJson = valueFromJson;\n/**\n * Converts a map of IValues in Proto3 JSON encoding into the Protobuf JS format\n * expected by this client. This conversion creates a copy of the underlying\n * fields.\n *\n * @private\n * @param document An object with IValues in Proto3 JSON format.\n * @return The object in Protobuf JS format.\n */\n\nfunction fieldsFromJson(document) {\n  const result = {};\n\n  for (const prop of Object.keys(document)) {\n    result[prop] = valueFromJson(document[prop]);\n  }\n\n  return result;\n}\n\nexports.fieldsFromJson = fieldsFromJson;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/firestore/build/src/convert.js"],"names":["Object","defineProperty","exports","value","validate_1","require","timestampFromJson","timestampValue","argumentName","timestampProto","date","Date","seconds","Math","floor","getTime","nanos","length","nanoString","substring","trailingZeroes","Number","pow","isNaN","Error","undefined","validateObject","bytesFromJson","bytesValue","Buffer","from","detectValueType","proto","valueType","detectedValues","stringValue","push","booleanValue","integerValue","doubleValue","referenceValue","arrayValue","nullValue","mapValue","geoPointValue","JSON","stringify","valueFromJson","fieldValue","Array","isArray","values","fields","prop","keys","fieldsFromJson","document","result"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_1 = require(\"./validate\");\n/*!\n * @module firestore/convert\n * @private\n *\n * This module contains utility functions to convert\n * `firestore.v1.Documents` from Proto3 JSON to their equivalent\n * representation in Protobuf JS. Protobuf JS is the only encoding supported by\n * this client, and dependencies that use Proto3 JSON (such as the Google Cloud\n * Functions SDK) are supported through this conversion and its usage in\n * {@see Firestore#snapshot_}.\n */\n/**\n * Converts an ISO 8601 or google.protobuf.Timestamp proto into Protobuf JS.\n *\n * @private\n * @param timestampValue The value to convert.\n * @param argumentName The argument name to use in the error message if the\n * conversion fails. If omitted, 'timestampValue' is used.\n * @return The value as expected by Protobuf JS or undefined if no input was\n * provided.\n */\nfunction timestampFromJson(timestampValue, argumentName) {\n    let timestampProto;\n    if (typeof timestampValue === 'string') {\n        const date = new Date(timestampValue);\n        const seconds = Math.floor(date.getTime() / 1000);\n        let nanos = 0;\n        if (timestampValue.length > 20) {\n            const nanoString = timestampValue.substring(20, timestampValue.length - 1);\n            const trailingZeroes = 9 - nanoString.length;\n            nanos = Number(nanoString) * Math.pow(10, trailingZeroes);\n        }\n        if (isNaN(seconds) || isNaN(nanos)) {\n            argumentName = argumentName || 'timestampValue';\n            throw new Error(`Specify a valid ISO 8601 timestamp for \"${argumentName}\".`);\n        }\n        timestampProto = {\n            seconds: seconds || undefined,\n            nanos: nanos || undefined,\n        };\n    }\n    else if (timestampValue !== undefined) {\n        validate_1.validateObject('timestampValue', timestampValue);\n        timestampProto = {\n            seconds: timestampValue.seconds || undefined,\n            nanos: timestampValue.nanos || undefined,\n        };\n    }\n    return timestampProto;\n}\nexports.timestampFromJson = timestampFromJson;\n/**\n * Converts a Proto3 JSON 'bytesValue' field into Protobuf JS.\n *\n * @private\n * @param bytesValue The value to convert.\n * @return The value as expected by Protobuf JS.\n */\nfunction bytesFromJson(bytesValue) {\n    if (typeof bytesValue === 'string') {\n        return Buffer.from(bytesValue, 'base64');\n    }\n    else {\n        return bytesValue;\n    }\n}\n/**\n * Detects 'valueType' from a Proto3 JSON `firestore.v1.Value` proto.\n *\n * @private\n * @param proto The `firestore.v1.Value` proto.\n * @return The string value for 'valueType'.\n */\nfunction detectValueType(proto) {\n    if (proto.valueType) {\n        return proto.valueType;\n    }\n    const detectedValues = [];\n    if (proto.stringValue !== undefined) {\n        detectedValues.push('stringValue');\n    }\n    if (proto.booleanValue !== undefined) {\n        detectedValues.push('booleanValue');\n    }\n    if (proto.integerValue !== undefined) {\n        detectedValues.push('integerValue');\n    }\n    if (proto.doubleValue !== undefined) {\n        detectedValues.push('doubleValue');\n    }\n    if (proto.timestampValue !== undefined) {\n        detectedValues.push('timestampValue');\n    }\n    if (proto.referenceValue !== undefined) {\n        detectedValues.push('referenceValue');\n    }\n    if (proto.arrayValue !== undefined) {\n        detectedValues.push('arrayValue');\n    }\n    if (proto.nullValue !== undefined) {\n        detectedValues.push('nullValue');\n    }\n    if (proto.mapValue !== undefined) {\n        detectedValues.push('mapValue');\n    }\n    if (proto.geoPointValue !== undefined) {\n        detectedValues.push('geoPointValue');\n    }\n    if (proto.bytesValue !== undefined) {\n        detectedValues.push('bytesValue');\n    }\n    if (detectedValues.length !== 1) {\n        throw new Error(`Unable to infer type value fom '${JSON.stringify(proto)}'.`);\n    }\n    return detectedValues[0];\n}\nexports.detectValueType = detectValueType;\n/**\n * Converts a `firestore.v1.Value` in Proto3 JSON encoding into the\n * Protobuf JS format expected by this client.\n *\n * @private\n * @param fieldValue The `firestore.v1.Value` in Proto3 JSON format.\n * @return The `firestore.v1.Value` in Protobuf JS format.\n */\nfunction valueFromJson(fieldValue) {\n    const valueType = detectValueType(fieldValue);\n    switch (valueType) {\n        case 'timestampValue':\n            return {\n                timestampValue: timestampFromJson(fieldValue.timestampValue),\n            };\n        case 'bytesValue':\n            return {\n                bytesValue: bytesFromJson(fieldValue.bytesValue),\n            };\n        case 'doubleValue':\n            return {\n                doubleValue: Number(fieldValue.doubleValue),\n            };\n        case 'arrayValue': {\n            const arrayValue = [];\n            if (Array.isArray(fieldValue.arrayValue.values)) {\n                for (const value of fieldValue.arrayValue.values) {\n                    arrayValue.push(valueFromJson(value));\n                }\n            }\n            return {\n                arrayValue: {\n                    values: arrayValue,\n                },\n            };\n        }\n        case 'mapValue': {\n            const mapValue = {};\n            const fields = fieldValue.mapValue.fields;\n            if (fields) {\n                for (const prop of Object.keys(fields)) {\n                    mapValue[prop] = valueFromJson(fieldValue.mapValue.fields[prop]);\n                }\n            }\n            return {\n                mapValue: {\n                    fields: mapValue,\n                },\n            };\n        }\n        default:\n            return fieldValue;\n    }\n}\nexports.valueFromJson = valueFromJson;\n/**\n * Converts a map of IValues in Proto3 JSON encoding into the Protobuf JS format\n * expected by this client. This conversion creates a copy of the underlying\n * fields.\n *\n * @private\n * @param document An object with IValues in Proto3 JSON format.\n * @return The object in Protobuf JS format.\n */\nfunction fieldsFromJson(document) {\n    const result = {};\n    for (const prop of Object.keys(document)) {\n        result[prop] = valueFromJson(document[prop]);\n    }\n    return result;\n}\nexports.fieldsFromJson = fieldsFromJson;\n//# sourceMappingURL=convert.js.map"]},"metadata":{},"sourceType":"script"}