{"ast":null,"code":"/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProjectManagementRequestHandler = exports.assertServerResponse = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar index_1 = require(\"../utils/index\");\n/** Project management backend host and port. */\n\n\nvar PROJECT_MANAGEMENT_HOST_AND_PORT = 'firebase.googleapis.com:443';\n/** Project management backend path. */\n\nvar PROJECT_MANAGEMENT_PATH = '/v1/';\n/** Project management beta backend path. */\n\nvar PROJECT_MANAGEMENT_BETA_PATH = '/v1beta1/';\n/** Project management request header. */\n\nvar PROJECT_MANAGEMENT_HEADERS = {\n  'X-Client-Version': \"Node/Admin/\" + index_1.getSdkVersion()\n};\n/** Project management request timeout duration in milliseconds. */\n\nvar PROJECT_MANAGEMENT_TIMEOUT_MILLIS = 10000;\nvar LIST_APPS_MAX_PAGE_SIZE = 100;\nvar CERT_TYPE_API_MAP = {\n  sha1: 'SHA_1',\n  sha256: 'SHA_256'\n};\n\nfunction assertServerResponse(condition, responseData, message) {\n  if (!condition) {\n    throw new error_1.FirebaseProjectManagementError('invalid-server-response', message + \" Response data: \" + JSON.stringify(responseData, null, 2));\n  }\n}\n\nexports.assertServerResponse = assertServerResponse;\n/**\n * Class that provides mechanism to send requests to the Firebase project management backend\n * endpoints.\n *\n * @private\n */\n\nvar ProjectManagementRequestHandler =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n   * @constructor\n   */\n  function ProjectManagementRequestHandler(app) {\n    this.baseUrl = \"https://\" + PROJECT_MANAGEMENT_HOST_AND_PORT + PROJECT_MANAGEMENT_PATH;\n    this.baseBetaUrl = \"https://\" + PROJECT_MANAGEMENT_HOST_AND_PORT + PROJECT_MANAGEMENT_BETA_PATH;\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n\n  ProjectManagementRequestHandler.wrapAndRethrowHttpError = function (errStatusCode, errText) {\n    var errorCode;\n    var errorMessage;\n\n    switch (errStatusCode) {\n      case 400:\n        errorCode = 'invalid-argument';\n        errorMessage = 'Invalid argument provided.';\n        break;\n\n      case 401:\n      case 403:\n        errorCode = 'authentication-error';\n        errorMessage = 'An error occurred when trying to authenticate. Make sure the credential ' + 'used to authenticate this SDK has the proper permissions. See ' + 'https://firebase.google.com/docs/admin/setup for setup instructions.';\n        break;\n\n      case 404:\n        errorCode = 'not-found';\n        errorMessage = 'The specified entity could not be found.';\n        break;\n\n      case 409:\n        errorCode = 'already-exists';\n        errorMessage = 'The specified entity already exists.';\n        break;\n\n      case 500:\n        errorCode = 'internal-error';\n        errorMessage = 'An internal error has occurred. Please retry the request.';\n        break;\n\n      case 503:\n        errorCode = 'service-unavailable';\n        errorMessage = 'The server could not process the request in time. See the error ' + 'documentation for more details.';\n        break;\n\n      default:\n        errorCode = 'unknown-error';\n        errorMessage = 'An unknown server error was returned.';\n    }\n\n    if (!errText) {\n      errText = '<missing>';\n    }\n\n    throw new error_1.FirebaseProjectManagementError(errorCode, errorMessage + \" Status code: \" + errStatusCode + \". Raw server response: \\\"\" + errText + \"\\\".\");\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the project whose Android\n   *     apps you want to list.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.listAndroidApps = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName + \"/androidApps?page_size=\" + LIST_APPS_MAX_PAGE_SIZE,\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the project whose iOS apps\n   *     you want to list.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.listIosApps = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName + \"/iosApps?page_size=\" + LIST_APPS_MAX_PAGE_SIZE,\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the project whose iOS apps\n   *     you want to list.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.listAppMetadata = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName + \":searchApps?page_size=\" + LIST_APPS_MAX_PAGE_SIZE,\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the project that you want\n   *     to create the Android app within.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.createAndroidApp = function (parentResourceName, packageName, displayName) {\n    var _this = this;\n\n    var requestData = {\n      packageName: packageName\n    };\n\n    if (validator.isNonEmptyString(displayName)) {\n      requestData.displayName = displayName;\n    }\n\n    return this.invokeRequestHandler('POST', parentResourceName + \"/androidApps\", requestData, 'v1beta1').then(function (responseData) {\n      assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp\\'s responseData must be a non-null object.');\n      assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createAndroidApp\\'s responseData.name must be a non-empty string.');\n      return _this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n    });\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the project that you want\n   *     to create the iOS app within.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.createIosApp = function (parentResourceName, bundleId, displayName) {\n    var _this = this;\n\n    var requestData = {\n      bundleId: bundleId\n    };\n\n    if (validator.isNonEmptyString(displayName)) {\n      requestData.displayName = displayName;\n    }\n\n    return this.invokeRequestHandler('POST', parentResourceName + \"/iosApps\", requestData, 'v1beta1').then(function (responseData) {\n      assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp\\'s responseData must be a non-null object.');\n      assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createIosApp\\'s responseData.name must be a non-empty string.');\n      return _this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n    });\n  };\n  /**\n   * @param {string} resourceName Fully-qualified resource name of the entity whose display name you\n   *     want to set.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.setDisplayName = function (resourceName, newDisplayName) {\n    var requestData = {\n      displayName: newDisplayName\n    };\n    return this.invokeRequestHandler('PATCH', resourceName + \"?update_mask=display_name\", requestData, 'v1beta1').then(function () {\n      return undefined;\n    });\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the Android app whose SHA\n   *     certificates you want to get.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.getAndroidShaCertificates = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName + \"/sha\",\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the Android app that you\n   *     want to add the given SHA certificate to.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.addAndroidShaCertificate = function (parentResourceName, certificate) {\n    var requestData = {\n      shaHash: certificate.shaHash,\n      certType: CERT_TYPE_API_MAP[certificate.certType]\n    };\n    return this.invokeRequestHandler('POST', parentResourceName + \"/sha\", requestData, 'v1beta1').then(function () {\n      return undefined;\n    });\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the app whose config you\n   *     want to get.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.getConfig = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName + \"/config\",\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the entity that you want to\n   *     get.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.getResource = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName,\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} resourceName Fully-qualified resource name of the entity that you want to\n   *     delete.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.deleteResource = function (resourceName) {\n    return this.invokeRequestHandler('DELETE', resourceName,\n    /* requestData */\n    null, 'v1beta1').then(function () {\n      return undefined;\n    });\n  };\n\n  ProjectManagementRequestHandler.prototype.pollRemoteOperationWithExponentialBackoff = function (operationResourceName) {\n    var _this = this;\n\n    var poller = new api_request_1.ExponentialBackoffPoller();\n    return poller.poll(function () {\n      return _this.invokeRequestHandler('GET', operationResourceName,\n      /* requestData */\n      null).then(function (responseData) {\n        if (responseData.error) {\n          var errStatusCode = responseData.error.code || 500;\n          var errText = responseData.error.message || JSON.stringify(responseData.error);\n          ProjectManagementRequestHandler.wrapAndRethrowHttpError(errStatusCode, errText);\n        }\n\n        if (!responseData.done) {\n          // Continue polling.\n          return null;\n        } // Polling complete. Resolve with operation response JSON.\n\n\n        return responseData.response;\n      });\n    });\n  };\n  /**\n   * Invokes the request handler with the provided request data.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.invokeRequestHandler = function (method, path, requestData, apiVersion) {\n    if (apiVersion === void 0) {\n      apiVersion = 'v1';\n    }\n\n    var baseUrlToUse = apiVersion === 'v1' ? this.baseUrl : this.baseBetaUrl;\n    var request = {\n      method: method,\n      url: \"\" + baseUrlToUse + path,\n      headers: PROJECT_MANAGEMENT_HEADERS,\n      data: requestData,\n      timeout: PROJECT_MANAGEMENT_TIMEOUT_MILLIS\n    };\n    return this.httpClient.send(request).then(function (response) {\n      // Send non-JSON responses to the catch() below, where they will be treated as errors.\n      if (!response.isJson()) {\n        throw new api_request_1.HttpError(response);\n      }\n\n      return response.data;\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        ProjectManagementRequestHandler.wrapAndRethrowHttpError(err.response.status, err.response.text);\n      }\n\n      throw err;\n    });\n  };\n\n  return ProjectManagementRequestHandler;\n}();\n\nexports.ProjectManagementRequestHandler = ProjectManagementRequestHandler;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/firebase-admin/lib/project-management/project-management-api-request-internal.js"],"names":["Object","defineProperty","exports","value","ProjectManagementRequestHandler","assertServerResponse","api_request_1","require","error_1","validator","index_1","PROJECT_MANAGEMENT_HOST_AND_PORT","PROJECT_MANAGEMENT_PATH","PROJECT_MANAGEMENT_BETA_PATH","PROJECT_MANAGEMENT_HEADERS","getSdkVersion","PROJECT_MANAGEMENT_TIMEOUT_MILLIS","LIST_APPS_MAX_PAGE_SIZE","CERT_TYPE_API_MAP","sha1","sha256","condition","responseData","message","FirebaseProjectManagementError","JSON","stringify","app","baseUrl","baseBetaUrl","httpClient","AuthorizedHttpClient","wrapAndRethrowHttpError","errStatusCode","errText","errorCode","errorMessage","prototype","listAndroidApps","parentResourceName","invokeRequestHandler","listIosApps","listAppMetadata","createAndroidApp","packageName","displayName","_this","requestData","isNonEmptyString","then","isNonNullObject","name","pollRemoteOperationWithExponentialBackoff","createIosApp","bundleId","setDisplayName","resourceName","newDisplayName","undefined","getAndroidShaCertificates","addAndroidShaCertificate","certificate","shaHash","certType","getConfig","getResource","deleteResource","operationResourceName","poller","ExponentialBackoffPoller","poll","error","code","done","response","method","path","apiVersion","baseUrlToUse","request","url","headers","data","timeout","send","isJson","HttpError","catch","err","status","text"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectManagementRequestHandler = exports.assertServerResponse = void 0;\nvar api_request_1 = require(\"../utils/api-request\");\nvar error_1 = require(\"../utils/error\");\nvar validator = require(\"../utils/validator\");\nvar index_1 = require(\"../utils/index\");\n/** Project management backend host and port. */\nvar PROJECT_MANAGEMENT_HOST_AND_PORT = 'firebase.googleapis.com:443';\n/** Project management backend path. */\nvar PROJECT_MANAGEMENT_PATH = '/v1/';\n/** Project management beta backend path. */\nvar PROJECT_MANAGEMENT_BETA_PATH = '/v1beta1/';\n/** Project management request header. */\nvar PROJECT_MANAGEMENT_HEADERS = {\n    'X-Client-Version': \"Node/Admin/\" + index_1.getSdkVersion(),\n};\n/** Project management request timeout duration in milliseconds. */\nvar PROJECT_MANAGEMENT_TIMEOUT_MILLIS = 10000;\nvar LIST_APPS_MAX_PAGE_SIZE = 100;\nvar CERT_TYPE_API_MAP = {\n    sha1: 'SHA_1',\n    sha256: 'SHA_256',\n};\nfunction assertServerResponse(condition, responseData, message) {\n    if (!condition) {\n        throw new error_1.FirebaseProjectManagementError('invalid-server-response', message + \" Response data: \" + JSON.stringify(responseData, null, 2));\n    }\n}\nexports.assertServerResponse = assertServerResponse;\n/**\n * Class that provides mechanism to send requests to the Firebase project management backend\n * endpoints.\n *\n * @private\n */\nvar ProjectManagementRequestHandler = /** @class */ (function () {\n    /**\n     * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n     * @constructor\n     */\n    function ProjectManagementRequestHandler(app) {\n        this.baseUrl = \"https://\" + PROJECT_MANAGEMENT_HOST_AND_PORT + PROJECT_MANAGEMENT_PATH;\n        this.baseBetaUrl = \"https://\" + PROJECT_MANAGEMENT_HOST_AND_PORT + PROJECT_MANAGEMENT_BETA_PATH;\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    ProjectManagementRequestHandler.wrapAndRethrowHttpError = function (errStatusCode, errText) {\n        var errorCode;\n        var errorMessage;\n        switch (errStatusCode) {\n            case 400:\n                errorCode = 'invalid-argument';\n                errorMessage = 'Invalid argument provided.';\n                break;\n            case 401:\n            case 403:\n                errorCode = 'authentication-error';\n                errorMessage = 'An error occurred when trying to authenticate. Make sure the credential '\n                    + 'used to authenticate this SDK has the proper permissions. See '\n                    + 'https://firebase.google.com/docs/admin/setup for setup instructions.';\n                break;\n            case 404:\n                errorCode = 'not-found';\n                errorMessage = 'The specified entity could not be found.';\n                break;\n            case 409:\n                errorCode = 'already-exists';\n                errorMessage = 'The specified entity already exists.';\n                break;\n            case 500:\n                errorCode = 'internal-error';\n                errorMessage = 'An internal error has occurred. Please retry the request.';\n                break;\n            case 503:\n                errorCode = 'service-unavailable';\n                errorMessage = 'The server could not process the request in time. See the error '\n                    + 'documentation for more details.';\n                break;\n            default:\n                errorCode = 'unknown-error';\n                errorMessage = 'An unknown server error was returned.';\n        }\n        if (!errText) {\n            errText = '<missing>';\n        }\n        throw new error_1.FirebaseProjectManagementError(errorCode, errorMessage + \" Status code: \" + errStatusCode + \". Raw server response: \\\"\" + errText + \"\\\".\");\n    };\n    /**\n     * @param {string} parentResourceName Fully-qualified resource name of the project whose Android\n     *     apps you want to list.\n     */\n    ProjectManagementRequestHandler.prototype.listAndroidApps = function (parentResourceName) {\n        return this.invokeRequestHandler('GET', parentResourceName + \"/androidApps?page_size=\" + LIST_APPS_MAX_PAGE_SIZE, \n        /* requestData */ null, 'v1beta1');\n    };\n    /**\n     * @param {string} parentResourceName Fully-qualified resource name of the project whose iOS apps\n     *     you want to list.\n     */\n    ProjectManagementRequestHandler.prototype.listIosApps = function (parentResourceName) {\n        return this.invokeRequestHandler('GET', parentResourceName + \"/iosApps?page_size=\" + LIST_APPS_MAX_PAGE_SIZE, \n        /* requestData */ null, 'v1beta1');\n    };\n    /**\n     * @param {string} parentResourceName Fully-qualified resource name of the project whose iOS apps\n     *     you want to list.\n     */\n    ProjectManagementRequestHandler.prototype.listAppMetadata = function (parentResourceName) {\n        return this.invokeRequestHandler('GET', parentResourceName + \":searchApps?page_size=\" + LIST_APPS_MAX_PAGE_SIZE, \n        /* requestData */ null, 'v1beta1');\n    };\n    /**\n     * @param {string} parentResourceName Fully-qualified resource name of the project that you want\n     *     to create the Android app within.\n     */\n    ProjectManagementRequestHandler.prototype.createAndroidApp = function (parentResourceName, packageName, displayName) {\n        var _this = this;\n        var requestData = {\n            packageName: packageName,\n        };\n        if (validator.isNonEmptyString(displayName)) {\n            requestData.displayName = displayName;\n        }\n        return this\n            .invokeRequestHandler('POST', parentResourceName + \"/androidApps\", requestData, 'v1beta1')\n            .then(function (responseData) {\n            assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp\\'s responseData must be a non-null object.');\n            assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createAndroidApp\\'s responseData.name must be a non-empty string.');\n            return _this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n        });\n    };\n    /**\n     * @param {string} parentResourceName Fully-qualified resource name of the project that you want\n     *     to create the iOS app within.\n     */\n    ProjectManagementRequestHandler.prototype.createIosApp = function (parentResourceName, bundleId, displayName) {\n        var _this = this;\n        var requestData = {\n            bundleId: bundleId,\n        };\n        if (validator.isNonEmptyString(displayName)) {\n            requestData.displayName = displayName;\n        }\n        return this\n            .invokeRequestHandler('POST', parentResourceName + \"/iosApps\", requestData, 'v1beta1')\n            .then(function (responseData) {\n            assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp\\'s responseData must be a non-null object.');\n            assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createIosApp\\'s responseData.name must be a non-empty string.');\n            return _this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n        });\n    };\n    /**\n     * @param {string} resourceName Fully-qualified resource name of the entity whose display name you\n     *     want to set.\n     */\n    ProjectManagementRequestHandler.prototype.setDisplayName = function (resourceName, newDisplayName) {\n        var requestData = {\n            displayName: newDisplayName,\n        };\n        return this\n            .invokeRequestHandler('PATCH', resourceName + \"?update_mask=display_name\", requestData, 'v1beta1')\n            .then(function () { return undefined; });\n    };\n    /**\n     * @param {string} parentResourceName Fully-qualified resource name of the Android app whose SHA\n     *     certificates you want to get.\n     */\n    ProjectManagementRequestHandler.prototype.getAndroidShaCertificates = function (parentResourceName) {\n        return this.invokeRequestHandler('GET', parentResourceName + \"/sha\", /* requestData */ null, 'v1beta1');\n    };\n    /**\n     * @param {string} parentResourceName Fully-qualified resource name of the Android app that you\n     *     want to add the given SHA certificate to.\n     */\n    ProjectManagementRequestHandler.prototype.addAndroidShaCertificate = function (parentResourceName, certificate) {\n        var requestData = {\n            shaHash: certificate.shaHash,\n            certType: CERT_TYPE_API_MAP[certificate.certType],\n        };\n        return this\n            .invokeRequestHandler('POST', parentResourceName + \"/sha\", requestData, 'v1beta1')\n            .then(function () { return undefined; });\n    };\n    /**\n     * @param {string} parentResourceName Fully-qualified resource name of the app whose config you\n     *     want to get.\n     */\n    ProjectManagementRequestHandler.prototype.getConfig = function (parentResourceName) {\n        return this.invokeRequestHandler('GET', parentResourceName + \"/config\", /* requestData */ null, 'v1beta1');\n    };\n    /**\n     * @param {string} parentResourceName Fully-qualified resource name of the entity that you want to\n     *     get.\n     */\n    ProjectManagementRequestHandler.prototype.getResource = function (parentResourceName) {\n        return this.invokeRequestHandler('GET', parentResourceName, /* requestData */ null, 'v1beta1');\n    };\n    /**\n     * @param {string} resourceName Fully-qualified resource name of the entity that you want to\n     *     delete.\n     */\n    ProjectManagementRequestHandler.prototype.deleteResource = function (resourceName) {\n        return this\n            .invokeRequestHandler('DELETE', resourceName, /* requestData */ null, 'v1beta1')\n            .then(function () { return undefined; });\n    };\n    ProjectManagementRequestHandler.prototype.pollRemoteOperationWithExponentialBackoff = function (operationResourceName) {\n        var _this = this;\n        var poller = new api_request_1.ExponentialBackoffPoller();\n        return poller.poll(function () {\n            return _this.invokeRequestHandler('GET', operationResourceName, /* requestData */ null)\n                .then(function (responseData) {\n                if (responseData.error) {\n                    var errStatusCode = responseData.error.code || 500;\n                    var errText = responseData.error.message || JSON.stringify(responseData.error);\n                    ProjectManagementRequestHandler.wrapAndRethrowHttpError(errStatusCode, errText);\n                }\n                if (!responseData.done) {\n                    // Continue polling.\n                    return null;\n                }\n                // Polling complete. Resolve with operation response JSON.\n                return responseData.response;\n            });\n        });\n    };\n    /**\n     * Invokes the request handler with the provided request data.\n     */\n    ProjectManagementRequestHandler.prototype.invokeRequestHandler = function (method, path, requestData, apiVersion) {\n        if (apiVersion === void 0) { apiVersion = 'v1'; }\n        var baseUrlToUse = (apiVersion === 'v1') ? this.baseUrl : this.baseBetaUrl;\n        var request = {\n            method: method,\n            url: \"\" + baseUrlToUse + path,\n            headers: PROJECT_MANAGEMENT_HEADERS,\n            data: requestData,\n            timeout: PROJECT_MANAGEMENT_TIMEOUT_MILLIS,\n        };\n        return this.httpClient.send(request)\n            .then(function (response) {\n            // Send non-JSON responses to the catch() below, where they will be treated as errors.\n            if (!response.isJson()) {\n                throw new api_request_1.HttpError(response);\n            }\n            return response.data;\n        })\n            .catch(function (err) {\n            if (err instanceof api_request_1.HttpError) {\n                ProjectManagementRequestHandler.wrapAndRethrowHttpError(err.response.status, err.response.text);\n            }\n            throw err;\n        });\n    };\n    return ProjectManagementRequestHandler;\n}());\nexports.ProjectManagementRequestHandler = ProjectManagementRequestHandler;\n"]},"metadata":{},"sourceType":"script"}