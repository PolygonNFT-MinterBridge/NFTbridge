{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeCrypto = void 0;\n\nconst crypto = require(\"crypto\");\n\nclass NodeCrypto {\n  async sha256DigestBase64(str) {\n    return crypto.createHash('sha256').update(str).digest('base64');\n  }\n\n  randomBytesBase64(count) {\n    return crypto.randomBytes(count).toString('base64');\n  }\n\n  async verify(pubkey, data, signature) {\n    const verifier = crypto.createVerify('sha256');\n    verifier.update(data);\n    verifier.end();\n    return verifier.verify(pubkey, signature, 'base64');\n  }\n\n  async sign(privateKey, data) {\n    const signer = crypto.createSign('RSA-SHA256');\n    signer.update(data);\n    signer.end();\n    return signer.sign(privateKey, 'base64');\n  }\n\n  decodeBase64StringUtf8(base64) {\n    return Buffer.from(base64, 'base64').toString('utf-8');\n  }\n\n  encodeBase64StringUtf8(text) {\n    return Buffer.from(text, 'utf-8').toString('base64');\n  }\n  /**\n   * Computes the SHA-256 hash of the provided string.\n   * @param str The plain text string to hash.\n   * @return A promise that resolves with the SHA-256 hash of the provided\n   *   string in hexadecimal encoding.\n   */\n\n\n  async sha256DigestHex(str) {\n    return crypto.createHash('sha256').update(str).digest('hex');\n  }\n  /**\n   * Computes the HMAC hash of a message using the provided crypto key and the\n   * SHA-256 algorithm.\n   * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n   * @param msg The plain text message.\n   * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n   *   format.\n   */\n\n\n  async signWithHmacSha256(key, msg) {\n    const cryptoKey = typeof key === 'string' ? key : toBuffer(key);\n    return toArrayBuffer(crypto.createHmac('sha256', cryptoKey).update(msg).digest());\n  }\n\n}\n\nexports.NodeCrypto = NodeCrypto;\n/**\n * Converts a Node.js Buffer to an ArrayBuffer.\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\n * @param buffer The Buffer input to covert.\n * @return The ArrayBuffer representation of the input.\n */\n\nfunction toArrayBuffer(buffer) {\n  return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\n * Converts an ArrayBuffer to a Node.js Buffer.\n * @param arrayBuffer The ArrayBuffer input to covert.\n * @return The Buffer representation of the input.\n */\n\n\nfunction toBuffer(arrayBuffer) {\n  return Buffer.from(arrayBuffer);\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/common/node_modules/google-auth-library/build/src/crypto/node/crypto.js"],"names":["Object","defineProperty","exports","value","NodeCrypto","crypto","require","sha256DigestBase64","str","createHash","update","digest","randomBytesBase64","count","randomBytes","toString","verify","pubkey","data","signature","verifier","createVerify","end","sign","privateKey","signer","createSign","decodeBase64StringUtf8","base64","Buffer","from","encodeBase64StringUtf8","text","sha256DigestHex","signWithHmacSha256","key","msg","cryptoKey","toBuffer","toArrayBuffer","createHmac","buffer","slice","byteOffset","byteLength","arrayBuffer"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeCrypto = void 0;\nconst crypto = require(\"crypto\");\nclass NodeCrypto {\n    async sha256DigestBase64(str) {\n        return crypto.createHash('sha256').update(str).digest('base64');\n    }\n    randomBytesBase64(count) {\n        return crypto.randomBytes(count).toString('base64');\n    }\n    async verify(pubkey, data, signature) {\n        const verifier = crypto.createVerify('sha256');\n        verifier.update(data);\n        verifier.end();\n        return verifier.verify(pubkey, signature, 'base64');\n    }\n    async sign(privateKey, data) {\n        const signer = crypto.createSign('RSA-SHA256');\n        signer.update(data);\n        signer.end();\n        return signer.sign(privateKey, 'base64');\n    }\n    decodeBase64StringUtf8(base64) {\n        return Buffer.from(base64, 'base64').toString('utf-8');\n    }\n    encodeBase64StringUtf8(text) {\n        return Buffer.from(text, 'utf-8').toString('base64');\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n    async sha256DigestHex(str) {\n        return crypto.createHash('sha256').update(str).digest('hex');\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n    async signWithHmacSha256(key, msg) {\n        const cryptoKey = typeof key === 'string' ? key : toBuffer(key);\n        return toArrayBuffer(crypto.createHmac('sha256', cryptoKey).update(msg).digest());\n    }\n}\nexports.NodeCrypto = NodeCrypto;\n/**\n * Converts a Node.js Buffer to an ArrayBuffer.\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\n * @param buffer The Buffer input to covert.\n * @return The ArrayBuffer representation of the input.\n */\nfunction toArrayBuffer(buffer) {\n    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\n * Converts an ArrayBuffer to a Node.js Buffer.\n * @param arrayBuffer The ArrayBuffer input to covert.\n * @return The Buffer representation of the input.\n */\nfunction toBuffer(arrayBuffer) {\n    return Buffer.from(arrayBuffer);\n}\n//# sourceMappingURL=crypto.js.map"]},"metadata":{},"sourceType":"script"}