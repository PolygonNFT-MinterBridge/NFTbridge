{"ast":null,"code":"\"use strict\";\n\nvar protobuf = module.exports = require(\"./index-minimal\");\n\nprotobuf.build = \"light\";\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\n\nfunction load(filename, root, callback) {\n  if (typeof root === \"function\") {\n    callback = root;\n    root = new protobuf.Root();\n  } else if (!root) root = new protobuf.Root();\n\n  return root.load(filename, callback);\n}\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\n\nprotobuf.load = load;\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\n\nfunction loadSync(filename, root) {\n  if (!root) root = new protobuf.Root();\n  return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync; // Serialization\n\nprotobuf.encoder = require(\"./encoder\");\nprotobuf.decoder = require(\"./decoder\");\nprotobuf.verifier = require(\"./verifier\");\nprotobuf.converter = require(\"./converter\"); // Reflection\n\nprotobuf.ReflectionObject = require(\"./object\");\nprotobuf.Namespace = require(\"./namespace\");\nprotobuf.Root = require(\"./root\");\nprotobuf.Enum = require(\"./enum\");\nprotobuf.Type = require(\"./type\");\nprotobuf.Field = require(\"./field\");\nprotobuf.OneOf = require(\"./oneof\");\nprotobuf.MapField = require(\"./mapfield\");\nprotobuf.Service = require(\"./service\");\nprotobuf.Method = require(\"./method\"); // Runtime\n\nprotobuf.Message = require(\"./message\");\nprotobuf.wrappers = require(\"./wrappers\"); // Utility\n\nprotobuf.types = require(\"./types\");\nprotobuf.util = require(\"./util\"); // Set up possibly cyclic reflection dependencies\n\nprotobuf.ReflectionObject._configure(protobuf.Root);\n\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\n\nprotobuf.Root._configure(protobuf.Type);\n\nprotobuf.Field._configure(protobuf.Type);","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/protobufjs/src/index-light.js"],"names":["protobuf","module","exports","require","build","load","filename","root","callback","Root","loadSync","encoder","decoder","verifier","converter","ReflectionObject","Namespace","Enum","Type","Field","OneOf","MapField","Service","Method","Message","wrappers","types","util","_configure"],"mappings":"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","sourcesContent":["\"use strict\";\nvar protobuf = module.exports = require(\"./index-minimal\");\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root)\n        root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n    if (!root)\n        root = new protobuf.Root();\n    return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder          = require(\"./encoder\");\nprotobuf.decoder          = require(\"./decoder\");\nprotobuf.verifier         = require(\"./verifier\");\nprotobuf.converter        = require(\"./converter\");\n\n// Reflection\nprotobuf.ReflectionObject = require(\"./object\");\nprotobuf.Namespace        = require(\"./namespace\");\nprotobuf.Root             = require(\"./root\");\nprotobuf.Enum             = require(\"./enum\");\nprotobuf.Type             = require(\"./type\");\nprotobuf.Field            = require(\"./field\");\nprotobuf.OneOf            = require(\"./oneof\");\nprotobuf.MapField         = require(\"./mapfield\");\nprotobuf.Service          = require(\"./service\");\nprotobuf.Method           = require(\"./method\");\n\n// Runtime\nprotobuf.Message          = require(\"./message\");\nprotobuf.wrappers         = require(\"./wrappers\");\n\n// Utility\nprotobuf.types            = require(\"./types\");\nprotobuf.util             = require(\"./util\");\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n"]},"metadata":{},"sourceType":"script"}