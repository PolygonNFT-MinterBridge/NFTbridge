{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Root; // extends Namespace\n\nvar Namespace = require(\"./namespace\");\n\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field = require(\"./field\"),\n    Enum = require(\"./enum\"),\n    OneOf = require(\"./oneof\"),\n    util = require(\"./util\");\n\nvar Type, // cyclic\nparse, // might be excluded\ncommon; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\n\nfunction Root(options) {\n  Namespace.call(this, \"\", options);\n  /**\n   * Deferred extension fields.\n   * @type {Field[]}\n   */\n\n  this.deferred = [];\n  /**\n   * Resolved file names of loaded files.\n   * @type {string[]}\n   */\n\n  this.files = [];\n}\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\n\n\nRoot.fromJSON = function fromJSON(json, root) {\n  if (!root) root = new Root();\n  if (json.options) root.setOptions(json.options);\n  return root.addJSON(json.nested);\n};\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\n\n\nRoot.prototype.resolvePath = util.path.resolve;\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */\n\nRoot.prototype.fetch = util.fetch; // A symbol-like function to safely signal synchronous loading\n\n/* istanbul ignore next */\n\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\n\n\nRoot.prototype.load = function load(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = undefined;\n  }\n\n  var self = this;\n  if (!callback) return util.asPromise(load, self, filename, options);\n  var sync = callback === SYNC; // undocumented\n  // Finishes loading by calling the callback (exactly once)\n\n  function finish(err, root) {\n    /* istanbul ignore if */\n    if (!callback) return;\n    var cb = callback;\n    callback = null;\n    if (sync) throw err;\n    cb(err, root);\n  } // Bundled definition existence checking\n\n\n  function getBundledFileName(filename) {\n    var idx = filename.lastIndexOf(\"google/protobuf/\");\n\n    if (idx > -1) {\n      var altname = filename.substring(idx);\n      if (altname in common) return altname;\n    }\n\n    return null;\n  } // Processes a single file\n\n\n  function process(filename, source) {\n    try {\n      if (util.isString(source) && source.charAt(0) === \"{\") source = JSON.parse(source);\n      if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {\n        parse.filename = filename;\n        var parsed = parse(source, self, options),\n            resolved,\n            i = 0;\n        if (parsed.imports) for (; i < parsed.imports.length; ++i) if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i])) fetch(resolved);\n        if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);\n      }\n    } catch (err) {\n      finish(err);\n    }\n\n    if (!sync && !queued) finish(null, self); // only once anyway\n  } // Fetches a single file\n\n\n  function fetch(filename, weak) {\n    // Skip if already loaded / attempted\n    if (self.files.indexOf(filename) > -1) return;\n    self.files.push(filename); // Shortcut bundled definitions\n\n    if (filename in common) {\n      if (sync) process(filename, common[filename]);else {\n        ++queued;\n        setTimeout(function () {\n          --queued;\n          process(filename, common[filename]);\n        });\n      }\n      return;\n    } // Otherwise fetch from disk or network\n\n\n    if (sync) {\n      var source;\n\n      try {\n        source = util.fs.readFileSync(filename).toString(\"utf8\");\n      } catch (err) {\n        if (!weak) finish(err);\n        return;\n      }\n\n      process(filename, source);\n    } else {\n      ++queued;\n      self.fetch(filename, function (err, source) {\n        --queued;\n        /* istanbul ignore if */\n\n        if (!callback) return; // terminated meanwhile\n\n        if (err) {\n          /* istanbul ignore else */\n          if (!weak) finish(err);else if (!queued) // can't be covered reliably\n            finish(null, self);\n          return;\n        }\n\n        process(filename, source);\n      });\n    }\n  }\n\n  var queued = 0; // Assembling the root namespace doesn't require working type\n  // references anymore, so we can load everything in parallel\n\n  if (util.isString(filename)) filename = [filename];\n\n  for (var i = 0, resolved; i < filename.length; ++i) if (resolved = self.resolvePath(\"\", filename[i])) fetch(resolved);\n\n  if (sync) return self;\n  if (!queued) finish(null, self);\n  return undefined;\n}; // function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\n\n\nRoot.prototype.loadSync = function loadSync(filename, options) {\n  if (!util.isNode) throw Error(\"not supported\");\n  return this.load(filename, options, SYNC);\n};\n/**\n * @override\n */\n\n\nRoot.prototype.resolveAll = function resolveAll() {\n  if (this.deferred.length) throw Error(\"unresolvable extensions: \" + this.deferred.map(function (field) {\n    return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n  }).join(\", \"));\n  return Namespace.prototype.resolveAll.call(this);\n}; // only uppercased (and thus conflict-free) children are exposed, see below\n\n\nvar exposeRe = /^[A-Z]/;\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\n\nfunction tryHandleExtension(root, field) {\n  var extendedType = field.parent.lookup(field.extend);\n\n  if (extendedType) {\n    var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n    sisterField.declaringField = field;\n    field.extensionField = sisterField;\n    extendedType.add(sisterField);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\n\n\nRoot.prototype._handleAdd = function _handleAdd(object) {\n  if (object instanceof Field) {\n    if (\n    /* an extension field (implies not part of a oneof) */\n    object.extend !== undefined &&\n    /* not already handled */\n    !object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n  } else if (!(object instanceof OneOf))\n    /* everything else is a namespace */\n    {\n      if (object instanceof Type) // Try to handle any deferred extensions\n        for (var i = 0; i < this.deferred.length;) if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;\n\n      for (var j = 0; j <\n      /* initializes */\n      object.nestedArray.length; ++j) // recurse into the namespace\n      this._handleAdd(object._nestedArray[j]);\n\n      if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n    } // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n  // properties of namespaces just like static code does. This allows using a .d.ts generated for\n  // a static module with reflection-based solutions where the condition is met.\n\n};\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\n\n\nRoot.prototype._handleRemove = function _handleRemove(object) {\n  if (object instanceof Field) {\n    if (\n    /* an extension field */\n    object.extend !== undefined) {\n      if (\n      /* already handled */\n      object.extensionField) {\n        // remove its sister field\n        object.extensionField.parent.remove(object.extensionField);\n        object.extensionField = null;\n      } else {\n        // cancel the extension\n        var index = this.deferred.indexOf(object);\n        /* istanbul ignore else */\n\n        if (index > -1) this.deferred.splice(index, 1);\n      }\n    }\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n  } else if (object instanceof Namespace) {\n    for (var i = 0; i <\n    /* initializes */\n    object.nestedArray.length; ++i) // recurse into the namespace\n    this._handleRemove(object._nestedArray[i]);\n\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n  }\n}; // Sets up cyclic dependencies (called in index-light)\n\n\nRoot._configure = function (Type_, parse_, common_) {\n  Type = Type_;\n  parse = parse_;\n  common = common_;\n};","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/protobufjs/src/root.js"],"names":["module","exports","Root","Namespace","require","prototype","Object","create","constructor","className","Field","Enum","OneOf","util","Type","parse","common","options","call","deferred","files","fromJSON","json","root","setOptions","addJSON","nested","resolvePath","path","resolve","fetch","SYNC","load","filename","callback","undefined","self","asPromise","sync","finish","err","cb","getBundledFileName","idx","lastIndexOf","altname","substring","process","source","isString","charAt","JSON","parsed","resolved","i","imports","length","weakImports","queued","weak","indexOf","push","setTimeout","fs","readFileSync","toString","loadSync","isNode","Error","resolveAll","map","field","extend","parent","fullName","join","exposeRe","tryHandleExtension","extendedType","lookup","sisterField","id","type","rule","declaringField","extensionField","add","_handleAdd","object","test","name","values","splice","j","nestedArray","_nestedArray","_handleRemove","remove","index","_configure","Type_","parse_","common_"],"mappings":"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","sourcesContent":["\"use strict\";\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field   = require(\"./field\"),\n    Enum    = require(\"./enum\"),\n    OneOf   = require(\"./oneof\"),\n    util    = require(\"./util\");\n\nvar Type,   // cyclic\n    parse,  // might be excluded\n    common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n    Namespace.call(this, \"\", options);\n\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */\n    this.deferred = [];\n\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */\n    this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n    if (!root)\n        root = new Root();\n    if (json.options)\n        root.setOptions(json.options);\n    return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.fetch = util.fetch;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback)\n        return util.asPromise(load, self, filename, options);\n\n    var sync = callback === SYNC; // undocumented\n\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        /* istanbul ignore if */\n        if (!callback)\n            return;\n        var cb = callback;\n        callback = null;\n        if (sync)\n            throw err;\n        cb(err, root);\n    }\n\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common) return altname;\n        }\n        return null;\n    }\n\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\")\n                source = JSON.parse(source);\n            if (!util.isString(source))\n                self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options),\n                    resolved,\n                    i = 0;\n                if (parsed.imports)\n                    for (; i < parsed.imports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))\n                            fetch(resolved);\n                if (parsed.weakImports)\n                    for (i = 0; i < parsed.weakImports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))\n                            fetch(resolved, true);\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued)\n            finish(null, self); // only once anyway\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak) {\n\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1)\n            return;\n        self.files.push(filename);\n\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync)\n                process(filename, common[filename]);\n            else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak)\n                    finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            self.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */\n                if (!callback)\n                    return; // terminated meanwhile\n                if (err) {\n                    /* istanbul ignore else */\n                    if (!weak)\n                        finish(err);\n                    else if (!queued) // can't be covered reliably\n                        finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename))\n        filename = [ filename ];\n    for (var i = 0, resolved; i < filename.length; ++i)\n        if (resolved = self.resolvePath(\"\", filename[i]))\n            fetch(resolved);\n\n    if (sync)\n        return self;\n    if (!queued)\n        finish(null, self);\n    return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode)\n        throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n    if (this.deferred.length)\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n        }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n            if (!tryHandleExtension(this, object))\n                this.deferred.push(object);\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n        if (object instanceof Type) // Try to handle any deferred extensions\n            for (var i = 0; i < this.deferred.length;)\n                if (tryHandleExtension(this, this.deferred[i]))\n                    this.deferred.splice(i, 1);\n                else\n                    ++i;\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n            this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n    // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) { // remove its sister field\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else { // cancel the extension\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */\n                if (index > -1)\n                    this.deferred.splice(index, 1);\n            }\n        }\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose enum values\n\n    } else if (object instanceof Namespace) {\n\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n            this._handleRemove(object._nestedArray[i]);\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose namespaces\n\n    }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function(Type_, parse_, common_) {\n    Type   = Type_;\n    parse  = parse_;\n    common = common_;\n};\n"]},"metadata":{},"sourceType":"script"}