{"ast":null,"code":"/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Auth = exports.TenantAwareAuth = exports.BaseAuth = void 0;\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar user_record_1 = require(\"./user-record\");\n\nvar identifier_1 = require(\"./identifier\");\n\nvar token_generator_1 = require(\"./token-generator\");\n\nvar auth_api_request_1 = require(\"./auth-api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar token_verifier_1 = require(\"./token-verifier\");\n\nvar auth_config_1 = require(\"./auth-config\");\n\nvar tenant_manager_1 = require(\"./tenant-manager\");\n/**\n * Base Auth class. Mainly used for user management APIs.\n */\n\n\nvar BaseAuth =\n/** @class */\nfunction () {\n  /**\n   * The BaseAuth class constructor.\n   *\n   * @param app The FirebaseApp to associate with this Auth instance.\n   * @param authRequestHandler The RPC request handler for this instance.\n   * @param tokenGenerator Optional token generator. If not specified, a\n   *     (non-tenant-aware) instance will be created. Use this paramter to\n   *     specify a tenant-aware tokenGenerator.\n   * @constructor\n   */\n  function BaseAuth(app, authRequestHandler, tokenGenerator) {\n    this.authRequestHandler = authRequestHandler;\n\n    if (tokenGenerator) {\n      this.tokenGenerator = tokenGenerator;\n    } else {\n      var cryptoSigner = auth_api_request_1.useEmulator() ? new token_generator_1.EmulatedSigner() : token_generator_1.cryptoSignerFromApp(app);\n      this.tokenGenerator = new token_generator_1.FirebaseTokenGenerator(cryptoSigner);\n    }\n\n    this.sessionCookieVerifier = token_verifier_1.createSessionCookieVerifier(app);\n    this.idTokenVerifier = token_verifier_1.createIdTokenVerifier(app);\n  }\n  /**\n   * Creates a new custom token that can be sent back to a client to use with\n   * signInWithCustomToken().\n   *\n   * @param {string} uid The uid to use as the JWT subject.\n   * @param {object=} developerClaims Optional additional claims to include in the JWT payload.\n   *\n   * @return {Promise<string>} A JWT for the provided payload.\n   */\n\n\n  BaseAuth.prototype.createCustomToken = function (uid, developerClaims) {\n    return this.tokenGenerator.createCustomToken(uid, developerClaims);\n  };\n  /**\n   * Verifies a JWT auth token. Returns a Promise with the tokens claims. Rejects\n   * the promise if the token could not be verified. If checkRevoked is set to true,\n   * verifies if the session corresponding to the ID token was revoked. If the corresponding\n   * user's session was invalidated, an auth/id-token-revoked error is thrown. If not specified\n   * the check is not applied.\n   *\n   * @param {string} idToken The JWT to verify.\n   * @param {boolean=} checkRevoked Whether to check if the ID token is revoked.\n   * @return {Promise<DecodedIdToken>} A Promise that will be fulfilled after a successful\n   *     verification.\n   */\n\n\n  BaseAuth.prototype.verifyIdToken = function (idToken, checkRevoked) {\n    var _this = this;\n\n    if (checkRevoked === void 0) {\n      checkRevoked = false;\n    }\n\n    var isEmulator = auth_api_request_1.useEmulator();\n    return this.idTokenVerifier.verifyJWT(idToken, isEmulator).then(function (decodedIdToken) {\n      // Whether to check if the token was revoked.\n      if (checkRevoked || isEmulator) {\n        return _this.verifyDecodedJWTNotRevoked(decodedIdToken, error_1.AuthClientErrorCode.ID_TOKEN_REVOKED);\n      }\n\n      return decodedIdToken;\n    });\n  };\n  /**\n   * Looks up the user identified by the provided user id and returns a promise that is\n   * fulfilled with a user record for the given user if that user is found.\n   *\n   * @param {string} uid The uid of the user to look up.\n   * @return {Promise<UserRecord>} A promise that resolves with the corresponding user record.\n   */\n\n\n  BaseAuth.prototype.getUser = function (uid) {\n    return this.authRequestHandler.getAccountInfoByUid(uid).then(function (response) {\n      // Returns the user record populated with server response.\n      return new user_record_1.UserRecord(response.users[0]);\n    });\n  };\n  /**\n   * Looks up the user identified by the provided email and returns a promise that is\n   * fulfilled with a user record for the given user if that user is found.\n   *\n   * @param {string} email The email of the user to look up.\n   * @return {Promise<UserRecord>} A promise that resolves with the corresponding user record.\n   */\n\n\n  BaseAuth.prototype.getUserByEmail = function (email) {\n    return this.authRequestHandler.getAccountInfoByEmail(email).then(function (response) {\n      // Returns the user record populated with server response.\n      return new user_record_1.UserRecord(response.users[0]);\n    });\n  };\n  /**\n   * Looks up the user identified by the provided phone number and returns a promise that is\n   * fulfilled with a user record for the given user if that user is found.\n   *\n   * @param {string} phoneNumber The phone number of the user to look up.\n   * @return {Promise<UserRecord>} A promise that resolves with the corresponding user record.\n   */\n\n\n  BaseAuth.prototype.getUserByPhoneNumber = function (phoneNumber) {\n    return this.authRequestHandler.getAccountInfoByPhoneNumber(phoneNumber).then(function (response) {\n      // Returns the user record populated with server response.\n      return new user_record_1.UserRecord(response.users[0]);\n    });\n  };\n  /**\n   * Gets the user data for the user corresponding to a given provider id.\n   *\n   * See [Retrieve user data](/docs/auth/admin/manage-users#retrieve_user_data)\n   * for code samples and detailed documentation.\n   *\n   * @param providerId The provider ID, for example, \"google.com\" for the\n   *   Google provider.\n   * @param uid The user identifier for the given provider.\n   *\n   * @return A promise fulfilled with the user data corresponding to the\n   *   given provider id.\n   */\n\n\n  BaseAuth.prototype.getUserByProviderUid = function (providerId, uid) {\n    // Although we don't really advertise it, we want to also handle\n    // non-federated idps with this call. So if we detect one of them, we'll\n    // reroute this request appropriately.\n    if (providerId === 'phone') {\n      return this.getUserByPhoneNumber(uid);\n    } else if (providerId === 'email') {\n      return this.getUserByEmail(uid);\n    }\n\n    return this.authRequestHandler.getAccountInfoByFederatedUid(providerId, uid).then(function (response) {\n      // Returns the user record populated with server response.\n      return new user_record_1.UserRecord(response.users[0]);\n    });\n  };\n  /**\n   * Gets the user data corresponding to the specified identifiers.\n   *\n   * There are no ordering guarantees; in particular, the nth entry in the result list is not\n   * guaranteed to correspond to the nth entry in the input parameters list.\n   *\n   * Only a maximum of 100 identifiers may be supplied. If more than 100 identifiers are supplied,\n   * this method will immediately throw a FirebaseAuthError.\n   *\n   * @param identifiers The identifiers used to indicate which user records should be returned. Must\n   *     have <= 100 entries.\n   * @return {Promise<GetUsersResult>} A promise that resolves to the corresponding user records.\n   * @throws FirebaseAuthError If any of the identifiers are invalid or if more than 100\n   *     identifiers are specified.\n   */\n\n\n  BaseAuth.prototype.getUsers = function (identifiers) {\n    if (!validator.isArray(identifiers)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`identifiers` parameter must be an array');\n    }\n\n    return this.authRequestHandler.getAccountInfoByIdentifiers(identifiers).then(function (response) {\n      /**\n       * Checks if the specified identifier is within the list of\n       * UserRecords.\n       */\n      var isUserFound = function (id, userRecords) {\n        return !!userRecords.find(function (userRecord) {\n          if (identifier_1.isUidIdentifier(id)) {\n            return id.uid === userRecord.uid;\n          } else if (identifier_1.isEmailIdentifier(id)) {\n            return id.email === userRecord.email;\n          } else if (identifier_1.isPhoneIdentifier(id)) {\n            return id.phoneNumber === userRecord.phoneNumber;\n          } else if (identifier_1.isProviderIdentifier(id)) {\n            var matchingUserInfo = userRecord.providerData.find(function (userInfo) {\n              return id.providerId === userInfo.providerId;\n            });\n            return !!matchingUserInfo && id.providerUid === matchingUserInfo.uid;\n          } else {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Unhandled identifier type');\n          }\n        });\n      };\n\n      var users = response.users ? response.users.map(function (user) {\n        return new user_record_1.UserRecord(user);\n      }) : [];\n      var notFound = identifiers.filter(function (id) {\n        return !isUserFound(id, users);\n      });\n      return {\n        users: users,\n        notFound: notFound\n      };\n    });\n  };\n  /**\n   * Exports a batch of user accounts. Batch size is determined by the maxResults argument.\n   * Starting point of the batch is determined by the pageToken argument.\n   *\n   * @param {number=} maxResults The page size, 1000 if undefined. This is also the maximum\n   *     allowed limit.\n   * @param {string=} pageToken The next page token. If not specified, returns users starting\n   *     without any offset.\n   * @return {Promise<{users: UserRecord[], pageToken?: string}>} A promise that resolves with\n   *     the current batch of downloaded users and the next page token. For the last page, an\n   *     empty list of users and no page token are returned.\n   */\n\n\n  BaseAuth.prototype.listUsers = function (maxResults, pageToken) {\n    return this.authRequestHandler.downloadAccount(maxResults, pageToken).then(function (response) {\n      // List of users to return.\n      var users = []; // Convert each user response to a UserRecord.\n\n      response.users.forEach(function (userResponse) {\n        users.push(new user_record_1.UserRecord(userResponse));\n      }); // Return list of user records and the next page token if available.\n\n      var result = {\n        users: users,\n        pageToken: response.nextPageToken\n      }; // Delete result.pageToken if undefined.\n\n      if (typeof result.pageToken === 'undefined') {\n        delete result.pageToken;\n      }\n\n      return result;\n    });\n  };\n  /**\n   * Creates a new user with the properties provided.\n   *\n   * @param {CreateRequest} properties The properties to set on the new user record to be created.\n   * @return {Promise<UserRecord>} A promise that resolves with the newly created user record.\n   */\n\n\n  BaseAuth.prototype.createUser = function (properties) {\n    var _this = this;\n\n    return this.authRequestHandler.createNewAccount(properties).then(function (uid) {\n      // Return the corresponding user record.\n      return _this.getUser(uid);\n    }).catch(function (error) {\n      if (error.code === 'auth/user-not-found') {\n        // Something must have happened after creating the user and then retrieving it.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Unable to create the user record provided.');\n      }\n\n      throw error;\n    });\n  };\n  /**\n   * Deletes the user identified by the provided user id and returns a promise that is\n   * fulfilled when the user is found and successfully deleted.\n   *\n   * @param {string} uid The uid of the user to delete.\n   * @return {Promise<void>} A promise that resolves when the user is successfully deleted.\n   */\n\n\n  BaseAuth.prototype.deleteUser = function (uid) {\n    return this.authRequestHandler.deleteAccount(uid).then(function () {// Return nothing on success.\n    });\n  };\n\n  BaseAuth.prototype.deleteUsers = function (uids) {\n    if (!validator.isArray(uids)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`uids` parameter must be an array');\n    }\n\n    return this.authRequestHandler.deleteAccounts(uids,\n    /*force=*/\n    true).then(function (batchDeleteAccountsResponse) {\n      var result = {\n        failureCount: 0,\n        successCount: uids.length,\n        errors: []\n      };\n\n      if (!validator.isNonEmptyArray(batchDeleteAccountsResponse.errors)) {\n        return result;\n      }\n\n      result.failureCount = batchDeleteAccountsResponse.errors.length;\n      result.successCount = uids.length - batchDeleteAccountsResponse.errors.length;\n      result.errors = batchDeleteAccountsResponse.errors.map(function (batchDeleteErrorInfo) {\n        if (batchDeleteErrorInfo.index === undefined) {\n          throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Corrupt BatchDeleteAccountsResponse detected');\n        }\n\n        var errMsgToError = function (msg) {\n          // We unconditionally set force=true, so the 'NOT_DISABLED' error\n          // should not be possible.\n          var code = msg && msg.startsWith('NOT_DISABLED') ? error_1.AuthClientErrorCode.USER_NOT_DISABLED : error_1.AuthClientErrorCode.INTERNAL_ERROR;\n          return new error_1.FirebaseAuthError(code, batchDeleteErrorInfo.message);\n        };\n\n        return {\n          index: batchDeleteErrorInfo.index,\n          error: errMsgToError(batchDeleteErrorInfo.message)\n        };\n      });\n      return result;\n    });\n  };\n  /**\n   * Updates an existing user with the properties provided.\n   *\n   * @param {string} uid The uid identifier of the user to update.\n   * @param {UpdateRequest} properties The properties to update on the existing user.\n   * @return {Promise<UserRecord>} A promise that resolves with the modified user record.\n   */\n\n\n  BaseAuth.prototype.updateUser = function (uid, properties) {\n    var _this = this; // Although we don't really advertise it, we want to also handle linking of\n    // non-federated idps with this call. So if we detect one of them, we'll\n    // adjust the properties parameter appropriately. This *does* imply that a\n    // conflict could arise, e.g. if the user provides a phoneNumber property,\n    // but also provides a providerToLink with a 'phone' provider id. In that\n    // case, we'll throw an error.\n\n\n    properties = deep_copy_1.deepCopy(properties);\n\n    if (properties === null || properties === void 0 ? void 0 : properties.providerToLink) {\n      if (properties.providerToLink.providerId === 'email') {\n        if (typeof properties.email !== 'undefined') {\n          throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Both UpdateRequest.email and UpdateRequest.providerToLink.providerId='email' were set. To \" + 'link to the email/password provider, only specify the UpdateRequest.email field.');\n        }\n\n        properties.email = properties.providerToLink.uid;\n        delete properties.providerToLink;\n      } else if (properties.providerToLink.providerId === 'phone') {\n        if (typeof properties.phoneNumber !== 'undefined') {\n          throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Both UpdateRequest.phoneNumber and UpdateRequest.providerToLink.providerId='phone' were set. To \" + 'link to a phone provider, only specify the UpdateRequest.phoneNumber field.');\n        }\n\n        properties.phoneNumber = properties.providerToLink.uid;\n        delete properties.providerToLink;\n      }\n    }\n\n    if (properties === null || properties === void 0 ? void 0 : properties.providersToUnlink) {\n      if (properties.providersToUnlink.indexOf('phone') !== -1) {\n        // If we've been told to unlink the phone provider both via setting\n        // phoneNumber to null *and* by setting providersToUnlink to include\n        // 'phone', then we'll reject that. Though it might also be reasonable\n        // to relax this restriction and just unlink it.\n        if (properties.phoneNumber === null) {\n          throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Both UpdateRequest.phoneNumber=null and UpdateRequest.providersToUnlink=['phone'] were set. To \" + 'unlink from a phone provider, only specify the UpdateRequest.phoneNumber=null field.');\n        }\n      }\n    }\n\n    return this.authRequestHandler.updateExistingAccount(uid, properties).then(function (existingUid) {\n      // Return the corresponding user record.\n      return _this.getUser(existingUid);\n    });\n  };\n  /**\n   * Sets additional developer claims on an existing user identified by the provided UID.\n   *\n   * @param {string} uid The user to edit.\n   * @param {object} customUserClaims The developer claims to set.\n   * @return {Promise<void>} A promise that resolves when the operation completes\n   *     successfully.\n   */\n\n\n  BaseAuth.prototype.setCustomUserClaims = function (uid, customUserClaims) {\n    return this.authRequestHandler.setCustomUserClaims(uid, customUserClaims).then(function () {// Return nothing on success.\n    });\n  };\n  /**\n   * Revokes all refresh tokens for the specified user identified by the provided UID.\n   * In addition to revoking all refresh tokens for a user, all ID tokens issued before\n   * revocation will also be revoked on the Auth backend. Any request with an ID token\n   * generated before revocation will be rejected with a token expired error.\n   *\n   * @param {string} uid The user whose tokens are to be revoked.\n   * @return {Promise<void>} A promise that resolves when the operation completes\n   *     successfully.\n   */\n\n\n  BaseAuth.prototype.revokeRefreshTokens = function (uid) {\n    return this.authRequestHandler.revokeRefreshTokens(uid).then(function () {// Return nothing on success.\n    });\n  };\n  /**\n   * Imports the list of users provided to Firebase Auth. This is useful when\n   * migrating from an external authentication system without having to use the Firebase CLI SDK.\n   * At most, 1000 users are allowed to be imported one at a time.\n   * When importing a list of password users, UserImportOptions are required to be specified.\n   *\n   * @param {UserImportRecord[]} users The list of user records to import to Firebase Auth.\n   * @param {UserImportOptions=} options The user import options, required when the users provided\n   *     include password credentials.\n   * @return {Promise<UserImportResult>} A promise that resolves when the operation completes\n   *     with the result of the import. This includes the number of successful imports, the number\n   *     of failed uploads and their corresponding errors.\n   */\n\n\n  BaseAuth.prototype.importUsers = function (users, options) {\n    return this.authRequestHandler.uploadAccount(users, options);\n  };\n  /**\n   * Creates a new Firebase session cookie with the specified options that can be used for\n   * session management (set as a server side session cookie with custom cookie policy).\n   * The session cookie JWT will have the same payload claims as the provided ID token.\n   *\n   * @param {string} idToken The Firebase ID token to exchange for a session cookie.\n   * @param {SessionCookieOptions} sessionCookieOptions The session cookie options which includes\n   *     custom session duration.\n   *\n   * @return {Promise<string>} A promise that resolves on success with the created session cookie.\n   */\n\n\n  BaseAuth.prototype.createSessionCookie = function (idToken, sessionCookieOptions) {\n    // Return rejected promise if expiresIn is not available.\n    if (!validator.isNonNullObject(sessionCookieOptions) || !validator.isNumber(sessionCookieOptions.expiresIn)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION));\n    }\n\n    return this.authRequestHandler.createSessionCookie(idToken, sessionCookieOptions.expiresIn);\n  };\n  /**\n   * Verifies a Firebase session cookie. Returns a Promise with the tokens claims. Rejects\n   * the promise if the token could not be verified. If checkRevoked is set to true,\n   * verifies if the session corresponding to the session cookie was revoked. If the corresponding\n   * user's session was invalidated, an auth/session-cookie-revoked error is thrown. If not\n   * specified the check is not performed.\n   *\n   * @param {string} sessionCookie The session cookie to verify.\n   * @param {boolean=} checkRevoked Whether to check if the session cookie is revoked.\n   * @return {Promise<DecodedIdToken>} A Promise that will be fulfilled after a successful\n   *     verification.\n   */\n\n\n  BaseAuth.prototype.verifySessionCookie = function (sessionCookie, checkRevoked) {\n    var _this = this;\n\n    if (checkRevoked === void 0) {\n      checkRevoked = false;\n    }\n\n    var isEmulator = auth_api_request_1.useEmulator();\n    return this.sessionCookieVerifier.verifyJWT(sessionCookie, isEmulator).then(function (decodedIdToken) {\n      // Whether to check if the token was revoked.\n      if (checkRevoked || isEmulator) {\n        return _this.verifyDecodedJWTNotRevoked(decodedIdToken, error_1.AuthClientErrorCode.SESSION_COOKIE_REVOKED);\n      }\n\n      return decodedIdToken;\n    });\n  };\n  /**\n   * Generates the out of band email action link for password reset flows for the\n   * email specified using the action code settings provided.\n   * Returns a promise that resolves with the generated link.\n   *\n   * @param {string} email The email of the user whose password is to be reset.\n   * @param {ActionCodeSettings=} actionCodeSettings The optional action code setings which defines whether\n   *     the link is to be handled by a mobile app and the additional state information to be passed in the\n   *     deep link, etc.\n   * @return {Promise<string>} A promise that resolves with the password reset link.\n   */\n\n\n  BaseAuth.prototype.generatePasswordResetLink = function (email, actionCodeSettings) {\n    return this.authRequestHandler.getEmailActionLink('PASSWORD_RESET', email, actionCodeSettings);\n  };\n  /**\n   * Generates the out of band email action link for email verification flows for the\n   * email specified using the action code settings provided.\n   * Returns a promise that resolves with the generated link.\n   *\n   * @param {string} email The email of the user to be verified.\n   * @param {ActionCodeSettings=} actionCodeSettings The optional action code setings which defines whether\n   *     the link is to be handled by a mobile app and the additional state information to be passed in the\n   *     deep link, etc.\n   * @return {Promise<string>} A promise that resolves with the email verification link.\n   */\n\n\n  BaseAuth.prototype.generateEmailVerificationLink = function (email, actionCodeSettings) {\n    return this.authRequestHandler.getEmailActionLink('VERIFY_EMAIL', email, actionCodeSettings);\n  };\n  /**\n   * Generates the out of band email action link for email link sign-in flows for the\n   * email specified using the action code settings provided.\n   * Returns a promise that resolves with the generated link.\n   *\n   * @param {string} email The email of the user signing in.\n   * @param {ActionCodeSettings} actionCodeSettings The required action code setings which defines whether\n   *     the link is to be handled by a mobile app and the additional state information to be passed in the\n   *     deep link, etc.\n   * @return {Promise<string>} A promise that resolves with the email sign-in link.\n   */\n\n\n  BaseAuth.prototype.generateSignInWithEmailLink = function (email, actionCodeSettings) {\n    return this.authRequestHandler.getEmailActionLink('EMAIL_SIGNIN', email, actionCodeSettings);\n  };\n  /**\n   * Returns the list of existing provider configuation matching the filter provided.\n   * At most, 100 provider configs are allowed to be imported at a time.\n   *\n   * @param {AuthProviderConfigFilter} options The provider config filter to apply.\n   * @return {Promise<ListProviderConfigResults>} A promise that resolves with the list of provider configs\n   *     meeting the filter requirements.\n   */\n\n\n  BaseAuth.prototype.listProviderConfigs = function (options) {\n    var processResponse = function (response, providerConfigs) {\n      // Return list of provider configuration and the next page token if available.\n      var result = {\n        providerConfigs: providerConfigs\n      }; // Delete result.pageToken if undefined.\n\n      if (Object.prototype.hasOwnProperty.call(response, 'nextPageToken')) {\n        result.pageToken = response.nextPageToken;\n      }\n\n      return result;\n    };\n\n    if (options && options.type === 'oidc') {\n      return this.authRequestHandler.listOAuthIdpConfigs(options.maxResults, options.pageToken).then(function (response) {\n        // List of provider configurations to return.\n        var providerConfigs = []; // Convert each provider config response to a OIDCConfig.\n\n        response.oauthIdpConfigs.forEach(function (configResponse) {\n          providerConfigs.push(new auth_config_1.OIDCConfig(configResponse));\n        }); // Return list of provider configuration and the next page token if available.\n\n        return processResponse(response, providerConfigs);\n      });\n    } else if (options && options.type === 'saml') {\n      return this.authRequestHandler.listInboundSamlConfigs(options.maxResults, options.pageToken).then(function (response) {\n        // List of provider configurations to return.\n        var providerConfigs = []; // Convert each provider config response to a SAMLConfig.\n\n        response.inboundSamlConfigs.forEach(function (configResponse) {\n          providerConfigs.push(new auth_config_1.SAMLConfig(configResponse));\n        }); // Return list of provider configuration and the next page token if available.\n\n        return processResponse(response, providerConfigs);\n      });\n    }\n\n    return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"AuthProviderConfigFilter.type\" must be either \"saml\" or \"oidc\"'));\n  };\n  /**\n   * Looks up an Auth provider configuration by ID.\n   * Returns a promise that resolves with the provider configuration corresponding to the provider ID specified.\n   *\n   * @param {string} providerId  The provider ID corresponding to the provider config to return.\n   * @return {Promise<AuthProviderConfig>}\n   */\n\n\n  BaseAuth.prototype.getProviderConfig = function (providerId) {\n    if (auth_config_1.OIDCConfig.isProviderId(providerId)) {\n      return this.authRequestHandler.getOAuthIdpConfig(providerId).then(function (response) {\n        return new auth_config_1.OIDCConfig(response);\n      });\n    } else if (auth_config_1.SAMLConfig.isProviderId(providerId)) {\n      return this.authRequestHandler.getInboundSamlConfig(providerId).then(function (response) {\n        return new auth_config_1.SAMLConfig(response);\n      });\n    }\n\n    return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n  };\n  /**\n   * Deletes the provider configuration corresponding to the provider ID passed.\n   *\n   * @param {string} providerId The provider ID corresponding to the provider config to delete.\n   * @return {Promise<void>} A promise that resolves on completion.\n   */\n\n\n  BaseAuth.prototype.deleteProviderConfig = function (providerId) {\n    if (auth_config_1.OIDCConfig.isProviderId(providerId)) {\n      return this.authRequestHandler.deleteOAuthIdpConfig(providerId);\n    } else if (auth_config_1.SAMLConfig.isProviderId(providerId)) {\n      return this.authRequestHandler.deleteInboundSamlConfig(providerId);\n    }\n\n    return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n  };\n  /**\n   * Returns a promise that resolves with the updated AuthProviderConfig when the provider configuration corresponding\n   * to the provider ID specified is updated with the specified configuration.\n   *\n   * @param {string} providerId The provider ID corresponding to the provider config to update.\n   * @param {UpdateAuthProviderRequest} updatedConfig The updated configuration.\n   * @return {Promise<AuthProviderConfig>} A promise that resolves with the updated provider configuration.\n   */\n\n\n  BaseAuth.prototype.updateProviderConfig = function (providerId, updatedConfig) {\n    if (!validator.isNonNullObject(updatedConfig)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, 'Request is missing \"UpdateAuthProviderRequest\" configuration.'));\n    }\n\n    if (auth_config_1.OIDCConfig.isProviderId(providerId)) {\n      return this.authRequestHandler.updateOAuthIdpConfig(providerId, updatedConfig).then(function (response) {\n        return new auth_config_1.OIDCConfig(response);\n      });\n    } else if (auth_config_1.SAMLConfig.isProviderId(providerId)) {\n      return this.authRequestHandler.updateInboundSamlConfig(providerId, updatedConfig).then(function (response) {\n        return new auth_config_1.SAMLConfig(response);\n      });\n    }\n\n    return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n  };\n  /**\n   * Returns a promise that resolves with the newly created AuthProviderConfig when the new provider configuration is\n   * created.\n   * @param {AuthProviderConfig} config The provider configuration to create.\n   * @return {Promise<AuthProviderConfig>} A promise that resolves with the created provider configuration.\n   */\n\n\n  BaseAuth.prototype.createProviderConfig = function (config) {\n    if (!validator.isNonNullObject(config)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, 'Request is missing \"AuthProviderConfig\" configuration.'));\n    }\n\n    if (auth_config_1.OIDCConfig.isProviderId(config.providerId)) {\n      return this.authRequestHandler.createOAuthIdpConfig(config).then(function (response) {\n        return new auth_config_1.OIDCConfig(response);\n      });\n    } else if (auth_config_1.SAMLConfig.isProviderId(config.providerId)) {\n      return this.authRequestHandler.createInboundSamlConfig(config).then(function (response) {\n        return new auth_config_1.SAMLConfig(response);\n      });\n    }\n\n    return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n  };\n  /**\n   * Verifies the decoded Firebase issued JWT is not revoked. Returns a promise that resolves\n   * with the decoded claims on success. Rejects the promise with revocation error if revoked.\n   *\n   * @param {DecodedIdToken} decodedIdToken The JWT's decoded claims.\n   * @param {ErrorInfo} revocationErrorInfo The revocation error info to throw on revocation\n   *     detection.\n   * @return {Promise<DecodedIdToken>} A Promise that will be fulfilled after a successful\n   *     verification.\n   */\n\n\n  BaseAuth.prototype.verifyDecodedJWTNotRevoked = function (decodedIdToken, revocationErrorInfo) {\n    // Get tokens valid after time for the corresponding user.\n    return this.getUser(decodedIdToken.sub).then(function (user) {\n      // If no tokens valid after time available, token is not revoked.\n      if (user.tokensValidAfterTime) {\n        // Get the ID token authentication time and convert to milliseconds UTC.\n        var authTimeUtc = decodedIdToken.auth_time * 1000; // Get user tokens valid after time in milliseconds UTC.\n\n        var validSinceUtc = new Date(user.tokensValidAfterTime).getTime(); // Check if authentication time is older than valid since time.\n\n        if (authTimeUtc < validSinceUtc) {\n          throw new error_1.FirebaseAuthError(revocationErrorInfo);\n        }\n      } // All checks above passed. Return the decoded token.\n\n\n      return decodedIdToken;\n    });\n  };\n\n  return BaseAuth;\n}();\n\nexports.BaseAuth = BaseAuth;\n/**\n * The tenant aware Auth class.\n */\n\nvar TenantAwareAuth =\n/** @class */\nfunction (_super) {\n  __extends(TenantAwareAuth, _super);\n  /**\n   * The TenantAwareAuth class constructor.\n   *\n   * @param {object} app The app that created this tenant.\n   * @param tenantId The corresponding tenant ID.\n   * @constructor\n   */\n\n\n  function TenantAwareAuth(app, tenantId) {\n    var _this = this;\n\n    var cryptoSigner = auth_api_request_1.useEmulator() ? new token_generator_1.EmulatedSigner() : token_generator_1.cryptoSignerFromApp(app);\n    var tokenGenerator = new token_generator_1.FirebaseTokenGenerator(cryptoSigner, tenantId);\n    _this = _super.call(this, app, new auth_api_request_1.TenantAwareAuthRequestHandler(app, tenantId), tokenGenerator) || this;\n    utils.addReadonlyGetter(_this, 'tenantId', tenantId);\n    return _this;\n  }\n  /**\n   * Verifies a JWT auth token. Returns a Promise with the tokens claims. Rejects\n   * the promise if the token could not be verified. If checkRevoked is set to true,\n   * verifies if the session corresponding to the ID token was revoked. If the corresponding\n   * user's session was invalidated, an auth/id-token-revoked error is thrown. If not specified\n   * the check is not applied.\n   *\n   * @param {string} idToken The JWT to verify.\n   * @param {boolean=} checkRevoked Whether to check if the ID token is revoked.\n   * @return {Promise<DecodedIdToken>} A Promise that will be fulfilled after a successful\n   *     verification.\n   */\n\n\n  TenantAwareAuth.prototype.verifyIdToken = function (idToken, checkRevoked) {\n    var _this = this;\n\n    if (checkRevoked === void 0) {\n      checkRevoked = false;\n    }\n\n    return _super.prototype.verifyIdToken.call(this, idToken, checkRevoked).then(function (decodedClaims) {\n      // Validate tenant ID.\n      if (decodedClaims.firebase.tenant !== _this.tenantId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n      }\n\n      return decodedClaims;\n    });\n  };\n  /**\n   * Creates a new Firebase session cookie with the specified options that can be used for\n   * session management (set as a server side session cookie with custom cookie policy).\n   * The session cookie JWT will have the same payload claims as the provided ID token.\n   *\n   * @param {string} idToken The Firebase ID token to exchange for a session cookie.\n   * @param {SessionCookieOptions} sessionCookieOptions The session cookie options which includes\n   *     custom session duration.\n   *\n   * @return {Promise<string>} A promise that resolves on success with the created session cookie.\n   */\n\n\n  TenantAwareAuth.prototype.createSessionCookie = function (idToken, sessionCookieOptions) {\n    var _this = this; // Validate arguments before processing.\n\n\n    if (!validator.isNonEmptyString(idToken)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN));\n    }\n\n    if (!validator.isNonNullObject(sessionCookieOptions) || !validator.isNumber(sessionCookieOptions.expiresIn)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION));\n    } // This will verify the ID token and then match the tenant ID before creating the session cookie.\n\n\n    return this.verifyIdToken(idToken).then(function () {\n      return _super.prototype.createSessionCookie.call(_this, idToken, sessionCookieOptions);\n    });\n  };\n  /**\n   * Verifies a Firebase session cookie. Returns a Promise with the tokens claims. Rejects\n   * the promise if the token could not be verified. If checkRevoked is set to true,\n   * verifies if the session corresponding to the session cookie was revoked. If the corresponding\n   * user's session was invalidated, an auth/session-cookie-revoked error is thrown. If not\n   * specified the check is not performed.\n   *\n   * @param {string} sessionCookie The session cookie to verify.\n   * @param {boolean=} checkRevoked Whether to check if the session cookie is revoked.\n   * @return {Promise<DecodedIdToken>} A Promise that will be fulfilled after a successful\n   *     verification.\n   */\n\n\n  TenantAwareAuth.prototype.verifySessionCookie = function (sessionCookie, checkRevoked) {\n    var _this = this;\n\n    if (checkRevoked === void 0) {\n      checkRevoked = false;\n    }\n\n    return _super.prototype.verifySessionCookie.call(this, sessionCookie, checkRevoked).then(function (decodedClaims) {\n      if (decodedClaims.firebase.tenant !== _this.tenantId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n      }\n\n      return decodedClaims;\n    });\n  };\n\n  return TenantAwareAuth;\n}(BaseAuth);\n\nexports.TenantAwareAuth = TenantAwareAuth;\n/**\n * Auth service bound to the provided app.\n * An Auth instance can have multiple tenants.\n */\n\nvar Auth =\n/** @class */\nfunction (_super) {\n  __extends(Auth, _super);\n  /**\n   * @param {object} app The app for this Auth service.\n   * @constructor\n   */\n\n\n  function Auth(app) {\n    var _this = _super.call(this, app, new auth_api_request_1.AuthRequestHandler(app)) || this;\n\n    _this.app_ = app;\n    _this.tenantManager_ = new tenant_manager_1.TenantManager(app);\n    return _this;\n  }\n\n  Object.defineProperty(Auth.prototype, \"app\", {\n    /**\n     * Returns the app associated with this Auth instance.\n     *\n     * @return {FirebaseApp} The app associated with this Auth instance.\n     */\n    get: function () {\n      return this.app_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @return The current Auth instance's tenant manager. */\n\n  Auth.prototype.tenantManager = function () {\n    return this.tenantManager_;\n  };\n\n  return Auth;\n}(BaseAuth);\n\nexports.Auth = Auth;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/firebase-admin/lib/auth/auth.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","Auth","TenantAwareAuth","BaseAuth","deep_copy_1","require","user_record_1","identifier_1","token_generator_1","auth_api_request_1","error_1","utils","validator","token_verifier_1","auth_config_1","tenant_manager_1","app","authRequestHandler","tokenGenerator","cryptoSigner","useEmulator","EmulatedSigner","cryptoSignerFromApp","FirebaseTokenGenerator","sessionCookieVerifier","createSessionCookieVerifier","idTokenVerifier","createIdTokenVerifier","createCustomToken","uid","developerClaims","verifyIdToken","idToken","checkRevoked","_this","isEmulator","verifyJWT","then","decodedIdToken","verifyDecodedJWTNotRevoked","AuthClientErrorCode","ID_TOKEN_REVOKED","getUser","getAccountInfoByUid","response","UserRecord","users","getUserByEmail","email","getAccountInfoByEmail","getUserByPhoneNumber","phoneNumber","getAccountInfoByPhoneNumber","getUserByProviderUid","providerId","getAccountInfoByFederatedUid","getUsers","identifiers","isArray","FirebaseAuthError","INVALID_ARGUMENT","getAccountInfoByIdentifiers","isUserFound","id","userRecords","find","userRecord","isUidIdentifier","isEmailIdentifier","isPhoneIdentifier","isProviderIdentifier","matchingUserInfo","providerData","userInfo","providerUid","INTERNAL_ERROR","map","user","notFound","filter","listUsers","maxResults","pageToken","downloadAccount","forEach","userResponse","push","result","nextPageToken","createUser","properties","createNewAccount","catch","error","code","deleteUser","deleteAccount","deleteUsers","uids","deleteAccounts","batchDeleteAccountsResponse","failureCount","successCount","length","errors","isNonEmptyArray","batchDeleteErrorInfo","index","undefined","errMsgToError","msg","startsWith","USER_NOT_DISABLED","message","updateUser","deepCopy","providerToLink","providersToUnlink","indexOf","updateExistingAccount","existingUid","setCustomUserClaims","customUserClaims","revokeRefreshTokens","importUsers","options","uploadAccount","createSessionCookie","sessionCookieOptions","isNonNullObject","isNumber","expiresIn","Promise","reject","INVALID_SESSION_COOKIE_DURATION","verifySessionCookie","sessionCookie","SESSION_COOKIE_REVOKED","generatePasswordResetLink","actionCodeSettings","getEmailActionLink","generateEmailVerificationLink","generateSignInWithEmailLink","listProviderConfigs","processResponse","providerConfigs","call","type","listOAuthIdpConfigs","oauthIdpConfigs","configResponse","OIDCConfig","listInboundSamlConfigs","inboundSamlConfigs","SAMLConfig","getProviderConfig","isProviderId","getOAuthIdpConfig","getInboundSamlConfig","INVALID_PROVIDER_ID","deleteProviderConfig","deleteOAuthIdpConfig","deleteInboundSamlConfig","updateProviderConfig","updatedConfig","INVALID_CONFIG","updateOAuthIdpConfig","updateInboundSamlConfig","createProviderConfig","config","createOAuthIdpConfig","createInboundSamlConfig","revocationErrorInfo","sub","tokensValidAfterTime","authTimeUtc","auth_time","validSinceUtc","Date","getTime","_super","tenantId","TenantAwareAuthRequestHandler","addReadonlyGetter","decodedClaims","firebase","tenant","MISMATCHING_TENANT_ID","isNonEmptyString","INVALID_ID_TOKEN","AuthRequestHandler","app_","tenantManager_","TenantManager","get","enumerable","configurable","tenantManager"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Auth = exports.TenantAwareAuth = exports.BaseAuth = void 0;\nvar deep_copy_1 = require(\"../utils/deep-copy\");\nvar user_record_1 = require(\"./user-record\");\nvar identifier_1 = require(\"./identifier\");\nvar token_generator_1 = require(\"./token-generator\");\nvar auth_api_request_1 = require(\"./auth-api-request\");\nvar error_1 = require(\"../utils/error\");\nvar utils = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\nvar token_verifier_1 = require(\"./token-verifier\");\nvar auth_config_1 = require(\"./auth-config\");\nvar tenant_manager_1 = require(\"./tenant-manager\");\n/**\n * Base Auth class. Mainly used for user management APIs.\n */\nvar BaseAuth = /** @class */ (function () {\n    /**\n     * The BaseAuth class constructor.\n     *\n     * @param app The FirebaseApp to associate with this Auth instance.\n     * @param authRequestHandler The RPC request handler for this instance.\n     * @param tokenGenerator Optional token generator. If not specified, a\n     *     (non-tenant-aware) instance will be created. Use this paramter to\n     *     specify a tenant-aware tokenGenerator.\n     * @constructor\n     */\n    function BaseAuth(app, authRequestHandler, tokenGenerator) {\n        this.authRequestHandler = authRequestHandler;\n        if (tokenGenerator) {\n            this.tokenGenerator = tokenGenerator;\n        }\n        else {\n            var cryptoSigner = auth_api_request_1.useEmulator() ? new token_generator_1.EmulatedSigner() : token_generator_1.cryptoSignerFromApp(app);\n            this.tokenGenerator = new token_generator_1.FirebaseTokenGenerator(cryptoSigner);\n        }\n        this.sessionCookieVerifier = token_verifier_1.createSessionCookieVerifier(app);\n        this.idTokenVerifier = token_verifier_1.createIdTokenVerifier(app);\n    }\n    /**\n     * Creates a new custom token that can be sent back to a client to use with\n     * signInWithCustomToken().\n     *\n     * @param {string} uid The uid to use as the JWT subject.\n     * @param {object=} developerClaims Optional additional claims to include in the JWT payload.\n     *\n     * @return {Promise<string>} A JWT for the provided payload.\n     */\n    BaseAuth.prototype.createCustomToken = function (uid, developerClaims) {\n        return this.tokenGenerator.createCustomToken(uid, developerClaims);\n    };\n    /**\n     * Verifies a JWT auth token. Returns a Promise with the tokens claims. Rejects\n     * the promise if the token could not be verified. If checkRevoked is set to true,\n     * verifies if the session corresponding to the ID token was revoked. If the corresponding\n     * user's session was invalidated, an auth/id-token-revoked error is thrown. If not specified\n     * the check is not applied.\n     *\n     * @param {string} idToken The JWT to verify.\n     * @param {boolean=} checkRevoked Whether to check if the ID token is revoked.\n     * @return {Promise<DecodedIdToken>} A Promise that will be fulfilled after a successful\n     *     verification.\n     */\n    BaseAuth.prototype.verifyIdToken = function (idToken, checkRevoked) {\n        var _this = this;\n        if (checkRevoked === void 0) { checkRevoked = false; }\n        var isEmulator = auth_api_request_1.useEmulator();\n        return this.idTokenVerifier.verifyJWT(idToken, isEmulator)\n            .then(function (decodedIdToken) {\n            // Whether to check if the token was revoked.\n            if (checkRevoked || isEmulator) {\n                return _this.verifyDecodedJWTNotRevoked(decodedIdToken, error_1.AuthClientErrorCode.ID_TOKEN_REVOKED);\n            }\n            return decodedIdToken;\n        });\n    };\n    /**\n     * Looks up the user identified by the provided user id and returns a promise that is\n     * fulfilled with a user record for the given user if that user is found.\n     *\n     * @param {string} uid The uid of the user to look up.\n     * @return {Promise<UserRecord>} A promise that resolves with the corresponding user record.\n     */\n    BaseAuth.prototype.getUser = function (uid) {\n        return this.authRequestHandler.getAccountInfoByUid(uid)\n            .then(function (response) {\n            // Returns the user record populated with server response.\n            return new user_record_1.UserRecord(response.users[0]);\n        });\n    };\n    /**\n     * Looks up the user identified by the provided email and returns a promise that is\n     * fulfilled with a user record for the given user if that user is found.\n     *\n     * @param {string} email The email of the user to look up.\n     * @return {Promise<UserRecord>} A promise that resolves with the corresponding user record.\n     */\n    BaseAuth.prototype.getUserByEmail = function (email) {\n        return this.authRequestHandler.getAccountInfoByEmail(email)\n            .then(function (response) {\n            // Returns the user record populated with server response.\n            return new user_record_1.UserRecord(response.users[0]);\n        });\n    };\n    /**\n     * Looks up the user identified by the provided phone number and returns a promise that is\n     * fulfilled with a user record for the given user if that user is found.\n     *\n     * @param {string} phoneNumber The phone number of the user to look up.\n     * @return {Promise<UserRecord>} A promise that resolves with the corresponding user record.\n     */\n    BaseAuth.prototype.getUserByPhoneNumber = function (phoneNumber) {\n        return this.authRequestHandler.getAccountInfoByPhoneNumber(phoneNumber)\n            .then(function (response) {\n            // Returns the user record populated with server response.\n            return new user_record_1.UserRecord(response.users[0]);\n        });\n    };\n    /**\n     * Gets the user data for the user corresponding to a given provider id.\n     *\n     * See [Retrieve user data](/docs/auth/admin/manage-users#retrieve_user_data)\n     * for code samples and detailed documentation.\n     *\n     * @param providerId The provider ID, for example, \"google.com\" for the\n     *   Google provider.\n     * @param uid The user identifier for the given provider.\n     *\n     * @return A promise fulfilled with the user data corresponding to the\n     *   given provider id.\n     */\n    BaseAuth.prototype.getUserByProviderUid = function (providerId, uid) {\n        // Although we don't really advertise it, we want to also handle\n        // non-federated idps with this call. So if we detect one of them, we'll\n        // reroute this request appropriately.\n        if (providerId === 'phone') {\n            return this.getUserByPhoneNumber(uid);\n        }\n        else if (providerId === 'email') {\n            return this.getUserByEmail(uid);\n        }\n        return this.authRequestHandler.getAccountInfoByFederatedUid(providerId, uid)\n            .then(function (response) {\n            // Returns the user record populated with server response.\n            return new user_record_1.UserRecord(response.users[0]);\n        });\n    };\n    /**\n     * Gets the user data corresponding to the specified identifiers.\n     *\n     * There are no ordering guarantees; in particular, the nth entry in the result list is not\n     * guaranteed to correspond to the nth entry in the input parameters list.\n     *\n     * Only a maximum of 100 identifiers may be supplied. If more than 100 identifiers are supplied,\n     * this method will immediately throw a FirebaseAuthError.\n     *\n     * @param identifiers The identifiers used to indicate which user records should be returned. Must\n     *     have <= 100 entries.\n     * @return {Promise<GetUsersResult>} A promise that resolves to the corresponding user records.\n     * @throws FirebaseAuthError If any of the identifiers are invalid or if more than 100\n     *     identifiers are specified.\n     */\n    BaseAuth.prototype.getUsers = function (identifiers) {\n        if (!validator.isArray(identifiers)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`identifiers` parameter must be an array');\n        }\n        return this.authRequestHandler\n            .getAccountInfoByIdentifiers(identifiers)\n            .then(function (response) {\n            /**\n             * Checks if the specified identifier is within the list of\n             * UserRecords.\n             */\n            var isUserFound = (function (id, userRecords) {\n                return !!userRecords.find(function (userRecord) {\n                    if (identifier_1.isUidIdentifier(id)) {\n                        return id.uid === userRecord.uid;\n                    }\n                    else if (identifier_1.isEmailIdentifier(id)) {\n                        return id.email === userRecord.email;\n                    }\n                    else if (identifier_1.isPhoneIdentifier(id)) {\n                        return id.phoneNumber === userRecord.phoneNumber;\n                    }\n                    else if (identifier_1.isProviderIdentifier(id)) {\n                        var matchingUserInfo = userRecord.providerData.find(function (userInfo) {\n                            return id.providerId === userInfo.providerId;\n                        });\n                        return !!matchingUserInfo && id.providerUid === matchingUserInfo.uid;\n                    }\n                    else {\n                        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Unhandled identifier type');\n                    }\n                });\n            });\n            var users = response.users ? response.users.map(function (user) { return new user_record_1.UserRecord(user); }) : [];\n            var notFound = identifiers.filter(function (id) { return !isUserFound(id, users); });\n            return { users: users, notFound: notFound };\n        });\n    };\n    /**\n     * Exports a batch of user accounts. Batch size is determined by the maxResults argument.\n     * Starting point of the batch is determined by the pageToken argument.\n     *\n     * @param {number=} maxResults The page size, 1000 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param {string=} pageToken The next page token. If not specified, returns users starting\n     *     without any offset.\n     * @return {Promise<{users: UserRecord[], pageToken?: string}>} A promise that resolves with\n     *     the current batch of downloaded users and the next page token. For the last page, an\n     *     empty list of users and no page token are returned.\n     */\n    BaseAuth.prototype.listUsers = function (maxResults, pageToken) {\n        return this.authRequestHandler.downloadAccount(maxResults, pageToken)\n            .then(function (response) {\n            // List of users to return.\n            var users = [];\n            // Convert each user response to a UserRecord.\n            response.users.forEach(function (userResponse) {\n                users.push(new user_record_1.UserRecord(userResponse));\n            });\n            // Return list of user records and the next page token if available.\n            var result = {\n                users: users,\n                pageToken: response.nextPageToken,\n            };\n            // Delete result.pageToken if undefined.\n            if (typeof result.pageToken === 'undefined') {\n                delete result.pageToken;\n            }\n            return result;\n        });\n    };\n    /**\n     * Creates a new user with the properties provided.\n     *\n     * @param {CreateRequest} properties The properties to set on the new user record to be created.\n     * @return {Promise<UserRecord>} A promise that resolves with the newly created user record.\n     */\n    BaseAuth.prototype.createUser = function (properties) {\n        var _this = this;\n        return this.authRequestHandler.createNewAccount(properties)\n            .then(function (uid) {\n            // Return the corresponding user record.\n            return _this.getUser(uid);\n        })\n            .catch(function (error) {\n            if (error.code === 'auth/user-not-found') {\n                // Something must have happened after creating the user and then retrieving it.\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Unable to create the user record provided.');\n            }\n            throw error;\n        });\n    };\n    /**\n     * Deletes the user identified by the provided user id and returns a promise that is\n     * fulfilled when the user is found and successfully deleted.\n     *\n     * @param {string} uid The uid of the user to delete.\n     * @return {Promise<void>} A promise that resolves when the user is successfully deleted.\n     */\n    BaseAuth.prototype.deleteUser = function (uid) {\n        return this.authRequestHandler.deleteAccount(uid)\n            .then(function () {\n            // Return nothing on success.\n        });\n    };\n    BaseAuth.prototype.deleteUsers = function (uids) {\n        if (!validator.isArray(uids)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`uids` parameter must be an array');\n        }\n        return this.authRequestHandler.deleteAccounts(uids, /*force=*/ true)\n            .then(function (batchDeleteAccountsResponse) {\n            var result = {\n                failureCount: 0,\n                successCount: uids.length,\n                errors: [],\n            };\n            if (!validator.isNonEmptyArray(batchDeleteAccountsResponse.errors)) {\n                return result;\n            }\n            result.failureCount = batchDeleteAccountsResponse.errors.length;\n            result.successCount = uids.length - batchDeleteAccountsResponse.errors.length;\n            result.errors = batchDeleteAccountsResponse.errors.map(function (batchDeleteErrorInfo) {\n                if (batchDeleteErrorInfo.index === undefined) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Corrupt BatchDeleteAccountsResponse detected');\n                }\n                var errMsgToError = function (msg) {\n                    // We unconditionally set force=true, so the 'NOT_DISABLED' error\n                    // should not be possible.\n                    var code = msg && msg.startsWith('NOT_DISABLED') ?\n                        error_1.AuthClientErrorCode.USER_NOT_DISABLED : error_1.AuthClientErrorCode.INTERNAL_ERROR;\n                    return new error_1.FirebaseAuthError(code, batchDeleteErrorInfo.message);\n                };\n                return {\n                    index: batchDeleteErrorInfo.index,\n                    error: errMsgToError(batchDeleteErrorInfo.message),\n                };\n            });\n            return result;\n        });\n    };\n    /**\n     * Updates an existing user with the properties provided.\n     *\n     * @param {string} uid The uid identifier of the user to update.\n     * @param {UpdateRequest} properties The properties to update on the existing user.\n     * @return {Promise<UserRecord>} A promise that resolves with the modified user record.\n     */\n    BaseAuth.prototype.updateUser = function (uid, properties) {\n        var _this = this;\n        // Although we don't really advertise it, we want to also handle linking of\n        // non-federated idps with this call. So if we detect one of them, we'll\n        // adjust the properties parameter appropriately. This *does* imply that a\n        // conflict could arise, e.g. if the user provides a phoneNumber property,\n        // but also provides a providerToLink with a 'phone' provider id. In that\n        // case, we'll throw an error.\n        properties = deep_copy_1.deepCopy(properties);\n        if (properties === null || properties === void 0 ? void 0 : properties.providerToLink) {\n            if (properties.providerToLink.providerId === 'email') {\n                if (typeof properties.email !== 'undefined') {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Both UpdateRequest.email and UpdateRequest.providerToLink.providerId='email' were set. To \"\n                        + 'link to the email/password provider, only specify the UpdateRequest.email field.');\n                }\n                properties.email = properties.providerToLink.uid;\n                delete properties.providerToLink;\n            }\n            else if (properties.providerToLink.providerId === 'phone') {\n                if (typeof properties.phoneNumber !== 'undefined') {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Both UpdateRequest.phoneNumber and UpdateRequest.providerToLink.providerId='phone' were set. To \"\n                        + 'link to a phone provider, only specify the UpdateRequest.phoneNumber field.');\n                }\n                properties.phoneNumber = properties.providerToLink.uid;\n                delete properties.providerToLink;\n            }\n        }\n        if (properties === null || properties === void 0 ? void 0 : properties.providersToUnlink) {\n            if (properties.providersToUnlink.indexOf('phone') !== -1) {\n                // If we've been told to unlink the phone provider both via setting\n                // phoneNumber to null *and* by setting providersToUnlink to include\n                // 'phone', then we'll reject that. Though it might also be reasonable\n                // to relax this restriction and just unlink it.\n                if (properties.phoneNumber === null) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Both UpdateRequest.phoneNumber=null and UpdateRequest.providersToUnlink=['phone'] were set. To \"\n                        + 'unlink from a phone provider, only specify the UpdateRequest.phoneNumber=null field.');\n                }\n            }\n        }\n        return this.authRequestHandler.updateExistingAccount(uid, properties)\n            .then(function (existingUid) {\n            // Return the corresponding user record.\n            return _this.getUser(existingUid);\n        });\n    };\n    /**\n     * Sets additional developer claims on an existing user identified by the provided UID.\n     *\n     * @param {string} uid The user to edit.\n     * @param {object} customUserClaims The developer claims to set.\n     * @return {Promise<void>} A promise that resolves when the operation completes\n     *     successfully.\n     */\n    BaseAuth.prototype.setCustomUserClaims = function (uid, customUserClaims) {\n        return this.authRequestHandler.setCustomUserClaims(uid, customUserClaims)\n            .then(function () {\n            // Return nothing on success.\n        });\n    };\n    /**\n     * Revokes all refresh tokens for the specified user identified by the provided UID.\n     * In addition to revoking all refresh tokens for a user, all ID tokens issued before\n     * revocation will also be revoked on the Auth backend. Any request with an ID token\n     * generated before revocation will be rejected with a token expired error.\n     *\n     * @param {string} uid The user whose tokens are to be revoked.\n     * @return {Promise<void>} A promise that resolves when the operation completes\n     *     successfully.\n     */\n    BaseAuth.prototype.revokeRefreshTokens = function (uid) {\n        return this.authRequestHandler.revokeRefreshTokens(uid)\n            .then(function () {\n            // Return nothing on success.\n        });\n    };\n    /**\n     * Imports the list of users provided to Firebase Auth. This is useful when\n     * migrating from an external authentication system without having to use the Firebase CLI SDK.\n     * At most, 1000 users are allowed to be imported one at a time.\n     * When importing a list of password users, UserImportOptions are required to be specified.\n     *\n     * @param {UserImportRecord[]} users The list of user records to import to Firebase Auth.\n     * @param {UserImportOptions=} options The user import options, required when the users provided\n     *     include password credentials.\n     * @return {Promise<UserImportResult>} A promise that resolves when the operation completes\n     *     with the result of the import. This includes the number of successful imports, the number\n     *     of failed uploads and their corresponding errors.\n     */\n    BaseAuth.prototype.importUsers = function (users, options) {\n        return this.authRequestHandler.uploadAccount(users, options);\n    };\n    /**\n     * Creates a new Firebase session cookie with the specified options that can be used for\n     * session management (set as a server side session cookie with custom cookie policy).\n     * The session cookie JWT will have the same payload claims as the provided ID token.\n     *\n     * @param {string} idToken The Firebase ID token to exchange for a session cookie.\n     * @param {SessionCookieOptions} sessionCookieOptions The session cookie options which includes\n     *     custom session duration.\n     *\n     * @return {Promise<string>} A promise that resolves on success with the created session cookie.\n     */\n    BaseAuth.prototype.createSessionCookie = function (idToken, sessionCookieOptions) {\n        // Return rejected promise if expiresIn is not available.\n        if (!validator.isNonNullObject(sessionCookieOptions) ||\n            !validator.isNumber(sessionCookieOptions.expiresIn)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION));\n        }\n        return this.authRequestHandler.createSessionCookie(idToken, sessionCookieOptions.expiresIn);\n    };\n    /**\n     * Verifies a Firebase session cookie. Returns a Promise with the tokens claims. Rejects\n     * the promise if the token could not be verified. If checkRevoked is set to true,\n     * verifies if the session corresponding to the session cookie was revoked. If the corresponding\n     * user's session was invalidated, an auth/session-cookie-revoked error is thrown. If not\n     * specified the check is not performed.\n     *\n     * @param {string} sessionCookie The session cookie to verify.\n     * @param {boolean=} checkRevoked Whether to check if the session cookie is revoked.\n     * @return {Promise<DecodedIdToken>} A Promise that will be fulfilled after a successful\n     *     verification.\n     */\n    BaseAuth.prototype.verifySessionCookie = function (sessionCookie, checkRevoked) {\n        var _this = this;\n        if (checkRevoked === void 0) { checkRevoked = false; }\n        var isEmulator = auth_api_request_1.useEmulator();\n        return this.sessionCookieVerifier.verifyJWT(sessionCookie, isEmulator)\n            .then(function (decodedIdToken) {\n            // Whether to check if the token was revoked.\n            if (checkRevoked || isEmulator) {\n                return _this.verifyDecodedJWTNotRevoked(decodedIdToken, error_1.AuthClientErrorCode.SESSION_COOKIE_REVOKED);\n            }\n            return decodedIdToken;\n        });\n    };\n    /**\n     * Generates the out of band email action link for password reset flows for the\n     * email specified using the action code settings provided.\n     * Returns a promise that resolves with the generated link.\n     *\n     * @param {string} email The email of the user whose password is to be reset.\n     * @param {ActionCodeSettings=} actionCodeSettings The optional action code setings which defines whether\n     *     the link is to be handled by a mobile app and the additional state information to be passed in the\n     *     deep link, etc.\n     * @return {Promise<string>} A promise that resolves with the password reset link.\n     */\n    BaseAuth.prototype.generatePasswordResetLink = function (email, actionCodeSettings) {\n        return this.authRequestHandler.getEmailActionLink('PASSWORD_RESET', email, actionCodeSettings);\n    };\n    /**\n     * Generates the out of band email action link for email verification flows for the\n     * email specified using the action code settings provided.\n     * Returns a promise that resolves with the generated link.\n     *\n     * @param {string} email The email of the user to be verified.\n     * @param {ActionCodeSettings=} actionCodeSettings The optional action code setings which defines whether\n     *     the link is to be handled by a mobile app and the additional state information to be passed in the\n     *     deep link, etc.\n     * @return {Promise<string>} A promise that resolves with the email verification link.\n     */\n    BaseAuth.prototype.generateEmailVerificationLink = function (email, actionCodeSettings) {\n        return this.authRequestHandler.getEmailActionLink('VERIFY_EMAIL', email, actionCodeSettings);\n    };\n    /**\n     * Generates the out of band email action link for email link sign-in flows for the\n     * email specified using the action code settings provided.\n     * Returns a promise that resolves with the generated link.\n     *\n     * @param {string} email The email of the user signing in.\n     * @param {ActionCodeSettings} actionCodeSettings The required action code setings which defines whether\n     *     the link is to be handled by a mobile app and the additional state information to be passed in the\n     *     deep link, etc.\n     * @return {Promise<string>} A promise that resolves with the email sign-in link.\n     */\n    BaseAuth.prototype.generateSignInWithEmailLink = function (email, actionCodeSettings) {\n        return this.authRequestHandler.getEmailActionLink('EMAIL_SIGNIN', email, actionCodeSettings);\n    };\n    /**\n     * Returns the list of existing provider configuation matching the filter provided.\n     * At most, 100 provider configs are allowed to be imported at a time.\n     *\n     * @param {AuthProviderConfigFilter} options The provider config filter to apply.\n     * @return {Promise<ListProviderConfigResults>} A promise that resolves with the list of provider configs\n     *     meeting the filter requirements.\n     */\n    BaseAuth.prototype.listProviderConfigs = function (options) {\n        var processResponse = function (response, providerConfigs) {\n            // Return list of provider configuration and the next page token if available.\n            var result = {\n                providerConfigs: providerConfigs,\n            };\n            // Delete result.pageToken if undefined.\n            if (Object.prototype.hasOwnProperty.call(response, 'nextPageToken')) {\n                result.pageToken = response.nextPageToken;\n            }\n            return result;\n        };\n        if (options && options.type === 'oidc') {\n            return this.authRequestHandler.listOAuthIdpConfigs(options.maxResults, options.pageToken)\n                .then(function (response) {\n                // List of provider configurations to return.\n                var providerConfigs = [];\n                // Convert each provider config response to a OIDCConfig.\n                response.oauthIdpConfigs.forEach(function (configResponse) {\n                    providerConfigs.push(new auth_config_1.OIDCConfig(configResponse));\n                });\n                // Return list of provider configuration and the next page token if available.\n                return processResponse(response, providerConfigs);\n            });\n        }\n        else if (options && options.type === 'saml') {\n            return this.authRequestHandler.listInboundSamlConfigs(options.maxResults, options.pageToken)\n                .then(function (response) {\n                // List of provider configurations to return.\n                var providerConfigs = [];\n                // Convert each provider config response to a SAMLConfig.\n                response.inboundSamlConfigs.forEach(function (configResponse) {\n                    providerConfigs.push(new auth_config_1.SAMLConfig(configResponse));\n                });\n                // Return list of provider configuration and the next page token if available.\n                return processResponse(response, providerConfigs);\n            });\n        }\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"AuthProviderConfigFilter.type\" must be either \"saml\" or \"oidc\"'));\n    };\n    /**\n     * Looks up an Auth provider configuration by ID.\n     * Returns a promise that resolves with the provider configuration corresponding to the provider ID specified.\n     *\n     * @param {string} providerId  The provider ID corresponding to the provider config to return.\n     * @return {Promise<AuthProviderConfig>}\n     */\n    BaseAuth.prototype.getProviderConfig = function (providerId) {\n        if (auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.getOAuthIdpConfig(providerId)\n                .then(function (response) {\n                return new auth_config_1.OIDCConfig(response);\n            });\n        }\n        else if (auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.getInboundSamlConfig(providerId)\n                .then(function (response) {\n                return new auth_config_1.SAMLConfig(response);\n            });\n        }\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    };\n    /**\n     * Deletes the provider configuration corresponding to the provider ID passed.\n     *\n     * @param {string} providerId The provider ID corresponding to the provider config to delete.\n     * @return {Promise<void>} A promise that resolves on completion.\n     */\n    BaseAuth.prototype.deleteProviderConfig = function (providerId) {\n        if (auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.deleteOAuthIdpConfig(providerId);\n        }\n        else if (auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.deleteInboundSamlConfig(providerId);\n        }\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    };\n    /**\n     * Returns a promise that resolves with the updated AuthProviderConfig when the provider configuration corresponding\n     * to the provider ID specified is updated with the specified configuration.\n     *\n     * @param {string} providerId The provider ID corresponding to the provider config to update.\n     * @param {UpdateAuthProviderRequest} updatedConfig The updated configuration.\n     * @return {Promise<AuthProviderConfig>} A promise that resolves with the updated provider configuration.\n     */\n    BaseAuth.prototype.updateProviderConfig = function (providerId, updatedConfig) {\n        if (!validator.isNonNullObject(updatedConfig)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, 'Request is missing \"UpdateAuthProviderRequest\" configuration.'));\n        }\n        if (auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.updateOAuthIdpConfig(providerId, updatedConfig)\n                .then(function (response) {\n                return new auth_config_1.OIDCConfig(response);\n            });\n        }\n        else if (auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.updateInboundSamlConfig(providerId, updatedConfig)\n                .then(function (response) {\n                return new auth_config_1.SAMLConfig(response);\n            });\n        }\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    };\n    /**\n     * Returns a promise that resolves with the newly created AuthProviderConfig when the new provider configuration is\n     * created.\n     * @param {AuthProviderConfig} config The provider configuration to create.\n     * @return {Promise<AuthProviderConfig>} A promise that resolves with the created provider configuration.\n     */\n    BaseAuth.prototype.createProviderConfig = function (config) {\n        if (!validator.isNonNullObject(config)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, 'Request is missing \"AuthProviderConfig\" configuration.'));\n        }\n        if (auth_config_1.OIDCConfig.isProviderId(config.providerId)) {\n            return this.authRequestHandler.createOAuthIdpConfig(config)\n                .then(function (response) {\n                return new auth_config_1.OIDCConfig(response);\n            });\n        }\n        else if (auth_config_1.SAMLConfig.isProviderId(config.providerId)) {\n            return this.authRequestHandler.createInboundSamlConfig(config)\n                .then(function (response) {\n                return new auth_config_1.SAMLConfig(response);\n            });\n        }\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    };\n    /**\n     * Verifies the decoded Firebase issued JWT is not revoked. Returns a promise that resolves\n     * with the decoded claims on success. Rejects the promise with revocation error if revoked.\n     *\n     * @param {DecodedIdToken} decodedIdToken The JWT's decoded claims.\n     * @param {ErrorInfo} revocationErrorInfo The revocation error info to throw on revocation\n     *     detection.\n     * @return {Promise<DecodedIdToken>} A Promise that will be fulfilled after a successful\n     *     verification.\n     */\n    BaseAuth.prototype.verifyDecodedJWTNotRevoked = function (decodedIdToken, revocationErrorInfo) {\n        // Get tokens valid after time for the corresponding user.\n        return this.getUser(decodedIdToken.sub)\n            .then(function (user) {\n            // If no tokens valid after time available, token is not revoked.\n            if (user.tokensValidAfterTime) {\n                // Get the ID token authentication time and convert to milliseconds UTC.\n                var authTimeUtc = decodedIdToken.auth_time * 1000;\n                // Get user tokens valid after time in milliseconds UTC.\n                var validSinceUtc = new Date(user.tokensValidAfterTime).getTime();\n                // Check if authentication time is older than valid since time.\n                if (authTimeUtc < validSinceUtc) {\n                    throw new error_1.FirebaseAuthError(revocationErrorInfo);\n                }\n            }\n            // All checks above passed. Return the decoded token.\n            return decodedIdToken;\n        });\n    };\n    return BaseAuth;\n}());\nexports.BaseAuth = BaseAuth;\n/**\n * The tenant aware Auth class.\n */\nvar TenantAwareAuth = /** @class */ (function (_super) {\n    __extends(TenantAwareAuth, _super);\n    /**\n     * The TenantAwareAuth class constructor.\n     *\n     * @param {object} app The app that created this tenant.\n     * @param tenantId The corresponding tenant ID.\n     * @constructor\n     */\n    function TenantAwareAuth(app, tenantId) {\n        var _this = this;\n        var cryptoSigner = auth_api_request_1.useEmulator() ? new token_generator_1.EmulatedSigner() : token_generator_1.cryptoSignerFromApp(app);\n        var tokenGenerator = new token_generator_1.FirebaseTokenGenerator(cryptoSigner, tenantId);\n        _this = _super.call(this, app, new auth_api_request_1.TenantAwareAuthRequestHandler(app, tenantId), tokenGenerator) || this;\n        utils.addReadonlyGetter(_this, 'tenantId', tenantId);\n        return _this;\n    }\n    /**\n     * Verifies a JWT auth token. Returns a Promise with the tokens claims. Rejects\n     * the promise if the token could not be verified. If checkRevoked is set to true,\n     * verifies if the session corresponding to the ID token was revoked. If the corresponding\n     * user's session was invalidated, an auth/id-token-revoked error is thrown. If not specified\n     * the check is not applied.\n     *\n     * @param {string} idToken The JWT to verify.\n     * @param {boolean=} checkRevoked Whether to check if the ID token is revoked.\n     * @return {Promise<DecodedIdToken>} A Promise that will be fulfilled after a successful\n     *     verification.\n     */\n    TenantAwareAuth.prototype.verifyIdToken = function (idToken, checkRevoked) {\n        var _this = this;\n        if (checkRevoked === void 0) { checkRevoked = false; }\n        return _super.prototype.verifyIdToken.call(this, idToken, checkRevoked)\n            .then(function (decodedClaims) {\n            // Validate tenant ID.\n            if (decodedClaims.firebase.tenant !== _this.tenantId) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n            }\n            return decodedClaims;\n        });\n    };\n    /**\n     * Creates a new Firebase session cookie with the specified options that can be used for\n     * session management (set as a server side session cookie with custom cookie policy).\n     * The session cookie JWT will have the same payload claims as the provided ID token.\n     *\n     * @param {string} idToken The Firebase ID token to exchange for a session cookie.\n     * @param {SessionCookieOptions} sessionCookieOptions The session cookie options which includes\n     *     custom session duration.\n     *\n     * @return {Promise<string>} A promise that resolves on success with the created session cookie.\n     */\n    TenantAwareAuth.prototype.createSessionCookie = function (idToken, sessionCookieOptions) {\n        var _this = this;\n        // Validate arguments before processing.\n        if (!validator.isNonEmptyString(idToken)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN));\n        }\n        if (!validator.isNonNullObject(sessionCookieOptions) ||\n            !validator.isNumber(sessionCookieOptions.expiresIn)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION));\n        }\n        // This will verify the ID token and then match the tenant ID before creating the session cookie.\n        return this.verifyIdToken(idToken)\n            .then(function () {\n            return _super.prototype.createSessionCookie.call(_this, idToken, sessionCookieOptions);\n        });\n    };\n    /**\n     * Verifies a Firebase session cookie. Returns a Promise with the tokens claims. Rejects\n     * the promise if the token could not be verified. If checkRevoked is set to true,\n     * verifies if the session corresponding to the session cookie was revoked. If the corresponding\n     * user's session was invalidated, an auth/session-cookie-revoked error is thrown. If not\n     * specified the check is not performed.\n     *\n     * @param {string} sessionCookie The session cookie to verify.\n     * @param {boolean=} checkRevoked Whether to check if the session cookie is revoked.\n     * @return {Promise<DecodedIdToken>} A Promise that will be fulfilled after a successful\n     *     verification.\n     */\n    TenantAwareAuth.prototype.verifySessionCookie = function (sessionCookie, checkRevoked) {\n        var _this = this;\n        if (checkRevoked === void 0) { checkRevoked = false; }\n        return _super.prototype.verifySessionCookie.call(this, sessionCookie, checkRevoked)\n            .then(function (decodedClaims) {\n            if (decodedClaims.firebase.tenant !== _this.tenantId) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n            }\n            return decodedClaims;\n        });\n    };\n    return TenantAwareAuth;\n}(BaseAuth));\nexports.TenantAwareAuth = TenantAwareAuth;\n/**\n * Auth service bound to the provided app.\n * An Auth instance can have multiple tenants.\n */\nvar Auth = /** @class */ (function (_super) {\n    __extends(Auth, _super);\n    /**\n     * @param {object} app The app for this Auth service.\n     * @constructor\n     */\n    function Auth(app) {\n        var _this = _super.call(this, app, new auth_api_request_1.AuthRequestHandler(app)) || this;\n        _this.app_ = app;\n        _this.tenantManager_ = new tenant_manager_1.TenantManager(app);\n        return _this;\n    }\n    Object.defineProperty(Auth.prototype, \"app\", {\n        /**\n         * Returns the app associated with this Auth instance.\n         *\n         * @return {FirebaseApp} The app associated with this Auth instance.\n         */\n        get: function () {\n            return this.app_;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /** @return The current Auth instance's tenant manager. */\n    Auth.prototype.tenantManager = function () {\n        return this.tenantManager_;\n    };\n    return Auth;\n}(BaseAuth));\nexports.Auth = Auth;\n"]},"metadata":{},"sourceType":"script"}