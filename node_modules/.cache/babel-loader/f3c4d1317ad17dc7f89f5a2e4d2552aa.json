{"ast":null,"code":"\"use strict\";\n\nmodule.exports = verifier;\n\nvar Enum = require(\"./enum\"),\n    util = require(\"./util\");\n\nfunction invalid(field, expected) {\n  return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\" + field.keyType + \"}\" : \"\") + \" expected\";\n}\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\n\n\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n  /* eslint-disable no-unexpected-multiline */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) {\n      gen(\"switch(%s){\", ref)(\"default:\")(\"return%j\", invalid(field, \"enum value\"));\n\n      for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen(\"case %i:\", field.resolvedType.values[keys[j]]);\n\n      gen(\"break\")(\"}\");\n    } else {\n      gen(\"{\")(\"var e=types[%i].verify(%s);\", fieldIndex, ref)(\"if(e)\")(\"return%j+e\", field.name + \".\")(\"}\");\n    }\n  } else {\n    switch (field.type) {\n      case \"int32\":\n      case \"uint32\":\n      case \"sint32\":\n      case \"fixed32\":\n      case \"sfixed32\":\n        gen(\"if(!util.isInteger(%s))\", ref)(\"return%j\", invalid(field, \"integer\"));\n        break;\n\n      case \"int64\":\n      case \"uint64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)(\"return%j\", invalid(field, \"integer|Long\"));\n        break;\n\n      case \"float\":\n      case \"double\":\n        gen(\"if(typeof %s!==\\\"number\\\")\", ref)(\"return%j\", invalid(field, \"number\"));\n        break;\n\n      case \"bool\":\n        gen(\"if(typeof %s!==\\\"boolean\\\")\", ref)(\"return%j\", invalid(field, \"boolean\"));\n        break;\n\n      case \"string\":\n        gen(\"if(!util.isString(%s))\", ref)(\"return%j\", invalid(field, \"string\"));\n        break;\n\n      case \"bytes\":\n        gen(\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)(\"return%j\", invalid(field, \"buffer\"));\n        break;\n    }\n  }\n\n  return gen;\n  /* eslint-enable no-unexpected-multiline */\n}\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\n\n\nfunction genVerifyKey(gen, field, ref) {\n  /* eslint-disable no-unexpected-multiline */\n  switch (field.keyType) {\n    case \"int32\":\n    case \"uint32\":\n    case \"sint32\":\n    case \"fixed32\":\n    case \"sfixed32\":\n      gen(\"if(!util.key32Re.test(%s))\", ref)(\"return%j\", invalid(field, \"integer key\"));\n      break;\n\n    case \"int64\":\n    case \"uint64\":\n    case \"sint64\":\n    case \"fixed64\":\n    case \"sfixed64\":\n      gen(\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n      (\"return%j\", invalid(field, \"integer|Long key\"));\n      break;\n\n    case \"bool\":\n      gen(\"if(!util.key2Re.test(%s))\", ref)(\"return%j\", invalid(field, \"boolean key\"));\n      break;\n  }\n\n  return gen;\n  /* eslint-enable no-unexpected-multiline */\n}\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\n\n\nfunction verifier(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n  var gen = util.codegen([\"m\"], mtype.name + \"$verify\")(\"if(typeof m!==\\\"object\\\"||m===null)\")(\"return%j\", \"object expected\");\n  var oneofs = mtype.oneofsArray,\n      seenFirstField = {};\n  if (oneofs.length) gen(\"var p={}\");\n\n  for (var i = 0; i <\n  /* initializes */\n  mtype.fieldsArray.length; ++i) {\n    var field = mtype._fieldsArray[i].resolve(),\n        ref = \"m\" + util.safeProp(field.name);\n\n    if (field.optional) gen(\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n    // map fields\n\n    if (field.map) {\n      gen(\"if(!util.isObject(%s))\", ref)(\"return%j\", invalid(field, \"object\"))(\"var k=Object.keys(%s)\", ref)(\"for(var i=0;i<k.length;++i){\");\n      genVerifyKey(gen, field, \"k[i]\");\n      genVerifyValue(gen, field, i, ref + \"[k[i]]\")(\"}\"); // repeated fields\n    } else if (field.repeated) {\n      gen(\"if(!Array.isArray(%s))\", ref)(\"return%j\", invalid(field, \"array\"))(\"for(var i=0;i<%s.length;++i){\", ref);\n      genVerifyValue(gen, field, i, ref + \"[i]\")(\"}\"); // required or present fields\n    } else {\n      if (field.partOf) {\n        var oneofProp = util.safeProp(field.partOf.name);\n        if (seenFirstField[field.partOf.name] === 1) gen(\"if(p%s===1)\", oneofProp)(\"return%j\", field.partOf.name + \": multiple values\");\n        seenFirstField[field.partOf.name] = 1;\n        gen(\"p%s=1\", oneofProp);\n      }\n\n      genVerifyValue(gen, field, i, ref);\n    }\n\n    if (field.optional) gen(\"}\");\n  }\n\n  return gen(\"return null\");\n  /* eslint-enable no-unexpected-multiline */\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/protobufjs/src/verifier.js"],"names":["module","exports","verifier","Enum","require","util","invalid","field","expected","name","repeated","map","keyType","genVerifyValue","gen","fieldIndex","ref","resolvedType","keys","Object","values","j","length","type","genVerifyKey","mtype","codegen","oneofs","oneofsArray","seenFirstField","i","fieldsArray","_fieldsArray","resolve","safeProp","optional","partOf","oneofProp"],"mappings":"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","sourcesContent":["\"use strict\";\nmodule.exports = verifier;\n\nvar Enum      = require(\"./enum\"),\n    util      = require(\"./util\");\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(%s){\", ref)\n                (\"default:\")\n                    (\"return%j\", invalid(field, \"enum value\"));\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen\n                    (\"break\")\n            (\"}\");\n        } else {\n            gen\n            (\"{\")\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                (\"if(e)\")\n                    (\"return%j+e\", field.name + \".\")\n            (\"}\");\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\": gen\n                (\"if(!util.isInteger(%s))\", ref)\n                    (\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                    (\"return%j\", invalid(field, \"integer|Long\"));\n                break;\n            case \"float\":\n            case \"double\": gen\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\n                    (\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\": gen\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                    (\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\": gen\n                (\"if(!util.isString(%s))\", ref)\n                    (\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\": gen\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                    (\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\": gen\n            (\"if(!util.key32Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\": gen\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                (\"return%j\", invalid(field, \"integer|Long key\"));\n            break;\n        case \"bool\": gen\n            (\"if(!util.key2Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\n        (\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n        seenFirstField = {};\n    if (oneofs.length) gen\n    (\"var p={}\");\n\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            ref   = \"m\" + util.safeProp(field.name);\n\n        if (field.optional) gen\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n        // map fields\n        if (field.map) { gen\n            (\"if(!util.isObject(%s))\", ref)\n                (\"return%j\", invalid(field, \"object\"))\n            (\"var k=Object.keys(%s)\", ref)\n            (\"for(var i=0;i<k.length;++i){\");\n                genVerifyKey(gen, field, \"k[i]\");\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n            (\"}\");\n\n        // repeated fields\n        } else if (field.repeated) { gen\n            (\"if(!Array.isArray(%s))\", ref)\n                (\"return%j\", invalid(field, \"array\"))\n            (\"for(var i=0;i<%s.length;++i){\", ref);\n                genVerifyValue(gen, field, i, ref + \"[i]\")\n            (\"}\");\n\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen\n            (\"if(p%s===1)\", oneofProp)\n                (\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen\n            (\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen\n        (\"}\");\n    }\n    return gen\n    (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}"]},"metadata":{},"sourceType":"script"}