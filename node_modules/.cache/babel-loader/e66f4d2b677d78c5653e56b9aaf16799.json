{"ast":null,"code":"var aws4 = exports,\n    url = require('url'),\n    querystring = require('querystring'),\n    crypto = require('crypto'),\n    lru = require('./lru'),\n    credentialsCache = lru(1000); // http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\n\n\nfunction hmac(key, string, encoding) {\n  return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding);\n}\n\nfunction hash(string, encoding) {\n  return crypto.createHash('sha256').update(string, 'utf8').digest(encoding);\n} // This function assumes the string has already been percent encoded\n\n\nfunction encodeRfc3986(urlEncodedString) {\n  return urlEncodedString.replace(/[!'()*]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n\nfunction encodeRfc3986Full(str) {\n  return encodeRfc3986(encodeURIComponent(str));\n} // A bit of a combination of:\n// https://github.com/aws/aws-sdk-java-v2/blob/dc695de6ab49ad03934e1b02e7263abbd2354be0/core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java#L59\n// https://github.com/aws/aws-sdk-js/blob/18cb7e5b463b46239f9fdd4a65e2ff8c81831e8f/lib/signers/v4.js#L191-L199\n// https://github.com/mhart/aws4fetch/blob/b3aed16b6f17384cf36ea33bcba3c1e9f3bdfefd/src/main.js#L25-L34\n\n\nvar HEADERS_TO_IGNORE = {\n  'authorization': true,\n  'connection': true,\n  'x-amzn-trace-id': true,\n  'user-agent': true,\n  'expect': true,\n  'presigned-expires': true,\n  'range': true\n}; // request: { path | body, [host], [method], [headers], [service], [region] }\n// credentials: { accessKeyId, secretAccessKey, [sessionToken] }\n\nfunction RequestSigner(request, credentials) {\n  if (typeof request === 'string') request = url.parse(request);\n  var headers = request.headers = request.headers || {},\n      hostParts = (!this.service || !this.region) && this.matchHost(request.hostname || request.host || headers.Host || headers.host);\n  this.request = request;\n  this.credentials = credentials || this.defaultCredentials();\n  this.service = request.service || hostParts[0] || '';\n  this.region = request.region || hostParts[1] || 'us-east-1'; // SES uses a different domain from the service name\n\n  if (this.service === 'email') this.service = 'ses';\n  if (!request.method && request.body) request.method = 'POST';\n\n  if (!headers.Host && !headers.host) {\n    headers.Host = request.hostname || request.host || this.createHost(); // If a port is specified explicitly, use it as is\n\n    if (request.port) headers.Host += ':' + request.port;\n  }\n\n  if (!request.hostname && !request.host) request.hostname = headers.Host || headers.host;\n  this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT';\n}\n\nRequestSigner.prototype.matchHost = function (host) {\n  var match = (host || '').match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(\\.cn)?$/);\n  var hostParts = (match || []).slice(1, 3); // ES's hostParts are sometimes the other way round, if the value that is expected\n  // to be region equals ‘es’ switch them back\n  // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com\n\n  if (hostParts[1] === 'es') hostParts = hostParts.reverse();\n\n  if (hostParts[1] == 's3') {\n    hostParts[0] = 's3';\n    hostParts[1] = 'us-east-1';\n  } else {\n    for (var i = 0; i < 2; i++) {\n      if (/^s3-/.test(hostParts[i])) {\n        hostParts[1] = hostParts[i].slice(3);\n        hostParts[0] = 's3';\n        break;\n      }\n    }\n  }\n\n  return hostParts;\n}; // http://docs.aws.amazon.com/general/latest/gr/rande.html\n\n\nRequestSigner.prototype.isSingleRegion = function () {\n  // Special case for S3 and SimpleDB in us-east-1\n  if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true;\n  return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts'].indexOf(this.service) >= 0;\n};\n\nRequestSigner.prototype.createHost = function () {\n  var region = this.isSingleRegion() ? '' : '.' + this.region,\n      subdomain = this.service === 'ses' ? 'email' : this.service;\n  return subdomain + region + '.amazonaws.com';\n};\n\nRequestSigner.prototype.prepareRequest = function () {\n  this.parsePath();\n  var request = this.request,\n      headers = request.headers,\n      query;\n\n  if (request.signQuery) {\n    this.parsedPath.query = query = this.parsedPath.query || {};\n    if (this.credentials.sessionToken) query['X-Amz-Security-Token'] = this.credentials.sessionToken;\n    if (this.service === 's3' && !query['X-Amz-Expires']) query['X-Amz-Expires'] = 86400;\n    if (query['X-Amz-Date']) this.datetime = query['X-Amz-Date'];else query['X-Amz-Date'] = this.getDateTime();\n    query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString();\n    query['X-Amz-SignedHeaders'] = this.signedHeaders();\n  } else {\n    if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {\n      if (request.body && !headers['Content-Type'] && !headers['content-type']) headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';\n      if (request.body && !headers['Content-Length'] && !headers['content-length']) headers['Content-Length'] = Buffer.byteLength(request.body);\n      if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token']) headers['X-Amz-Security-Token'] = this.credentials.sessionToken;\n      if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256']) headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex');\n      if (headers['X-Amz-Date'] || headers['x-amz-date']) this.datetime = headers['X-Amz-Date'] || headers['x-amz-date'];else headers['X-Amz-Date'] = this.getDateTime();\n    }\n\n    delete headers.Authorization;\n    delete headers.authorization;\n  }\n};\n\nRequestSigner.prototype.sign = function () {\n  if (!this.parsedPath) this.prepareRequest();\n\n  if (this.request.signQuery) {\n    this.parsedPath.query['X-Amz-Signature'] = this.signature();\n  } else {\n    this.request.headers.Authorization = this.authHeader();\n  }\n\n  this.request.path = this.formatPath();\n  return this.request;\n};\n\nRequestSigner.prototype.getDateTime = function () {\n  if (!this.datetime) {\n    var headers = this.request.headers,\n        date = new Date(headers.Date || headers.date || new Date());\n    this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''); // Remove the trailing 'Z' on the timestamp string for CodeCommit git access\n\n    if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1);\n  }\n\n  return this.datetime;\n};\n\nRequestSigner.prototype.getDate = function () {\n  return this.getDateTime().substr(0, 8);\n};\n\nRequestSigner.prototype.authHeader = function () {\n  return ['AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(), 'SignedHeaders=' + this.signedHeaders(), 'Signature=' + this.signature()].join(', ');\n};\n\nRequestSigner.prototype.signature = function () {\n  var date = this.getDate(),\n      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),\n      kDate,\n      kRegion,\n      kService,\n      kCredentials = credentialsCache.get(cacheKey);\n\n  if (!kCredentials) {\n    kDate = hmac('AWS4' + this.credentials.secretAccessKey, date);\n    kRegion = hmac(kDate, this.region);\n    kService = hmac(kRegion, this.service);\n    kCredentials = hmac(kService, 'aws4_request');\n    credentialsCache.set(cacheKey, kCredentials);\n  }\n\n  return hmac(kCredentials, this.stringToSign(), 'hex');\n};\n\nRequestSigner.prototype.stringToSign = function () {\n  return ['AWS4-HMAC-SHA256', this.getDateTime(), this.credentialString(), hash(this.canonicalString(), 'hex')].join('\\n');\n};\n\nRequestSigner.prototype.canonicalString = function () {\n  if (!this.parsedPath) this.prepareRequest();\n  var pathStr = this.parsedPath.path,\n      query = this.parsedPath.query,\n      headers = this.request.headers,\n      queryStr = '',\n      normalizePath = this.service !== 's3',\n      decodePath = this.service === 's3' || this.request.doNotEncodePath,\n      decodeSlashesInPath = this.service === 's3',\n      firstValOnly = this.service === 's3',\n      bodyHash;\n\n  if (this.service === 's3' && this.request.signQuery) {\n    bodyHash = 'UNSIGNED-PAYLOAD';\n  } else if (this.isCodeCommitGit) {\n    bodyHash = '';\n  } else {\n    bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] || hash(this.request.body || '', 'hex');\n  }\n\n  if (query) {\n    var reducedQuery = Object.keys(query).reduce(function (obj, key) {\n      if (!key) return obj;\n      obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] : firstValOnly ? query[key][0] : query[key];\n      return obj;\n    }, {});\n    var encodedQueryPieces = [];\n    Object.keys(reducedQuery).sort().forEach(function (key) {\n      if (!Array.isArray(reducedQuery[key])) {\n        encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]));\n      } else {\n        reducedQuery[key].map(encodeRfc3986Full).sort().forEach(function (val) {\n          encodedQueryPieces.push(key + '=' + val);\n        });\n      }\n    });\n    queryStr = encodedQueryPieces.join('&');\n  }\n\n  if (pathStr !== '/') {\n    if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, '/');\n    pathStr = pathStr.split('/').reduce(function (path, piece) {\n      if (normalizePath && piece === '..') {\n        path.pop();\n      } else if (!normalizePath || piece !== '.') {\n        if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n        path.push(encodeRfc3986Full(piece));\n      }\n\n      return path;\n    }, []).join('/');\n    if (pathStr[0] !== '/') pathStr = '/' + pathStr;\n    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/');\n  }\n\n  return [this.request.method || 'GET', pathStr, queryStr, this.canonicalHeaders() + '\\n', this.signedHeaders(), bodyHash].join('\\n');\n};\n\nRequestSigner.prototype.canonicalHeaders = function () {\n  var headers = this.request.headers;\n\n  function trimAll(header) {\n    return header.toString().trim().replace(/\\s+/g, ' ');\n  }\n\n  return Object.keys(headers).filter(function (key) {\n    return HEADERS_TO_IGNORE[key.toLowerCase()] == null;\n  }).sort(function (a, b) {\n    return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n  }).map(function (key) {\n    return key.toLowerCase() + ':' + trimAll(headers[key]);\n  }).join('\\n');\n};\n\nRequestSigner.prototype.signedHeaders = function () {\n  return Object.keys(this.request.headers).map(function (key) {\n    return key.toLowerCase();\n  }).filter(function (key) {\n    return HEADERS_TO_IGNORE[key] == null;\n  }).sort().join(';');\n};\n\nRequestSigner.prototype.credentialString = function () {\n  return [this.getDate(), this.region, this.service, 'aws4_request'].join('/');\n};\n\nRequestSigner.prototype.defaultCredentials = function () {\n  var env = process.env;\n  return {\n    accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,\n    secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,\n    sessionToken: env.AWS_SESSION_TOKEN\n  };\n};\n\nRequestSigner.prototype.parsePath = function () {\n  var path = this.request.path || '/'; // S3 doesn't always encode characters > 127 correctly and\n  // all services don't encode characters > 255 correctly\n  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\n\n  if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {\n    path = encodeURI(decodeURI(path));\n  }\n\n  var queryIx = path.indexOf('?'),\n      query = null;\n\n  if (queryIx >= 0) {\n    query = querystring.parse(path.slice(queryIx + 1));\n    path = path.slice(0, queryIx);\n  }\n\n  this.parsedPath = {\n    path: path,\n    query: query\n  };\n};\n\nRequestSigner.prototype.formatPath = function () {\n  var path = this.parsedPath.path,\n      query = this.parsedPath.query;\n  if (!query) return path; // Services don't support empty query string keys\n\n  if (query[''] != null) delete query[''];\n  return path + '?' + encodeRfc3986(querystring.stringify(query));\n};\n\naws4.RequestSigner = RequestSigner;\n\naws4.sign = function (request, credentials) {\n  return new RequestSigner(request, credentials).sign();\n};","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/aws4/aws4.js"],"names":["aws4","exports","url","require","querystring","crypto","lru","credentialsCache","hmac","key","string","encoding","createHmac","update","digest","hash","createHash","encodeRfc3986","urlEncodedString","replace","c","charCodeAt","toString","toUpperCase","encodeRfc3986Full","str","encodeURIComponent","HEADERS_TO_IGNORE","RequestSigner","request","credentials","parse","headers","hostParts","service","region","matchHost","hostname","host","Host","defaultCredentials","method","body","createHost","port","isCodeCommitGit","prototype","match","slice","reverse","i","test","isSingleRegion","indexOf","subdomain","prepareRequest","parsePath","query","signQuery","parsedPath","sessionToken","datetime","getDateTime","accessKeyId","credentialString","signedHeaders","doNotModifyHeaders","Buffer","byteLength","Authorization","authorization","sign","signature","authHeader","path","formatPath","date","Date","toISOString","getDate","substr","join","cacheKey","secretAccessKey","kDate","kRegion","kService","kCredentials","get","set","stringToSign","canonicalString","pathStr","queryStr","normalizePath","decodePath","doNotEncodePath","decodeSlashesInPath","firstValOnly","bodyHash","reducedQuery","Object","keys","reduce","obj","Array","isArray","encodedQueryPieces","sort","forEach","push","map","val","split","piece","pop","decodeURIComponent","canonicalHeaders","trimAll","header","trim","filter","toLowerCase","a","b","env","process","AWS_ACCESS_KEY_ID","AWS_ACCESS_KEY","AWS_SECRET_ACCESS_KEY","AWS_SECRET_KEY","AWS_SESSION_TOKEN","encodeURI","decodeURI","queryIx","stringify"],"mappings":"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","sourcesContent":["var aws4 = exports,\n    url = require('url'),\n    querystring = require('querystring'),\n    crypto = require('crypto'),\n    lru = require('./lru'),\n    credentialsCache = lru(1000)\n\n// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\n\nfunction hmac(key, string, encoding) {\n  return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding)\n}\n\nfunction hash(string, encoding) {\n  return crypto.createHash('sha256').update(string, 'utf8').digest(encoding)\n}\n\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n  return urlEncodedString.replace(/[!'()*]/g, function(c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\nfunction encodeRfc3986Full(str) {\n  return encodeRfc3986(encodeURIComponent(str))\n}\n\n// A bit of a combination of:\n// https://github.com/aws/aws-sdk-java-v2/blob/dc695de6ab49ad03934e1b02e7263abbd2354be0/core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java#L59\n// https://github.com/aws/aws-sdk-js/blob/18cb7e5b463b46239f9fdd4a65e2ff8c81831e8f/lib/signers/v4.js#L191-L199\n// https://github.com/mhart/aws4fetch/blob/b3aed16b6f17384cf36ea33bcba3c1e9f3bdfefd/src/main.js#L25-L34\nvar HEADERS_TO_IGNORE = {\n  'authorization': true,\n  'connection': true,\n  'x-amzn-trace-id': true,\n  'user-agent': true,\n  'expect': true,\n  'presigned-expires': true,\n  'range': true,\n}\n\n// request: { path | body, [host], [method], [headers], [service], [region] }\n// credentials: { accessKeyId, secretAccessKey, [sessionToken] }\nfunction RequestSigner(request, credentials) {\n\n  if (typeof request === 'string') request = url.parse(request)\n\n  var headers = request.headers = (request.headers || {}),\n      hostParts = (!this.service || !this.region) && this.matchHost(request.hostname || request.host || headers.Host || headers.host)\n\n  this.request = request\n  this.credentials = credentials || this.defaultCredentials()\n\n  this.service = request.service || hostParts[0] || ''\n  this.region = request.region || hostParts[1] || 'us-east-1'\n\n  // SES uses a different domain from the service name\n  if (this.service === 'email') this.service = 'ses'\n\n  if (!request.method && request.body)\n    request.method = 'POST'\n\n  if (!headers.Host && !headers.host) {\n    headers.Host = request.hostname || request.host || this.createHost()\n\n    // If a port is specified explicitly, use it as is\n    if (request.port)\n      headers.Host += ':' + request.port\n  }\n  if (!request.hostname && !request.host)\n    request.hostname = headers.Host || headers.host\n\n  this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT'\n}\n\nRequestSigner.prototype.matchHost = function(host) {\n  var match = (host || '').match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(\\.cn)?$/)\n  var hostParts = (match || []).slice(1, 3)\n\n  // ES's hostParts are sometimes the other way round, if the value that is expected\n  // to be region equals ‘es’ switch them back\n  // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com\n  if (hostParts[1] === 'es')\n    hostParts = hostParts.reverse()\n\n  if (hostParts[1] == 's3') {\n    hostParts[0] = 's3'\n    hostParts[1] = 'us-east-1'\n  } else {\n    for (var i = 0; i < 2; i++) {\n      if (/^s3-/.test(hostParts[i])) {\n        hostParts[1] = hostParts[i].slice(3)\n        hostParts[0] = 's3'\n        break\n      }\n    }\n  }\n\n  return hostParts\n}\n\n// http://docs.aws.amazon.com/general/latest/gr/rande.html\nRequestSigner.prototype.isSingleRegion = function() {\n  // Special case for S3 and SimpleDB in us-east-1\n  if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true\n\n  return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts']\n    .indexOf(this.service) >= 0\n}\n\nRequestSigner.prototype.createHost = function() {\n  var region = this.isSingleRegion() ? '' : '.' + this.region,\n      subdomain = this.service === 'ses' ? 'email' : this.service\n  return subdomain + region + '.amazonaws.com'\n}\n\nRequestSigner.prototype.prepareRequest = function() {\n  this.parsePath()\n\n  var request = this.request, headers = request.headers, query\n\n  if (request.signQuery) {\n\n    this.parsedPath.query = query = this.parsedPath.query || {}\n\n    if (this.credentials.sessionToken)\n      query['X-Amz-Security-Token'] = this.credentials.sessionToken\n\n    if (this.service === 's3' && !query['X-Amz-Expires'])\n      query['X-Amz-Expires'] = 86400\n\n    if (query['X-Amz-Date'])\n      this.datetime = query['X-Amz-Date']\n    else\n      query['X-Amz-Date'] = this.getDateTime()\n\n    query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256'\n    query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString()\n    query['X-Amz-SignedHeaders'] = this.signedHeaders()\n\n  } else {\n\n    if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {\n      if (request.body && !headers['Content-Type'] && !headers['content-type'])\n        headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8'\n\n      if (request.body && !headers['Content-Length'] && !headers['content-length'])\n        headers['Content-Length'] = Buffer.byteLength(request.body)\n\n      if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token'])\n        headers['X-Amz-Security-Token'] = this.credentials.sessionToken\n\n      if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256'])\n        headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex')\n\n      if (headers['X-Amz-Date'] || headers['x-amz-date'])\n        this.datetime = headers['X-Amz-Date'] || headers['x-amz-date']\n      else\n        headers['X-Amz-Date'] = this.getDateTime()\n    }\n\n    delete headers.Authorization\n    delete headers.authorization\n  }\n}\n\nRequestSigner.prototype.sign = function() {\n  if (!this.parsedPath) this.prepareRequest()\n\n  if (this.request.signQuery) {\n    this.parsedPath.query['X-Amz-Signature'] = this.signature()\n  } else {\n    this.request.headers.Authorization = this.authHeader()\n  }\n\n  this.request.path = this.formatPath()\n\n  return this.request\n}\n\nRequestSigner.prototype.getDateTime = function() {\n  if (!this.datetime) {\n    var headers = this.request.headers,\n      date = new Date(headers.Date || headers.date || new Date)\n\n    this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '')\n\n    // Remove the trailing 'Z' on the timestamp string for CodeCommit git access\n    if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1)\n  }\n  return this.datetime\n}\n\nRequestSigner.prototype.getDate = function() {\n  return this.getDateTime().substr(0, 8)\n}\n\nRequestSigner.prototype.authHeader = function() {\n  return [\n    'AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(),\n    'SignedHeaders=' + this.signedHeaders(),\n    'Signature=' + this.signature(),\n  ].join(', ')\n}\n\nRequestSigner.prototype.signature = function() {\n  var date = this.getDate(),\n      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),\n      kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey)\n  if (!kCredentials) {\n    kDate = hmac('AWS4' + this.credentials.secretAccessKey, date)\n    kRegion = hmac(kDate, this.region)\n    kService = hmac(kRegion, this.service)\n    kCredentials = hmac(kService, 'aws4_request')\n    credentialsCache.set(cacheKey, kCredentials)\n  }\n  return hmac(kCredentials, this.stringToSign(), 'hex')\n}\n\nRequestSigner.prototype.stringToSign = function() {\n  return [\n    'AWS4-HMAC-SHA256',\n    this.getDateTime(),\n    this.credentialString(),\n    hash(this.canonicalString(), 'hex'),\n  ].join('\\n')\n}\n\nRequestSigner.prototype.canonicalString = function() {\n  if (!this.parsedPath) this.prepareRequest()\n\n  var pathStr = this.parsedPath.path,\n      query = this.parsedPath.query,\n      headers = this.request.headers,\n      queryStr = '',\n      normalizePath = this.service !== 's3',\n      decodePath = this.service === 's3' || this.request.doNotEncodePath,\n      decodeSlashesInPath = this.service === 's3',\n      firstValOnly = this.service === 's3',\n      bodyHash\n\n  if (this.service === 's3' && this.request.signQuery) {\n    bodyHash = 'UNSIGNED-PAYLOAD'\n  } else if (this.isCodeCommitGit) {\n    bodyHash = ''\n  } else {\n    bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] ||\n      hash(this.request.body || '', 'hex')\n  }\n\n  if (query) {\n    var reducedQuery = Object.keys(query).reduce(function(obj, key) {\n      if (!key) return obj\n      obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] :\n        (firstValOnly ? query[key][0] : query[key])\n      return obj\n    }, {})\n    var encodedQueryPieces = []\n    Object.keys(reducedQuery).sort().forEach(function(key) {\n      if (!Array.isArray(reducedQuery[key])) {\n        encodedQueryPieces.push(key + '=' + encodeRfc3986Full(reducedQuery[key]))\n      } else {\n        reducedQuery[key].map(encodeRfc3986Full).sort()\n          .forEach(function(val) { encodedQueryPieces.push(key + '=' + val) })\n      }\n    })\n    queryStr = encodedQueryPieces.join('&')\n  }\n  if (pathStr !== '/') {\n    if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, '/')\n    pathStr = pathStr.split('/').reduce(function(path, piece) {\n      if (normalizePath && piece === '..') {\n        path.pop()\n      } else if (!normalizePath || piece !== '.') {\n        if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, ' '))\n        path.push(encodeRfc3986Full(piece))\n      }\n      return path\n    }, []).join('/')\n    if (pathStr[0] !== '/') pathStr = '/' + pathStr\n    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/')\n  }\n\n  return [\n    this.request.method || 'GET',\n    pathStr,\n    queryStr,\n    this.canonicalHeaders() + '\\n',\n    this.signedHeaders(),\n    bodyHash,\n  ].join('\\n')\n}\n\nRequestSigner.prototype.canonicalHeaders = function() {\n  var headers = this.request.headers\n  function trimAll(header) {\n    return header.toString().trim().replace(/\\s+/g, ' ')\n  }\n  return Object.keys(headers)\n    .filter(function(key) { return HEADERS_TO_IGNORE[key.toLowerCase()] == null })\n    .sort(function(a, b) { return a.toLowerCase() < b.toLowerCase() ? -1 : 1 })\n    .map(function(key) { return key.toLowerCase() + ':' + trimAll(headers[key]) })\n    .join('\\n')\n}\n\nRequestSigner.prototype.signedHeaders = function() {\n  return Object.keys(this.request.headers)\n    .map(function(key) { return key.toLowerCase() })\n    .filter(function(key) { return HEADERS_TO_IGNORE[key] == null })\n    .sort()\n    .join(';')\n}\n\nRequestSigner.prototype.credentialString = function() {\n  return [\n    this.getDate(),\n    this.region,\n    this.service,\n    'aws4_request',\n  ].join('/')\n}\n\nRequestSigner.prototype.defaultCredentials = function() {\n  var env = process.env\n  return {\n    accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,\n    secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,\n    sessionToken: env.AWS_SESSION_TOKEN,\n  }\n}\n\nRequestSigner.prototype.parsePath = function() {\n  var path = this.request.path || '/'\n\n  // S3 doesn't always encode characters > 127 correctly and\n  // all services don't encode characters > 255 correctly\n  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\n  if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {\n    path = encodeURI(decodeURI(path))\n  }\n\n  var queryIx = path.indexOf('?'),\n      query = null\n\n  if (queryIx >= 0) {\n    query = querystring.parse(path.slice(queryIx + 1))\n    path = path.slice(0, queryIx)\n  }\n\n  this.parsedPath = {\n    path: path,\n    query: query,\n  }\n}\n\nRequestSigner.prototype.formatPath = function() {\n  var path = this.parsedPath.path,\n      query = this.parsedPath.query\n\n  if (!query) return path\n\n  // Services don't support empty query string keys\n  if (query[''] != null) delete query['']\n\n  return path + '?' + encodeRfc3986(querystring.stringify(query))\n}\n\naws4.RequestSigner = RequestSigner\n\naws4.sign = function(request, credentials) {\n  return new RequestSigner(request, credentials).sign()\n}\n"]},"metadata":{},"sourceType":"script"}