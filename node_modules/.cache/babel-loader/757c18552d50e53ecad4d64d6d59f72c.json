{"ast":null,"code":"\"use strict\";\n\nmodule.exports = tokenize;\nvar delimRe = /[\\s{}=;:[\\],'\"()<>]/g,\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\nvar setCommentRe = /^ *[*/]+ */,\n    setCommentAltRe = /^\\s*\\*?\\/*/,\n    setCommentSplitRe = /\\n/g,\n    whitespaceRe = /\\s/,\n    unescapeRe = /\\\\(.?)/g;\nvar unescapeMap = {\n  \"0\": \"\\0\",\n  \"r\": \"\\r\",\n  \"n\": \"\\n\",\n  \"t\": \"\\t\"\n};\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */\n\nfunction unescape(str) {\n  return str.replace(unescapeRe, function ($0, $1) {\n    switch ($1) {\n      case \"\\\\\":\n      case \"\":\n        return $1;\n\n      default:\n        return unescapeMap[$1] || \"\";\n    }\n  });\n}\n\ntokenize.unescape = unescape;\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */\n\n/**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */\n\n/**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */\n\n/**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */\n\n/**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */\n\nfunction tokenize(source, alternateCommentMode) {\n  /* eslint-disable callback-return */\n  source = source.toString();\n  var offset = 0,\n      length = source.length,\n      line = 1,\n      commentType = null,\n      commentText = null,\n      commentLine = 0,\n      commentLineEmpty = false,\n      commentIsLeading = false;\n  var stack = [];\n  var stringDelim = null;\n  /* istanbul ignore next */\n\n  /**\n   * Creates an error for illegal syntax.\n   * @param {string} subject Subject\n   * @returns {Error} Error created\n   * @inner\n   */\n\n  function illegal(subject) {\n    return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n  }\n  /**\n   * Reads a string till its end.\n   * @returns {string} String read\n   * @inner\n   */\n\n\n  function readString() {\n    var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n    re.lastIndex = offset - 1;\n    var match = re.exec(source);\n    if (!match) throw illegal(\"string\");\n    offset = re.lastIndex;\n    push(stringDelim);\n    stringDelim = null;\n    return unescape(match[1]);\n  }\n  /**\n   * Gets the character at `pos` within the source.\n   * @param {number} pos Position\n   * @returns {string} Character\n   * @inner\n   */\n\n\n  function charAt(pos) {\n    return source.charAt(pos);\n  }\n  /**\n   * Sets the current comment text.\n   * @param {number} start Start offset\n   * @param {number} end End offset\n   * @param {boolean} isLeading set if a leading comment\n   * @returns {undefined}\n   * @inner\n   */\n\n\n  function setComment(start, end, isLeading) {\n    commentType = source.charAt(start++);\n    commentLine = line;\n    commentLineEmpty = false;\n    commentIsLeading = isLeading;\n    var lookback;\n\n    if (alternateCommentMode) {\n      lookback = 2; // alternate comment parsing: \"//\" or \"/*\"\n    } else {\n      lookback = 3; // \"///\" or \"/**\"\n    }\n\n    var commentOffset = start - lookback,\n        c;\n\n    do {\n      if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === \"\\n\") {\n        commentLineEmpty = true;\n        break;\n      }\n    } while (c === \" \" || c === \"\\t\");\n\n    var lines = source.substring(start, end).split(setCommentSplitRe);\n\n    for (var i = 0; i < lines.length; ++i) lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\").trim();\n\n    commentText = lines.join(\"\\n\").trim();\n  }\n\n  function isDoubleSlashCommentLine(startOffset) {\n    var endOffset = findEndOfLine(startOffset); // see if remaining line matches comment pattern\n\n    var lineText = source.substring(startOffset, endOffset); // look for 1 or 2 slashes since startOffset would already point past\n    // the first slash that started the comment.\n\n    var isComment = /^\\s*\\/{1,2}/.test(lineText);\n    return isComment;\n  }\n\n  function findEndOfLine(cursor) {\n    // find end of cursor's line\n    var endOffset = cursor;\n\n    while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n      endOffset++;\n    }\n\n    return endOffset;\n  }\n  /**\n   * Obtains the next token.\n   * @returns {string|null} Next token or `null` on eof\n   * @inner\n   */\n\n\n  function next() {\n    if (stack.length > 0) return stack.shift();\n    if (stringDelim) return readString();\n    var repeat,\n        prev,\n        curr,\n        start,\n        isDoc,\n        isLeadingComment = offset === 0;\n\n    do {\n      if (offset === length) return null;\n      repeat = false;\n\n      while (whitespaceRe.test(curr = charAt(offset))) {\n        if (curr === \"\\n\") {\n          isLeadingComment = true;\n          ++line;\n        }\n\n        if (++offset === length) return null;\n      }\n\n      if (charAt(offset) === \"/\") {\n        if (++offset === length) {\n          throw illegal(\"comment\");\n        }\n\n        if (charAt(offset) === \"/\") {\n          // Line\n          if (!alternateCommentMode) {\n            // check for triple-slash comment\n            isDoc = charAt(start = offset + 1) === \"/\";\n\n            while (charAt(++offset) !== \"\\n\") {\n              if (offset === length) {\n                return null;\n              }\n            }\n\n            ++offset;\n\n            if (isDoc) {\n              setComment(start, offset - 1, isLeadingComment);\n            }\n\n            ++line;\n            repeat = true;\n          } else {\n            // check for double-slash comments, consolidating consecutive lines\n            start = offset;\n            isDoc = false;\n\n            if (isDoubleSlashCommentLine(offset)) {\n              isDoc = true;\n\n              do {\n                offset = findEndOfLine(offset);\n\n                if (offset === length) {\n                  break;\n                }\n\n                offset++;\n              } while (isDoubleSlashCommentLine(offset));\n            } else {\n              offset = Math.min(length, findEndOfLine(offset) + 1);\n            }\n\n            if (isDoc) {\n              setComment(start, offset, isLeadingComment);\n            }\n\n            line++;\n            repeat = true;\n          }\n        } else if ((curr = charAt(offset)) === \"*\") {\n          /* Block */\n          // check for /** (regular comment mode) or /* (alternate comment mode)\n          start = offset + 1;\n          isDoc = alternateCommentMode || charAt(start) === \"*\";\n\n          do {\n            if (curr === \"\\n\") {\n              ++line;\n            }\n\n            if (++offset === length) {\n              throw illegal(\"comment\");\n            }\n\n            prev = curr;\n            curr = charAt(offset);\n          } while (prev !== \"*\" || curr !== \"/\");\n\n          ++offset;\n\n          if (isDoc) {\n            setComment(start, offset - 2, isLeadingComment);\n          }\n\n          repeat = true;\n        } else {\n          return \"/\";\n        }\n      }\n    } while (repeat); // offset !== length if we got here\n\n\n    var end = offset;\n    delimRe.lastIndex = 0;\n    var delim = delimRe.test(charAt(end++));\n    if (!delim) while (end < length && !delimRe.test(charAt(end))) ++end;\n    var token = source.substring(offset, offset = end);\n    if (token === \"\\\"\" || token === \"'\") stringDelim = token;\n    return token;\n  }\n  /**\n   * Pushes a token back to the stack.\n   * @param {string} token Token\n   * @returns {undefined}\n   * @inner\n   */\n\n\n  function push(token) {\n    stack.push(token);\n  }\n  /**\n   * Peeks for the next token.\n   * @returns {string|null} Token or `null` on eof\n   * @inner\n   */\n\n\n  function peek() {\n    if (!stack.length) {\n      var token = next();\n      if (token === null) return null;\n      push(token);\n    }\n\n    return stack[0];\n  }\n  /**\n   * Skips a token.\n   * @param {string} expected Expected token\n   * @param {boolean} [optional=false] Whether the token is optional\n   * @returns {boolean} `true` when skipped, `false` if not\n   * @throws {Error} When a required token is not present\n   * @inner\n   */\n\n\n  function skip(expected, optional) {\n    var actual = peek(),\n        equals = actual === expected;\n\n    if (equals) {\n      next();\n      return true;\n    }\n\n    if (!optional) throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n    return false;\n  }\n  /**\n   * Gets a comment.\n   * @param {number} [trailingLine] Line number if looking for a trailing comment\n   * @returns {string|null} Comment text\n   * @inner\n   */\n\n\n  function cmnt(trailingLine) {\n    var ret = null;\n\n    if (trailingLine === undefined) {\n      if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\n        ret = commentIsLeading ? commentText : null;\n      }\n    } else {\n      /* istanbul ignore else */\n      if (commentLine < trailingLine) {\n        peek();\n      }\n\n      if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\n        ret = commentIsLeading ? null : commentText;\n      }\n    }\n\n    return ret;\n  }\n\n  return Object.defineProperty({\n    next: next,\n    peek: peek,\n    push: push,\n    skip: skip,\n    cmnt: cmnt\n  }, \"line\", {\n    get: function () {\n      return line;\n    }\n  });\n  /* eslint-enable callback-return */\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/protobufjs/src/tokenize.js"],"names":["module","exports","tokenize","delimRe","stringDoubleRe","stringSingleRe","setCommentRe","setCommentAltRe","setCommentSplitRe","whitespaceRe","unescapeRe","unescapeMap","unescape","str","replace","$0","$1","source","alternateCommentMode","toString","offset","length","line","commentType","commentText","commentLine","commentLineEmpty","commentIsLeading","stack","stringDelim","illegal","subject","Error","readString","re","lastIndex","match","exec","push","charAt","pos","setComment","start","end","isLeading","lookback","commentOffset","c","lines","substring","split","i","trim","join","isDoubleSlashCommentLine","startOffset","endOffset","findEndOfLine","lineText","isComment","test","cursor","next","shift","repeat","prev","curr","isDoc","isLeadingComment","Math","min","delim","token","peek","skip","expected","optional","actual","equals","cmnt","trailingLine","ret","undefined","Object","defineProperty","get"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AAEA,IAAIC,OAAO,GAAU,sBAArB;AAAA,IACIC,cAAc,GAAG,iCADrB;AAAA,IAEIC,cAAc,GAAG,iCAFrB;AAIA,IAAIC,YAAY,GAAG,YAAnB;AAAA,IACIC,eAAe,GAAG,YADtB;AAAA,IAEIC,iBAAiB,GAAG,KAFxB;AAAA,IAGIC,YAAY,GAAG,IAHnB;AAAA,IAIIC,UAAU,GAAG,SAJjB;AAMA,IAAIC,WAAW,GAAG;AACd,OAAK,IADS;AAEd,OAAK,IAFS;AAGd,OAAK,IAHS;AAId,OAAK;AAJS,CAAlB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACnB,SAAOA,GAAG,CAACC,OAAJ,CAAYJ,UAAZ,EAAwB,UAASK,EAAT,EAAaC,EAAb,EAAiB;AAC5C,YAAQA,EAAR;AACI,WAAK,IAAL;AACA,WAAK,EAAL;AACI,eAAOA,EAAP;;AACJ;AACI,eAAOL,WAAW,CAACK,EAAD,CAAX,IAAmB,EAA1B;AALR;AAOH,GARM,CAAP;AASH;;AAEDd,QAAQ,CAACU,QAAT,GAAoBA,QAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASV,QAAT,CAAkBe,MAAlB,EAA0BC,oBAA1B,EAAgD;AAC5C;AACAD,EAAAA,MAAM,GAAGA,MAAM,CAACE,QAAP,EAAT;AAEA,MAAIC,MAAM,GAAG,CAAb;AAAA,MACIC,MAAM,GAAGJ,MAAM,CAACI,MADpB;AAAA,MAEIC,IAAI,GAAG,CAFX;AAAA,MAGIC,WAAW,GAAG,IAHlB;AAAA,MAIIC,WAAW,GAAG,IAJlB;AAAA,MAKIC,WAAW,GAAG,CALlB;AAAA,MAMIC,gBAAgB,GAAG,KANvB;AAAA,MAOIC,gBAAgB,GAAG,KAPvB;AASA,MAAIC,KAAK,GAAG,EAAZ;AAEA,MAAIC,WAAW,GAAG,IAAlB;AAEA;;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,WAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACtB,WAAOC,KAAK,CAAC,aAAaD,OAAb,GAAuB,SAAvB,GAAmCT,IAAnC,GAA0C,GAA3C,CAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACI,WAASW,UAAT,GAAsB;AAClB,QAAIC,EAAE,GAAGL,WAAW,KAAK,GAAhB,GAAsBxB,cAAtB,GAAuCD,cAAhD;AACA8B,IAAAA,EAAE,CAACC,SAAH,GAAef,MAAM,GAAG,CAAxB;AACA,QAAIgB,KAAK,GAAGF,EAAE,CAACG,IAAH,CAAQpB,MAAR,CAAZ;AACA,QAAI,CAACmB,KAAL,EACI,MAAMN,OAAO,CAAC,QAAD,CAAb;AACJV,IAAAA,MAAM,GAAGc,EAAE,CAACC,SAAZ;AACAG,IAAAA,IAAI,CAACT,WAAD,CAAJ;AACAA,IAAAA,WAAW,GAAG,IAAd;AACA,WAAOjB,QAAQ,CAACwB,KAAK,CAAC,CAAD,CAAN,CAAf;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACI,WAASG,MAAT,CAAgBC,GAAhB,EAAqB;AACjB,WAAOvB,MAAM,CAACsB,MAAP,CAAcC,GAAd,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASC,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,SAAhC,EAA2C;AACvCrB,IAAAA,WAAW,GAAGN,MAAM,CAACsB,MAAP,CAAcG,KAAK,EAAnB,CAAd;AACAjB,IAAAA,WAAW,GAAGH,IAAd;AACAI,IAAAA,gBAAgB,GAAG,KAAnB;AACAC,IAAAA,gBAAgB,GAAGiB,SAAnB;AACA,QAAIC,QAAJ;;AACA,QAAI3B,oBAAJ,EAA0B;AACtB2B,MAAAA,QAAQ,GAAG,CAAX,CADsB,CACP;AAClB,KAFD,MAEO;AACHA,MAAAA,QAAQ,GAAG,CAAX,CADG,CACY;AAClB;;AACD,QAAIC,aAAa,GAAGJ,KAAK,GAAGG,QAA5B;AAAA,QACIE,CADJ;;AAEA,OAAG;AACC,UAAI,EAAED,aAAF,GAAkB,CAAlB,IACI,CAACC,CAAC,GAAG9B,MAAM,CAACsB,MAAP,CAAcO,aAAd,CAAL,MAAuC,IAD/C,EACqD;AACjDpB,QAAAA,gBAAgB,GAAG,IAAnB;AACA;AACH;AACJ,KAND,QAMSqB,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,IAN5B;;AAOA,QAAIC,KAAK,GAAG/B,MAAM,CACbgC,SADO,CACGP,KADH,EACUC,GADV,EAEPO,KAFO,CAED1C,iBAFC,CAAZ;;AAGA,SAAK,IAAI2C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAAC3B,MAA1B,EAAkC,EAAE8B,CAApC,EACIH,KAAK,CAACG,CAAD,CAAL,GAAWH,KAAK,CAACG,CAAD,CAAL,CACNrC,OADM,CACEI,oBAAoB,GAAGX,eAAH,GAAqBD,YAD3C,EACyD,EADzD,EAEN8C,IAFM,EAAX;;AAGJ5B,IAAAA,WAAW,GAAGwB,KAAK,CACdK,IADS,CACJ,IADI,EAETD,IAFS,EAAd;AAGH;;AAED,WAASE,wBAAT,CAAkCC,WAAlC,EAA+C;AAC3C,QAAIC,SAAS,GAAGC,aAAa,CAACF,WAAD,CAA7B,CAD2C,CAG3C;;AACA,QAAIG,QAAQ,GAAGzC,MAAM,CAACgC,SAAP,CAAiBM,WAAjB,EAA8BC,SAA9B,CAAf,CAJ2C,CAK3C;AACA;;AACA,QAAIG,SAAS,GAAG,cAAcC,IAAd,CAAmBF,QAAnB,CAAhB;AACA,WAAOC,SAAP;AACH;;AAED,WAASF,aAAT,CAAuBI,MAAvB,EAA+B;AAC3B;AACA,QAAIL,SAAS,GAAGK,MAAhB;;AACA,WAAOL,SAAS,GAAGnC,MAAZ,IAAsBkB,MAAM,CAACiB,SAAD,CAAN,KAAsB,IAAnD,EAAyD;AACrDA,MAAAA,SAAS;AACZ;;AACD,WAAOA,SAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACI,WAASM,IAAT,GAAgB;AACZ,QAAIlC,KAAK,CAACP,MAAN,GAAe,CAAnB,EACI,OAAOO,KAAK,CAACmC,KAAN,EAAP;AACJ,QAAIlC,WAAJ,EACI,OAAOI,UAAU,EAAjB;AACJ,QAAI+B,MAAJ;AAAA,QACIC,IADJ;AAAA,QAEIC,IAFJ;AAAA,QAGIxB,KAHJ;AAAA,QAIIyB,KAJJ;AAAA,QAKIC,gBAAgB,GAAGhD,MAAM,KAAK,CALlC;;AAMA,OAAG;AACC,UAAIA,MAAM,KAAKC,MAAf,EACI,OAAO,IAAP;AACJ2C,MAAAA,MAAM,GAAG,KAAT;;AACA,aAAOvD,YAAY,CAACmD,IAAb,CAAkBM,IAAI,GAAG3B,MAAM,CAACnB,MAAD,CAA/B,CAAP,EAAiD;AAC7C,YAAI8C,IAAI,KAAK,IAAb,EAAmB;AACfE,UAAAA,gBAAgB,GAAG,IAAnB;AACA,YAAE9C,IAAF;AACH;;AACD,YAAI,EAAEF,MAAF,KAAaC,MAAjB,EACI,OAAO,IAAP;AACP;;AAED,UAAIkB,MAAM,CAACnB,MAAD,CAAN,KAAmB,GAAvB,EAA4B;AACxB,YAAI,EAAEA,MAAF,KAAaC,MAAjB,EAAyB;AACrB,gBAAMS,OAAO,CAAC,SAAD,CAAb;AACH;;AACD,YAAIS,MAAM,CAACnB,MAAD,CAAN,KAAmB,GAAvB,EAA4B;AAAE;AAC1B,cAAI,CAACF,oBAAL,EAA2B;AACvB;AACAiD,YAAAA,KAAK,GAAG5B,MAAM,CAACG,KAAK,GAAGtB,MAAM,GAAG,CAAlB,CAAN,KAA+B,GAAvC;;AAEA,mBAAOmB,MAAM,CAAC,EAAEnB,MAAH,CAAN,KAAqB,IAA5B,EAAkC;AAC9B,kBAAIA,MAAM,KAAKC,MAAf,EAAuB;AACnB,uBAAO,IAAP;AACH;AACJ;;AACD,cAAED,MAAF;;AACA,gBAAI+C,KAAJ,EAAW;AACP1B,cAAAA,UAAU,CAACC,KAAD,EAAQtB,MAAM,GAAG,CAAjB,EAAoBgD,gBAApB,CAAV;AACH;;AACD,cAAE9C,IAAF;AACA0C,YAAAA,MAAM,GAAG,IAAT;AACH,WAfD,MAeO;AACH;AACAtB,YAAAA,KAAK,GAAGtB,MAAR;AACA+C,YAAAA,KAAK,GAAG,KAAR;;AACA,gBAAIb,wBAAwB,CAAClC,MAAD,CAA5B,EAAsC;AAClC+C,cAAAA,KAAK,GAAG,IAAR;;AACA,iBAAG;AACC/C,gBAAAA,MAAM,GAAGqC,aAAa,CAACrC,MAAD,CAAtB;;AACA,oBAAIA,MAAM,KAAKC,MAAf,EAAuB;AACnB;AACH;;AACDD,gBAAAA,MAAM;AACT,eAND,QAMSkC,wBAAwB,CAAClC,MAAD,CANjC;AAOH,aATD,MASO;AACHA,cAAAA,MAAM,GAAGiD,IAAI,CAACC,GAAL,CAASjD,MAAT,EAAiBoC,aAAa,CAACrC,MAAD,CAAb,GAAwB,CAAzC,CAAT;AACH;;AACD,gBAAI+C,KAAJ,EAAW;AACP1B,cAAAA,UAAU,CAACC,KAAD,EAAQtB,MAAR,EAAgBgD,gBAAhB,CAAV;AACH;;AACD9C,YAAAA,IAAI;AACJ0C,YAAAA,MAAM,GAAG,IAAT;AACH;AACJ,SAtCD,MAsCO,IAAI,CAACE,IAAI,GAAG3B,MAAM,CAACnB,MAAD,CAAd,MAA4B,GAAhC,EAAqC;AAAE;AAC1C;AACAsB,UAAAA,KAAK,GAAGtB,MAAM,GAAG,CAAjB;AACA+C,UAAAA,KAAK,GAAGjD,oBAAoB,IAAIqB,MAAM,CAACG,KAAD,CAAN,KAAkB,GAAlD;;AACA,aAAG;AACC,gBAAIwB,IAAI,KAAK,IAAb,EAAmB;AACf,gBAAE5C,IAAF;AACH;;AACD,gBAAI,EAAEF,MAAF,KAAaC,MAAjB,EAAyB;AACrB,oBAAMS,OAAO,CAAC,SAAD,CAAb;AACH;;AACDmC,YAAAA,IAAI,GAAGC,IAAP;AACAA,YAAAA,IAAI,GAAG3B,MAAM,CAACnB,MAAD,CAAb;AACH,WATD,QASS6C,IAAI,KAAK,GAAT,IAAgBC,IAAI,KAAK,GATlC;;AAUA,YAAE9C,MAAF;;AACA,cAAI+C,KAAJ,EAAW;AACP1B,YAAAA,UAAU,CAACC,KAAD,EAAQtB,MAAM,GAAG,CAAjB,EAAoBgD,gBAApB,CAAV;AACH;;AACDJ,UAAAA,MAAM,GAAG,IAAT;AACH,SAnBM,MAmBA;AACH,iBAAO,GAAP;AACH;AACJ;AACJ,KA9ED,QA8ESA,MA9ET,EAXY,CA2FZ;;;AAEA,QAAIrB,GAAG,GAAGvB,MAAV;AACAjB,IAAAA,OAAO,CAACgC,SAAR,GAAoB,CAApB;AACA,QAAIoC,KAAK,GAAGpE,OAAO,CAACyD,IAAR,CAAarB,MAAM,CAACI,GAAG,EAAJ,CAAnB,CAAZ;AACA,QAAI,CAAC4B,KAAL,EACI,OAAO5B,GAAG,GAAGtB,MAAN,IAAgB,CAAClB,OAAO,CAACyD,IAAR,CAAarB,MAAM,CAACI,GAAD,CAAnB,CAAxB,EACI,EAAEA,GAAF;AACR,QAAI6B,KAAK,GAAGvD,MAAM,CAACgC,SAAP,CAAiB7B,MAAjB,EAAyBA,MAAM,GAAGuB,GAAlC,CAAZ;AACA,QAAI6B,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,GAAhC,EACI3C,WAAW,GAAG2C,KAAd;AACJ,WAAOA,KAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACI,WAASlC,IAAT,CAAckC,KAAd,EAAqB;AACjB5C,IAAAA,KAAK,CAACU,IAAN,CAAWkC,KAAX;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACI,WAASC,IAAT,GAAgB;AACZ,QAAI,CAAC7C,KAAK,CAACP,MAAX,EAAmB;AACf,UAAImD,KAAK,GAAGV,IAAI,EAAhB;AACA,UAAIU,KAAK,KAAK,IAAd,EACI,OAAO,IAAP;AACJlC,MAAAA,IAAI,CAACkC,KAAD,CAAJ;AACH;;AACD,WAAO5C,KAAK,CAAC,CAAD,CAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAAS8C,IAAT,CAAcC,QAAd,EAAwBC,QAAxB,EAAkC;AAC9B,QAAIC,MAAM,GAAGJ,IAAI,EAAjB;AAAA,QACIK,MAAM,GAAGD,MAAM,KAAKF,QADxB;;AAEA,QAAIG,MAAJ,EAAY;AACRhB,MAAAA,IAAI;AACJ,aAAO,IAAP;AACH;;AACD,QAAI,CAACc,QAAL,EACI,MAAM9C,OAAO,CAAC,YAAY+C,MAAZ,GAAqB,MAArB,GAA8BF,QAA9B,GAAyC,YAA1C,CAAb;AACJ,WAAO,KAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACI,WAASI,IAAT,CAAcC,YAAd,EAA4B;AACxB,QAAIC,GAAG,GAAG,IAAV;;AACA,QAAID,YAAY,KAAKE,SAArB,EAAgC;AAC5B,UAAIzD,WAAW,KAAKH,IAAI,GAAG,CAAvB,KAA6BJ,oBAAoB,IAAIK,WAAW,KAAK,GAAxC,IAA+CG,gBAA5E,CAAJ,EAAmG;AAC/FuD,QAAAA,GAAG,GAAGtD,gBAAgB,GAAGH,WAAH,GAAiB,IAAvC;AACH;AACJ,KAJD,MAIO;AACH;AACA,UAAIC,WAAW,GAAGuD,YAAlB,EAAgC;AAC5BP,QAAAA,IAAI;AACP;;AACD,UAAIhD,WAAW,KAAKuD,YAAhB,IAAgC,CAACtD,gBAAjC,KAAsDR,oBAAoB,IAAIK,WAAW,KAAK,GAA9F,CAAJ,EAAwG;AACpG0D,QAAAA,GAAG,GAAGtD,gBAAgB,GAAG,IAAH,GAAUH,WAAhC;AACH;AACJ;;AACD,WAAOyD,GAAP;AACH;;AAED,SAAOE,MAAM,CAACC,cAAP,CAAsB;AACzBtB,IAAAA,IAAI,EAAEA,IADmB;AAEzBW,IAAAA,IAAI,EAAEA,IAFmB;AAGzBnC,IAAAA,IAAI,EAAEA,IAHmB;AAIzBoC,IAAAA,IAAI,EAAEA,IAJmB;AAKzBK,IAAAA,IAAI,EAAEA;AALmB,GAAtB,EAMJ,MANI,EAMI;AACPM,IAAAA,GAAG,EAAE,YAAW;AAAE,aAAO/D,IAAP;AAAc;AADzB,GANJ,CAAP;AASA;AACH","sourcesContent":["\"use strict\";\nmodule.exports = tokenize;\n\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\n\nvar setCommentRe = /^ *[*/]+ */,\n    setCommentAltRe = /^\\s*\\*?\\/*/,\n    setCommentSplitRe = /\\n/g,\n    whitespaceRe = /\\s/,\n    unescapeRe = /\\\\(.?)/g;\n\nvar unescapeMap = {\n    \"0\": \"\\0\",\n    \"r\": \"\\r\",\n    \"n\": \"\\n\",\n    \"t\": \"\\t\"\n};\n\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */\nfunction unescape(str) {\n    return str.replace(unescapeRe, function($0, $1) {\n        switch ($1) {\n            case \"\\\\\":\n            case \"\":\n                return $1;\n            default:\n                return unescapeMap[$1] || \"\";\n        }\n    });\n}\n\ntokenize.unescape = unescape;\n\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */\n\n/**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */\n\n/**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */\n\n/**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */\n\n/**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */\nfunction tokenize(source, alternateCommentMode) {\n    /* eslint-disable callback-return */\n    source = source.toString();\n\n    var offset = 0,\n        length = source.length,\n        line = 1,\n        commentType = null,\n        commentText = null,\n        commentLine = 0,\n        commentLineEmpty = false,\n        commentIsLeading = false;\n\n    var stack = [];\n\n    var stringDelim = null;\n\n    /* istanbul ignore next */\n    /**\n     * Creates an error for illegal syntax.\n     * @param {string} subject Subject\n     * @returns {Error} Error created\n     * @inner\n     */\n    function illegal(subject) {\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n    }\n\n    /**\n     * Reads a string till its end.\n     * @returns {string} String read\n     * @inner\n     */\n    function readString() {\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n        re.lastIndex = offset - 1;\n        var match = re.exec(source);\n        if (!match)\n            throw illegal(\"string\");\n        offset = re.lastIndex;\n        push(stringDelim);\n        stringDelim = null;\n        return unescape(match[1]);\n    }\n\n    /**\n     * Gets the character at `pos` within the source.\n     * @param {number} pos Position\n     * @returns {string} Character\n     * @inner\n     */\n    function charAt(pos) {\n        return source.charAt(pos);\n    }\n\n    /**\n     * Sets the current comment text.\n     * @param {number} start Start offset\n     * @param {number} end End offset\n     * @param {boolean} isLeading set if a leading comment\n     * @returns {undefined}\n     * @inner\n     */\n    function setComment(start, end, isLeading) {\n        commentType = source.charAt(start++);\n        commentLine = line;\n        commentLineEmpty = false;\n        commentIsLeading = isLeading;\n        var lookback;\n        if (alternateCommentMode) {\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\n        } else {\n            lookback = 3;  // \"///\" or \"/**\"\n        }\n        var commentOffset = start - lookback,\n            c;\n        do {\n            if (--commentOffset < 0 ||\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\n                commentLineEmpty = true;\n                break;\n            }\n        } while (c === \" \" || c === \"\\t\");\n        var lines = source\n            .substring(start, end)\n            .split(setCommentSplitRe);\n        for (var i = 0; i < lines.length; ++i)\n            lines[i] = lines[i]\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\n                .trim();\n        commentText = lines\n            .join(\"\\n\")\n            .trim();\n    }\n\n    function isDoubleSlashCommentLine(startOffset) {\n        var endOffset = findEndOfLine(startOffset);\n\n        // see if remaining line matches comment pattern\n        var lineText = source.substring(startOffset, endOffset);\n        // look for 1 or 2 slashes since startOffset would already point past\n        // the first slash that started the comment.\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);\n        return isComment;\n    }\n\n    function findEndOfLine(cursor) {\n        // find end of cursor's line\n        var endOffset = cursor;\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n            endOffset++;\n        }\n        return endOffset;\n    }\n\n    /**\n     * Obtains the next token.\n     * @returns {string|null} Next token or `null` on eof\n     * @inner\n     */\n    function next() {\n        if (stack.length > 0)\n            return stack.shift();\n        if (stringDelim)\n            return readString();\n        var repeat,\n            prev,\n            curr,\n            start,\n            isDoc,\n            isLeadingComment = offset === 0;\n        do {\n            if (offset === length)\n                return null;\n            repeat = false;\n            while (whitespaceRe.test(curr = charAt(offset))) {\n                if (curr === \"\\n\") {\n                    isLeadingComment = true;\n                    ++line;\n                }\n                if (++offset === length)\n                    return null;\n            }\n\n            if (charAt(offset) === \"/\") {\n                if (++offset === length) {\n                    throw illegal(\"comment\");\n                }\n                if (charAt(offset) === \"/\") { // Line\n                    if (!alternateCommentMode) {\n                        // check for triple-slash comment\n                        isDoc = charAt(start = offset + 1) === \"/\";\n\n                        while (charAt(++offset) !== \"\\n\") {\n                            if (offset === length) {\n                                return null;\n                            }\n                        }\n                        ++offset;\n                        if (isDoc) {\n                            setComment(start, offset - 1, isLeadingComment);\n                        }\n                        ++line;\n                        repeat = true;\n                    } else {\n                        // check for double-slash comments, consolidating consecutive lines\n                        start = offset;\n                        isDoc = false;\n                        if (isDoubleSlashCommentLine(offset)) {\n                            isDoc = true;\n                            do {\n                                offset = findEndOfLine(offset);\n                                if (offset === length) {\n                                    break;\n                                }\n                                offset++;\n                            } while (isDoubleSlashCommentLine(offset));\n                        } else {\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\n                        }\n                        if (isDoc) {\n                            setComment(start, offset, isLeadingComment);\n                        }\n                        line++;\n                        repeat = true;\n                    }\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\n                    start = offset + 1;\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\n                    do {\n                        if (curr === \"\\n\") {\n                            ++line;\n                        }\n                        if (++offset === length) {\n                            throw illegal(\"comment\");\n                        }\n                        prev = curr;\n                        curr = charAt(offset);\n                    } while (prev !== \"*\" || curr !== \"/\");\n                    ++offset;\n                    if (isDoc) {\n                        setComment(start, offset - 2, isLeadingComment);\n                    }\n                    repeat = true;\n                } else {\n                    return \"/\";\n                }\n            }\n        } while (repeat);\n\n        // offset !== length if we got here\n\n        var end = offset;\n        delimRe.lastIndex = 0;\n        var delim = delimRe.test(charAt(end++));\n        if (!delim)\n            while (end < length && !delimRe.test(charAt(end)))\n                ++end;\n        var token = source.substring(offset, offset = end);\n        if (token === \"\\\"\" || token === \"'\")\n            stringDelim = token;\n        return token;\n    }\n\n    /**\n     * Pushes a token back to the stack.\n     * @param {string} token Token\n     * @returns {undefined}\n     * @inner\n     */\n    function push(token) {\n        stack.push(token);\n    }\n\n    /**\n     * Peeks for the next token.\n     * @returns {string|null} Token or `null` on eof\n     * @inner\n     */\n    function peek() {\n        if (!stack.length) {\n            var token = next();\n            if (token === null)\n                return null;\n            push(token);\n        }\n        return stack[0];\n    }\n\n    /**\n     * Skips a token.\n     * @param {string} expected Expected token\n     * @param {boolean} [optional=false] Whether the token is optional\n     * @returns {boolean} `true` when skipped, `false` if not\n     * @throws {Error} When a required token is not present\n     * @inner\n     */\n    function skip(expected, optional) {\n        var actual = peek(),\n            equals = actual === expected;\n        if (equals) {\n            next();\n            return true;\n        }\n        if (!optional)\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n        return false;\n    }\n\n    /**\n     * Gets a comment.\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\n     * @returns {string|null} Comment text\n     * @inner\n     */\n    function cmnt(trailingLine) {\n        var ret = null;\n        if (trailingLine === undefined) {\n            if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\n                ret = commentIsLeading ? commentText : null;\n            }\n        } else {\n            /* istanbul ignore else */\n            if (commentLine < trailingLine) {\n                peek();\n            }\n            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\n                ret = commentIsLeading ? null : commentText;\n            }\n        }\n        return ret;\n    }\n\n    return Object.defineProperty({\n        next: next,\n        peek: peek,\n        push: push,\n        skip: skip,\n        cmnt: cmnt\n    }, \"line\", {\n        get: function() { return line; }\n    });\n    /* eslint-enable callback-return */\n}\n"]},"metadata":{},"sourceType":"script"}