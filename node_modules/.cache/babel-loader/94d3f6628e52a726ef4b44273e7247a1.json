{"ast":null,"code":"/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserRecord = exports.UserInfo = exports.UserMetadata = exports.MultiFactor = exports.PhoneMultiFactorInfo = exports.MultiFactorInfo = void 0;\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar validator_1 = require(\"../utils/validator\");\n\nvar utils = require(\"../utils\");\n\nvar error_1 = require(\"../utils/error\");\n/**\n * 'REDACTED', encoded as a base64 string.\n */\n\n\nvar B64_REDACTED = Buffer.from('REDACTED').toString('base64');\n/**\n * Parses a time stamp string or number and returns the corresponding date if valid.\n *\n * @param {any} time The unix timestamp string or number in milliseconds.\n * @return {string} The corresponding date as a UTC string, if valid. Otherwise, null.\n */\n\nfunction parseDate(time) {\n  try {\n    var date = new Date(parseInt(time, 10));\n\n    if (!isNaN(date.getTime())) {\n      return date.toUTCString();\n    }\n  } catch (e) {// Do nothing. null will be returned.\n  }\n\n  return null;\n}\n\nvar MultiFactorId;\n\n(function (MultiFactorId) {\n  MultiFactorId[\"Phone\"] = \"phone\";\n})(MultiFactorId || (MultiFactorId = {}));\n/**\n * Abstract class representing a multi-factor info interface.\n */\n\n\nvar MultiFactorInfo =\n/** @class */\nfunction () {\n  /**\n   * Initializes the MultiFactorInfo object using the server side response.\n   *\n   * @param response The server side response.\n   * @constructor\n   */\n  function MultiFactorInfo(response) {\n    this.initFromServerResponse(response);\n  }\n  /**\n   * Initializes the MultiFactorInfo associated subclass using the server side.\n   * If no MultiFactorInfo is associated with the response, null is returned.\n   *\n   * @param response The server side response.\n   * @constructor\n   */\n\n\n  MultiFactorInfo.initMultiFactorInfo = function (response) {\n    var multiFactorInfo = null; // Only PhoneMultiFactorInfo currently available.\n\n    try {\n      multiFactorInfo = new PhoneMultiFactorInfo(response);\n    } catch (e) {// Ignore error.\n    }\n\n    return multiFactorInfo;\n  };\n  /** @return The plain object representation. */\n\n\n  MultiFactorInfo.prototype.toJSON = function () {\n    return {\n      uid: this.uid,\n      displayName: this.displayName,\n      factorId: this.factorId,\n      enrollmentTime: this.enrollmentTime\n    };\n  };\n  /**\n   * Initializes the MultiFactorInfo object using the provided server response.\n   *\n   * @param response The server side response.\n   */\n\n\n  MultiFactorInfo.prototype.initFromServerResponse = function (response) {\n    var factorId = response && this.getFactorId(response);\n\n    if (!factorId || !response || !response.mfaEnrollmentId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid multi-factor info response');\n    }\n\n    utils.addReadonlyGetter(this, 'uid', response.mfaEnrollmentId);\n    utils.addReadonlyGetter(this, 'factorId', factorId);\n    utils.addReadonlyGetter(this, 'displayName', response.displayName); // Encoded using [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format.\n    // For example, \"2017-01-15T01:30:15.01Z\".\n    // This can be parsed directly via Date constructor.\n    // This can be computed using Data.prototype.toISOString.\n\n    if (response.enrolledAt) {\n      utils.addReadonlyGetter(this, 'enrollmentTime', new Date(response.enrolledAt).toUTCString());\n    } else {\n      utils.addReadonlyGetter(this, 'enrollmentTime', null);\n    }\n  };\n\n  return MultiFactorInfo;\n}();\n\nexports.MultiFactorInfo = MultiFactorInfo;\n/** Class representing a phone MultiFactorInfo object. */\n\nvar PhoneMultiFactorInfo =\n/** @class */\nfunction (_super) {\n  __extends(PhoneMultiFactorInfo, _super);\n  /**\n   * Initializes the PhoneMultiFactorInfo object using the server side response.\n   *\n   * @param response The server side response.\n   * @constructor\n   */\n\n\n  function PhoneMultiFactorInfo(response) {\n    var _this = _super.call(this, response) || this;\n\n    utils.addReadonlyGetter(_this, 'phoneNumber', response.phoneInfo);\n    return _this;\n  }\n  /** @return The plain object representation. */\n\n\n  PhoneMultiFactorInfo.prototype.toJSON = function () {\n    return Object.assign(_super.prototype.toJSON.call(this), {\n      phoneNumber: this.phoneNumber\n    });\n  };\n  /**\n   * Returns the factor ID based on the response provided.\n   *\n   * @param response The server side response.\n   * @return The multi-factor ID associated with the provided response. If the response is\n   *     not associated with any known multi-factor ID, null is returned.\n   */\n\n\n  PhoneMultiFactorInfo.prototype.getFactorId = function (response) {\n    return response && response.phoneInfo ? MultiFactorId.Phone : null;\n  };\n\n  return PhoneMultiFactorInfo;\n}(MultiFactorInfo);\n\nexports.PhoneMultiFactorInfo = PhoneMultiFactorInfo;\n/** Class representing multi-factor related properties of a user. */\n\nvar MultiFactor =\n/** @class */\nfunction () {\n  /**\n   * Initializes the MultiFactor object using the server side or JWT format response.\n   *\n   * @param response The server side response.\n   * @constructor\n   */\n  function MultiFactor(response) {\n    var parsedEnrolledFactors = [];\n\n    if (!validator_1.isNonNullObject(response)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid multi-factor response');\n    } else if (response.mfaInfo) {\n      response.mfaInfo.forEach(function (factorResponse) {\n        var multiFactorInfo = MultiFactorInfo.initMultiFactorInfo(factorResponse);\n\n        if (multiFactorInfo) {\n          parsedEnrolledFactors.push(multiFactorInfo);\n        }\n      });\n    } // Make enrolled factors immutable.\n\n\n    utils.addReadonlyGetter(this, 'enrolledFactors', Object.freeze(parsedEnrolledFactors));\n  }\n  /** @return The plain object representation. */\n\n\n  MultiFactor.prototype.toJSON = function () {\n    return {\n      enrolledFactors: this.enrolledFactors.map(function (info) {\n        return info.toJSON();\n      })\n    };\n  };\n\n  return MultiFactor;\n}();\n\nexports.MultiFactor = MultiFactor;\n/**\n * User metadata class that provides metadata information like user account creation\n * and last sign in time.\n *\n * @param response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\n\nvar UserMetadata =\n/** @class */\nfunction () {\n  function UserMetadata(response) {\n    // Creation date should always be available but due to some backend bugs there\n    // were cases in the past where users did not have creation date properly set.\n    // This included legacy Firebase migrating project users and some anonymous users.\n    // These bugs have already been addressed since then.\n    utils.addReadonlyGetter(this, 'creationTime', parseDate(response.createdAt));\n    utils.addReadonlyGetter(this, 'lastSignInTime', parseDate(response.lastLoginAt));\n    var lastRefreshAt = response.lastRefreshAt ? new Date(response.lastRefreshAt).toUTCString() : null;\n    utils.addReadonlyGetter(this, 'lastRefreshTime', lastRefreshAt);\n  }\n  /** @return The plain object representation of the user's metadata. */\n\n\n  UserMetadata.prototype.toJSON = function () {\n    return {\n      lastSignInTime: this.lastSignInTime,\n      creationTime: this.creationTime\n    };\n  };\n\n  return UserMetadata;\n}();\n\nexports.UserMetadata = UserMetadata;\n/**\n * User info class that provides provider user information for different\n * Firebase providers like google.com, facebook.com, password, etc.\n *\n * @param response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\n\nvar UserInfo =\n/** @class */\nfunction () {\n  function UserInfo(response) {\n    // Provider user id and provider id are required.\n    if (!response.rawId || !response.providerId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user info response');\n    }\n\n    utils.addReadonlyGetter(this, 'uid', response.rawId);\n    utils.addReadonlyGetter(this, 'displayName', response.displayName);\n    utils.addReadonlyGetter(this, 'email', response.email);\n    utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n    utils.addReadonlyGetter(this, 'providerId', response.providerId);\n    utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber);\n  }\n  /** @return The plain object representation of the current provider data. */\n\n\n  UserInfo.prototype.toJSON = function () {\n    return {\n      uid: this.uid,\n      displayName: this.displayName,\n      email: this.email,\n      photoURL: this.photoURL,\n      providerId: this.providerId,\n      phoneNumber: this.phoneNumber\n    };\n  };\n\n  return UserInfo;\n}();\n\nexports.UserInfo = UserInfo;\n/**\n * User record class that defines the Firebase user object populated from\n * the Firebase Auth getAccountInfo response.\n *\n * @param response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\n\nvar UserRecord =\n/** @class */\nfunction () {\n  function UserRecord(response) {\n    // The Firebase user id is required.\n    if (!response.localId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user response');\n    }\n\n    utils.addReadonlyGetter(this, 'uid', response.localId);\n    utils.addReadonlyGetter(this, 'email', response.email);\n    utils.addReadonlyGetter(this, 'emailVerified', !!response.emailVerified);\n    utils.addReadonlyGetter(this, 'displayName', response.displayName);\n    utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n    utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber); // If disabled is not provided, the account is enabled by default.\n\n    utils.addReadonlyGetter(this, 'disabled', response.disabled || false);\n    utils.addReadonlyGetter(this, 'metadata', new UserMetadata(response));\n    var providerData = [];\n\n    for (var _i = 0, _a = response.providerUserInfo || []; _i < _a.length; _i++) {\n      var entry = _a[_i];\n      providerData.push(new UserInfo(entry));\n    }\n\n    utils.addReadonlyGetter(this, 'providerData', providerData); // If the password hash is redacted (probably due to missing permissions)\n    // then clear it out, similar to how the salt is returned. (Otherwise, it\n    // *looks* like a b64-encoded hash is present, which is confusing.)\n\n    if (response.passwordHash === B64_REDACTED) {\n      utils.addReadonlyGetter(this, 'passwordHash', undefined);\n    } else {\n      utils.addReadonlyGetter(this, 'passwordHash', response.passwordHash);\n    }\n\n    utils.addReadonlyGetter(this, 'passwordSalt', response.salt);\n\n    if (response.customAttributes) {\n      utils.addReadonlyGetter(this, 'customClaims', JSON.parse(response.customAttributes));\n    }\n\n    var validAfterTime = null; // Convert validSince first to UTC milliseconds and then to UTC date string.\n\n    if (typeof response.validSince !== 'undefined') {\n      validAfterTime = parseDate(parseInt(response.validSince, 10) * 1000);\n    }\n\n    utils.addReadonlyGetter(this, 'tokensValidAfterTime', validAfterTime || undefined);\n    utils.addReadonlyGetter(this, 'tenantId', response.tenantId);\n    var multiFactor = new MultiFactor(response);\n\n    if (multiFactor.enrolledFactors.length > 0) {\n      utils.addReadonlyGetter(this, 'multiFactor', multiFactor);\n    }\n  }\n  /** @return The plain object representation of the user record. */\n\n\n  UserRecord.prototype.toJSON = function () {\n    var json = {\n      uid: this.uid,\n      email: this.email,\n      emailVerified: this.emailVerified,\n      displayName: this.displayName,\n      photoURL: this.photoURL,\n      phoneNumber: this.phoneNumber,\n      disabled: this.disabled,\n      // Convert metadata to json.\n      metadata: this.metadata.toJSON(),\n      passwordHash: this.passwordHash,\n      passwordSalt: this.passwordSalt,\n      customClaims: deep_copy_1.deepCopy(this.customClaims),\n      tokensValidAfterTime: this.tokensValidAfterTime,\n      tenantId: this.tenantId\n    };\n\n    if (this.multiFactor) {\n      json.multiFactor = this.multiFactor.toJSON();\n    }\n\n    json.providerData = [];\n\n    for (var _i = 0, _a = this.providerData; _i < _a.length; _i++) {\n      var entry = _a[_i]; // Convert each provider data to json.\n\n      json.providerData.push(entry.toJSON());\n    }\n\n    return json;\n  };\n\n  return UserRecord;\n}();\n\nexports.UserRecord = UserRecord;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/firebase-admin/lib/auth/user-record.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","UserRecord","UserInfo","UserMetadata","MultiFactor","PhoneMultiFactorInfo","MultiFactorInfo","deep_copy_1","require","validator_1","utils","error_1","B64_REDACTED","Buffer","from","toString","parseDate","time","date","Date","parseInt","isNaN","getTime","toUTCString","e","MultiFactorId","response","initFromServerResponse","initMultiFactorInfo","multiFactorInfo","toJSON","uid","displayName","factorId","enrollmentTime","getFactorId","mfaEnrollmentId","FirebaseAuthError","AuthClientErrorCode","INTERNAL_ERROR","addReadonlyGetter","enrolledAt","_super","_this","call","phoneInfo","assign","phoneNumber","Phone","parsedEnrolledFactors","isNonNullObject","mfaInfo","forEach","factorResponse","push","freeze","enrolledFactors","map","info","createdAt","lastLoginAt","lastRefreshAt","lastSignInTime","creationTime","rawId","providerId","email","photoUrl","photoURL","localId","emailVerified","disabled","providerData","_i","_a","providerUserInfo","length","entry","passwordHash","undefined","salt","customAttributes","JSON","parse","validAfterTime","validSince","tenantId","multiFactor","json","metadata","passwordSalt","customClaims","deepCopy","tokensValidAfterTime"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserRecord = exports.UserInfo = exports.UserMetadata = exports.MultiFactor = exports.PhoneMultiFactorInfo = exports.MultiFactorInfo = void 0;\nvar deep_copy_1 = require(\"../utils/deep-copy\");\nvar validator_1 = require(\"../utils/validator\");\nvar utils = require(\"../utils\");\nvar error_1 = require(\"../utils/error\");\n/**\n * 'REDACTED', encoded as a base64 string.\n */\nvar B64_REDACTED = Buffer.from('REDACTED').toString('base64');\n/**\n * Parses a time stamp string or number and returns the corresponding date if valid.\n *\n * @param {any} time The unix timestamp string or number in milliseconds.\n * @return {string} The corresponding date as a UTC string, if valid. Otherwise, null.\n */\nfunction parseDate(time) {\n    try {\n        var date = new Date(parseInt(time, 10));\n        if (!isNaN(date.getTime())) {\n            return date.toUTCString();\n        }\n    }\n    catch (e) {\n        // Do nothing. null will be returned.\n    }\n    return null;\n}\nvar MultiFactorId;\n(function (MultiFactorId) {\n    MultiFactorId[\"Phone\"] = \"phone\";\n})(MultiFactorId || (MultiFactorId = {}));\n/**\n * Abstract class representing a multi-factor info interface.\n */\nvar MultiFactorInfo = /** @class */ (function () {\n    /**\n     * Initializes the MultiFactorInfo object using the server side response.\n     *\n     * @param response The server side response.\n     * @constructor\n     */\n    function MultiFactorInfo(response) {\n        this.initFromServerResponse(response);\n    }\n    /**\n     * Initializes the MultiFactorInfo associated subclass using the server side.\n     * If no MultiFactorInfo is associated with the response, null is returned.\n     *\n     * @param response The server side response.\n     * @constructor\n     */\n    MultiFactorInfo.initMultiFactorInfo = function (response) {\n        var multiFactorInfo = null;\n        // Only PhoneMultiFactorInfo currently available.\n        try {\n            multiFactorInfo = new PhoneMultiFactorInfo(response);\n        }\n        catch (e) {\n            // Ignore error.\n        }\n        return multiFactorInfo;\n    };\n    /** @return The plain object representation. */\n    MultiFactorInfo.prototype.toJSON = function () {\n        return {\n            uid: this.uid,\n            displayName: this.displayName,\n            factorId: this.factorId,\n            enrollmentTime: this.enrollmentTime,\n        };\n    };\n    /**\n     * Initializes the MultiFactorInfo object using the provided server response.\n     *\n     * @param response The server side response.\n     */\n    MultiFactorInfo.prototype.initFromServerResponse = function (response) {\n        var factorId = response && this.getFactorId(response);\n        if (!factorId || !response || !response.mfaEnrollmentId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid multi-factor info response');\n        }\n        utils.addReadonlyGetter(this, 'uid', response.mfaEnrollmentId);\n        utils.addReadonlyGetter(this, 'factorId', factorId);\n        utils.addReadonlyGetter(this, 'displayName', response.displayName);\n        // Encoded using [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format.\n        // For example, \"2017-01-15T01:30:15.01Z\".\n        // This can be parsed directly via Date constructor.\n        // This can be computed using Data.prototype.toISOString.\n        if (response.enrolledAt) {\n            utils.addReadonlyGetter(this, 'enrollmentTime', new Date(response.enrolledAt).toUTCString());\n        }\n        else {\n            utils.addReadonlyGetter(this, 'enrollmentTime', null);\n        }\n    };\n    return MultiFactorInfo;\n}());\nexports.MultiFactorInfo = MultiFactorInfo;\n/** Class representing a phone MultiFactorInfo object. */\nvar PhoneMultiFactorInfo = /** @class */ (function (_super) {\n    __extends(PhoneMultiFactorInfo, _super);\n    /**\n     * Initializes the PhoneMultiFactorInfo object using the server side response.\n     *\n     * @param response The server side response.\n     * @constructor\n     */\n    function PhoneMultiFactorInfo(response) {\n        var _this = _super.call(this, response) || this;\n        utils.addReadonlyGetter(_this, 'phoneNumber', response.phoneInfo);\n        return _this;\n    }\n    /** @return The plain object representation. */\n    PhoneMultiFactorInfo.prototype.toJSON = function () {\n        return Object.assign(_super.prototype.toJSON.call(this), {\n            phoneNumber: this.phoneNumber,\n        });\n    };\n    /**\n     * Returns the factor ID based on the response provided.\n     *\n     * @param response The server side response.\n     * @return The multi-factor ID associated with the provided response. If the response is\n     *     not associated with any known multi-factor ID, null is returned.\n     */\n    PhoneMultiFactorInfo.prototype.getFactorId = function (response) {\n        return (response && response.phoneInfo) ? MultiFactorId.Phone : null;\n    };\n    return PhoneMultiFactorInfo;\n}(MultiFactorInfo));\nexports.PhoneMultiFactorInfo = PhoneMultiFactorInfo;\n/** Class representing multi-factor related properties of a user. */\nvar MultiFactor = /** @class */ (function () {\n    /**\n     * Initializes the MultiFactor object using the server side or JWT format response.\n     *\n     * @param response The server side response.\n     * @constructor\n     */\n    function MultiFactor(response) {\n        var parsedEnrolledFactors = [];\n        if (!validator_1.isNonNullObject(response)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid multi-factor response');\n        }\n        else if (response.mfaInfo) {\n            response.mfaInfo.forEach(function (factorResponse) {\n                var multiFactorInfo = MultiFactorInfo.initMultiFactorInfo(factorResponse);\n                if (multiFactorInfo) {\n                    parsedEnrolledFactors.push(multiFactorInfo);\n                }\n            });\n        }\n        // Make enrolled factors immutable.\n        utils.addReadonlyGetter(this, 'enrolledFactors', Object.freeze(parsedEnrolledFactors));\n    }\n    /** @return The plain object representation. */\n    MultiFactor.prototype.toJSON = function () {\n        return {\n            enrolledFactors: this.enrolledFactors.map(function (info) { return info.toJSON(); }),\n        };\n    };\n    return MultiFactor;\n}());\nexports.MultiFactor = MultiFactor;\n/**\n * User metadata class that provides metadata information like user account creation\n * and last sign in time.\n *\n * @param response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\nvar UserMetadata = /** @class */ (function () {\n    function UserMetadata(response) {\n        // Creation date should always be available but due to some backend bugs there\n        // were cases in the past where users did not have creation date properly set.\n        // This included legacy Firebase migrating project users and some anonymous users.\n        // These bugs have already been addressed since then.\n        utils.addReadonlyGetter(this, 'creationTime', parseDate(response.createdAt));\n        utils.addReadonlyGetter(this, 'lastSignInTime', parseDate(response.lastLoginAt));\n        var lastRefreshAt = response.lastRefreshAt ? new Date(response.lastRefreshAt).toUTCString() : null;\n        utils.addReadonlyGetter(this, 'lastRefreshTime', lastRefreshAt);\n    }\n    /** @return The plain object representation of the user's metadata. */\n    UserMetadata.prototype.toJSON = function () {\n        return {\n            lastSignInTime: this.lastSignInTime,\n            creationTime: this.creationTime,\n        };\n    };\n    return UserMetadata;\n}());\nexports.UserMetadata = UserMetadata;\n/**\n * User info class that provides provider user information for different\n * Firebase providers like google.com, facebook.com, password, etc.\n *\n * @param response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\nvar UserInfo = /** @class */ (function () {\n    function UserInfo(response) {\n        // Provider user id and provider id are required.\n        if (!response.rawId || !response.providerId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user info response');\n        }\n        utils.addReadonlyGetter(this, 'uid', response.rawId);\n        utils.addReadonlyGetter(this, 'displayName', response.displayName);\n        utils.addReadonlyGetter(this, 'email', response.email);\n        utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n        utils.addReadonlyGetter(this, 'providerId', response.providerId);\n        utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber);\n    }\n    /** @return The plain object representation of the current provider data. */\n    UserInfo.prototype.toJSON = function () {\n        return {\n            uid: this.uid,\n            displayName: this.displayName,\n            email: this.email,\n            photoURL: this.photoURL,\n            providerId: this.providerId,\n            phoneNumber: this.phoneNumber,\n        };\n    };\n    return UserInfo;\n}());\nexports.UserInfo = UserInfo;\n/**\n * User record class that defines the Firebase user object populated from\n * the Firebase Auth getAccountInfo response.\n *\n * @param response The server side response returned from the getAccountInfo\n *     endpoint.\n * @constructor\n */\nvar UserRecord = /** @class */ (function () {\n    function UserRecord(response) {\n        // The Firebase user id is required.\n        if (!response.localId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user response');\n        }\n        utils.addReadonlyGetter(this, 'uid', response.localId);\n        utils.addReadonlyGetter(this, 'email', response.email);\n        utils.addReadonlyGetter(this, 'emailVerified', !!response.emailVerified);\n        utils.addReadonlyGetter(this, 'displayName', response.displayName);\n        utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n        utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber);\n        // If disabled is not provided, the account is enabled by default.\n        utils.addReadonlyGetter(this, 'disabled', response.disabled || false);\n        utils.addReadonlyGetter(this, 'metadata', new UserMetadata(response));\n        var providerData = [];\n        for (var _i = 0, _a = (response.providerUserInfo || []); _i < _a.length; _i++) {\n            var entry = _a[_i];\n            providerData.push(new UserInfo(entry));\n        }\n        utils.addReadonlyGetter(this, 'providerData', providerData);\n        // If the password hash is redacted (probably due to missing permissions)\n        // then clear it out, similar to how the salt is returned. (Otherwise, it\n        // *looks* like a b64-encoded hash is present, which is confusing.)\n        if (response.passwordHash === B64_REDACTED) {\n            utils.addReadonlyGetter(this, 'passwordHash', undefined);\n        }\n        else {\n            utils.addReadonlyGetter(this, 'passwordHash', response.passwordHash);\n        }\n        utils.addReadonlyGetter(this, 'passwordSalt', response.salt);\n        if (response.customAttributes) {\n            utils.addReadonlyGetter(this, 'customClaims', JSON.parse(response.customAttributes));\n        }\n        var validAfterTime = null;\n        // Convert validSince first to UTC milliseconds and then to UTC date string.\n        if (typeof response.validSince !== 'undefined') {\n            validAfterTime = parseDate(parseInt(response.validSince, 10) * 1000);\n        }\n        utils.addReadonlyGetter(this, 'tokensValidAfterTime', validAfterTime || undefined);\n        utils.addReadonlyGetter(this, 'tenantId', response.tenantId);\n        var multiFactor = new MultiFactor(response);\n        if (multiFactor.enrolledFactors.length > 0) {\n            utils.addReadonlyGetter(this, 'multiFactor', multiFactor);\n        }\n    }\n    /** @return The plain object representation of the user record. */\n    UserRecord.prototype.toJSON = function () {\n        var json = {\n            uid: this.uid,\n            email: this.email,\n            emailVerified: this.emailVerified,\n            displayName: this.displayName,\n            photoURL: this.photoURL,\n            phoneNumber: this.phoneNumber,\n            disabled: this.disabled,\n            // Convert metadata to json.\n            metadata: this.metadata.toJSON(),\n            passwordHash: this.passwordHash,\n            passwordSalt: this.passwordSalt,\n            customClaims: deep_copy_1.deepCopy(this.customClaims),\n            tokensValidAfterTime: this.tokensValidAfterTime,\n            tenantId: this.tenantId,\n        };\n        if (this.multiFactor) {\n            json.multiFactor = this.multiFactor.toJSON();\n        }\n        json.providerData = [];\n        for (var _i = 0, _a = this.providerData; _i < _a.length; _i++) {\n            var entry = _a[_i];\n            // Convert each provider data to json.\n            json.providerData.push(entry.toJSON());\n        }\n        return json;\n    };\n    return UserRecord;\n}());\nexports.UserRecord = UserRecord;\n"]},"metadata":{},"sourceType":"script"}