{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Iam = void 0;\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n\nconst util_1 = require(\"./util\");\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n *\n * @constructor Iam\n * @mixin\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n */\n\n\nclass Iam {\n  constructor(bucket) {\n    this.request_ = bucket.request.bind(bucket);\n    this.resourceId_ = 'buckets/' + bucket.getId();\n  }\n  /**\n   * @typedef {object} GetPolicyOptions Requested options for IAM#getPolicy().\n   * @property {number} [requestedPolicyVersion] The version of IAM policies to\n   *     request. If a policy with a condition is requested without setting\n   *     this, the server will return an error. This must be set to a value\n   *     of 3 to retrieve IAM policies containing conditions. This is to\n   *     prevent client code that isn't aware of IAM conditions from\n   *     interpreting and modifying policies incorrectly. The service might\n   *     return a policy with version lower than the one that was requested,\n   *     based on the feature syntax in the policy fetched.\n   *     @see [IAM Policy versions]{@link https://cloud.google.com/iam/docs/policies#versions}\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * @typedef {array} GetPolicyResponse\n   * @property {Policy} 0 The policy.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @typedef {object} Policy\n   * @property {PolicyBinding[]} policy.bindings Bindings associate members with roles.\n   * @property {string} [policy.etag] Etags are used to perform a read-modify-write.\n   * @property {number} [policy.version] The syntax schema version of the Policy.\n   *      To set an IAM policy with conditional binding, this field must be set to\n   *      3 or greater.\n   *     @see [IAM Policy versions]{@link https://cloud.google.com/iam/docs/policies#versions}\n   */\n\n  /**\n   * @typedef {object} PolicyBinding\n   * @property {string} role Role that is assigned to members.\n   * @property {string[]} members Specifies the identities requesting access for the bucket.\n   * @property {Expr} [condition] The condition that is associated with this binding.\n   */\n\n  /**\n   * @typedef {object} Expr\n   * @property {string} [title] An optional title for the expression, i.e. a\n   *     short string describing its purpose. This can be used e.g. in UIs\n   *     which allow to enter the expression.\n   * @property {string} [description] An optional description of the\n   *     expression. This is a longer text which describes the expression,\n   *     e.g. when hovered over it in a UI.\n   * @property {string} expression Textual representation of an expression in\n   *     Common Expression Language syntax. The application context of the\n   *     containing message determines which well-known feature set of CEL\n   *     is supported.The condition that is associated with this binding.\n   *\n   * @see [Condition] https://cloud.google.com/storage/docs/access-control/iam#conditions\n   */\n\n  /**\n   * Get the IAM policy.\n   *\n   * @param {GetPolicyOptions} [options] Request options.\n   * @param {GetPolicyCallback} [callback] Callback function.\n   * @returns {Promise<GetPolicyResponse>}\n   *\n   * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * bucket.iam.getPolicy(\n   *     {requestedPolicyVersion: 3},\n   *     function(err, policy, apiResponse) {\n   *\n   *     },\n   * );\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.getPolicy({requestedPolicyVersion: 3})\n   *   .then(function(data) {\n   *     const policy = data[0];\n   *     const apiResponse = data[1];\n   *   });\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_view_bucket_iam_members\n   * Example of retrieving a bucket's IAM policy:\n   */\n\n\n  getPolicy(optionsOrCallback, callback) {\n    const {\n      options,\n      callback: cb\n    } = util_1.normalize(optionsOrCallback, callback);\n    const qs = {};\n\n    if (options.userProject) {\n      qs.userProject = options.userProject;\n    }\n\n    if (options.requestedPolicyVersion !== null && options.requestedPolicyVersion !== undefined) {\n      qs.optionsRequestedPolicyVersion = options.requestedPolicyVersion;\n    }\n\n    this.request_({\n      uri: '/iam',\n      qs\n    }, cb);\n  }\n  /**\n   * Set the IAM policy.\n   *\n   * @throws {Error} If no policy is provided.\n   *\n   * @param {Policy} policy The policy.\n   * @param {SetPolicyOptions} [options] Configuration opbject.\n   * @param {SetPolicyCallback} callback Callback function.\n   * @returns {Promise<SetPolicyResponse>}\n   *\n   * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy}\n   * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * const myPolicy = {\n   *   bindings: [\n   *     {\n   *       role: 'roles/storage.admin',\n   *       members:\n   * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n   *     }\n   *   ]\n   * };\n   *\n   * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.setPolicy(myPolicy).then(function(data) {\n   *   const policy = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_add_bucket_iam_member\n   * Example of adding to a bucket's IAM policy:\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_remove_bucket_iam_member\n   * Example of removing from a bucket's IAM policy:\n   */\n\n\n  setPolicy(policy, optionsOrCallback, callback) {\n    if (policy === null || typeof policy !== 'object') {\n      throw new Error('A policy object is required.');\n    }\n\n    const {\n      options,\n      callback: cb\n    } = util_1.normalize(optionsOrCallback, callback);\n    this.request_({\n      method: 'PUT',\n      uri: '/iam',\n      json: Object.assign({\n        resourceId: this.resourceId_\n      }, policy),\n      qs: options\n    }, cb);\n  }\n  /**\n   * Test a set of permissions for a resource.\n   *\n   * @throws {Error} If permissions are not provided.\n   *\n   * @param {string|string[]} permissions The permission(s) to test for.\n   * @param {TestIamPermissionsOptions} [options] Configuration object.\n   * @param {TestIamPermissionsCallback} [callback] Callback function.\n   * @returns {Promise<TestIamPermissionsResponse>}\n   *\n   * @see [Buckets: testIamPermissions API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * //-\n   * // Test a single permission.\n   * //-\n   * const test = 'storage.buckets.delete';\n   *\n   * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n   *   console.log(permissions);\n   *   // {\n   *   //   \"storage.buckets.delete\": true\n   *   // }\n   * });\n   *\n   * //-\n   * // Test several permissions at once.\n   * //-\n   * const tests = [\n   *   'storage.buckets.delete',\n   *   'storage.buckets.get'\n   * ];\n   *\n   * bucket.iam.testPermissions(tests, function(err, permissions) {\n   *   console.log(permissions);\n   *   // {\n   *   //   \"storage.buckets.delete\": false,\n   *   //   \"storage.buckets.get\": true\n   *   // }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.testPermissions(test).then(function(data) {\n   *   const permissions = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  testPermissions(permissions, optionsOrCallback, callback) {\n    if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n      throw new Error('Permissions are required.');\n    }\n\n    const {\n      options,\n      callback: cb\n    } = util_1.normalize(optionsOrCallback, callback);\n    const permissionsArray = arrify(permissions);\n    const req = Object.assign({\n      permissions: permissionsArray\n    }, options);\n    this.request_({\n      uri: '/iam/testPermissions',\n      qs: req,\n      useQuerystring: true\n    }, (err, resp) => {\n      if (err) {\n        cb(err, null, resp);\n        return;\n      }\n\n      const availablePermissions = arrify(resp.permissions);\n      const permissionsHash = permissionsArray.reduce((acc, permission) => {\n        acc[permission] = availablePermissions.indexOf(permission) > -1;\n        return acc;\n      }, {});\n      cb(null, permissionsHash, resp);\n    });\n  }\n\n}\n\nexports.Iam = Iam;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Iam);","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/storage/build/src/iam.js"],"names":["Object","defineProperty","exports","value","Iam","promisify_1","require","arrify","util_1","constructor","bucket","request_","request","bind","resourceId_","getId","getPolicy","optionsOrCallback","callback","options","cb","normalize","qs","userProject","requestedPolicyVersion","undefined","optionsRequestedPolicyVersion","uri","setPolicy","policy","Error","method","json","assign","resourceId","testPermissions","permissions","Array","isArray","permissionsArray","req","useQuerystring","err","resp","availablePermissions","permissionsHash","reduce","acc","permission","indexOf","promisifyAll"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,GAAR,GAAc,KAAK,CAAnB;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,GAAN,CAAU;AACNK,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKC,QAAL,GAAgBD,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBH,MAApB,CAAhB;AACA,SAAKI,WAAL,GAAmB,aAAaJ,MAAM,CAACK,KAAP,EAAhC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,SAAS,CAACC,iBAAD,EAAoBC,QAApB,EAA8B;AACnC,UAAM;AAAEC,MAAAA,OAAF;AAAWD,MAAAA,QAAQ,EAAEE;AAArB,QAA4BZ,MAAM,CAACa,SAAP,CAAiBJ,iBAAjB,EAAoCC,QAApC,CAAlC;AACA,UAAMI,EAAE,GAAG,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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Iam = void 0;\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst util_1 = require(\"./util\");\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n *\n * @constructor Iam\n * @mixin\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n */\nclass Iam {\n    constructor(bucket) {\n        this.request_ = bucket.request.bind(bucket);\n        this.resourceId_ = 'buckets/' + bucket.getId();\n    }\n    /**\n     * @typedef {object} GetPolicyOptions Requested options for IAM#getPolicy().\n     * @property {number} [requestedPolicyVersion] The version of IAM policies to\n     *     request. If a policy with a condition is requested without setting\n     *     this, the server will return an error. This must be set to a value\n     *     of 3 to retrieve IAM policies containing conditions. This is to\n     *     prevent client code that isn't aware of IAM conditions from\n     *     interpreting and modifying policies incorrectly. The service might\n     *     return a policy with version lower than the one that was requested,\n     *     based on the feature syntax in the policy fetched.\n     *     @see [IAM Policy versions]{@link https://cloud.google.com/iam/docs/policies#versions}\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} GetPolicyResponse\n     * @property {Policy} 0 The policy.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @typedef {object} Policy\n     * @property {PolicyBinding[]} policy.bindings Bindings associate members with roles.\n     * @property {string} [policy.etag] Etags are used to perform a read-modify-write.\n     * @property {number} [policy.version] The syntax schema version of the Policy.\n     *      To set an IAM policy with conditional binding, this field must be set to\n     *      3 or greater.\n     *     @see [IAM Policy versions]{@link https://cloud.google.com/iam/docs/policies#versions}\n     */\n    /**\n     * @typedef {object} PolicyBinding\n     * @property {string} role Role that is assigned to members.\n     * @property {string[]} members Specifies the identities requesting access for the bucket.\n     * @property {Expr} [condition] The condition that is associated with this binding.\n     */\n    /**\n     * @typedef {object} Expr\n     * @property {string} [title] An optional title for the expression, i.e. a\n     *     short string describing its purpose. This can be used e.g. in UIs\n     *     which allow to enter the expression.\n     * @property {string} [description] An optional description of the\n     *     expression. This is a longer text which describes the expression,\n     *     e.g. when hovered over it in a UI.\n     * @property {string} expression Textual representation of an expression in\n     *     Common Expression Language syntax. The application context of the\n     *     containing message determines which well-known feature set of CEL\n     *     is supported.The condition that is associated with this binding.\n     *\n     * @see [Condition] https://cloud.google.com/storage/docs/access-control/iam#conditions\n     */\n    /**\n     * Get the IAM policy.\n     *\n     * @param {GetPolicyOptions} [options] Request options.\n     * @param {GetPolicyCallback} [callback] Callback function.\n     * @returns {Promise<GetPolicyResponse>}\n     *\n     * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * bucket.iam.getPolicy(\n     *     {requestedPolicyVersion: 3},\n     *     function(err, policy, apiResponse) {\n     *\n     *     },\n     * );\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.getPolicy({requestedPolicyVersion: 3})\n     *   .then(function(data) {\n     *     const policy = data[0];\n     *     const apiResponse = data[1];\n     *   });\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_view_bucket_iam_members\n     * Example of retrieving a bucket's IAM policy:\n     */\n    getPolicy(optionsOrCallback, callback) {\n        const { options, callback: cb } = util_1.normalize(optionsOrCallback, callback);\n        const qs = {};\n        if (options.userProject) {\n            qs.userProject = options.userProject;\n        }\n        if (options.requestedPolicyVersion !== null &&\n            options.requestedPolicyVersion !== undefined) {\n            qs.optionsRequestedPolicyVersion = options.requestedPolicyVersion;\n        }\n        this.request_({\n            uri: '/iam',\n            qs,\n        }, cb);\n    }\n    /**\n     * Set the IAM policy.\n     *\n     * @throws {Error} If no policy is provided.\n     *\n     * @param {Policy} policy The policy.\n     * @param {SetPolicyOptions} [options] Configuration opbject.\n     * @param {SetPolicyCallback} callback Callback function.\n     * @returns {Promise<SetPolicyResponse>}\n     *\n     * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy}\n     * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * const myPolicy = {\n     *   bindings: [\n     *     {\n     *       role: 'roles/storage.admin',\n     *       members:\n     * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n     *     }\n     *   ]\n     * };\n     *\n     * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.setPolicy(myPolicy).then(function(data) {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_add_bucket_iam_member\n     * Example of adding to a bucket's IAM policy:\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_remove_bucket_iam_member\n     * Example of removing from a bucket's IAM policy:\n     */\n    setPolicy(policy, optionsOrCallback, callback) {\n        if (policy === null || typeof policy !== 'object') {\n            throw new Error('A policy object is required.');\n        }\n        const { options, callback: cb } = util_1.normalize(optionsOrCallback, callback);\n        this.request_({\n            method: 'PUT',\n            uri: '/iam',\n            json: Object.assign({\n                resourceId: this.resourceId_,\n            }, policy),\n            qs: options,\n        }, cb);\n    }\n    /**\n     * Test a set of permissions for a resource.\n     *\n     * @throws {Error} If permissions are not provided.\n     *\n     * @param {string|string[]} permissions The permission(s) to test for.\n     * @param {TestIamPermissionsOptions} [options] Configuration object.\n     * @param {TestIamPermissionsCallback} [callback] Callback function.\n     * @returns {Promise<TestIamPermissionsResponse>}\n     *\n     * @see [Buckets: testIamPermissions API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Test a single permission.\n     * //-\n     * const test = 'storage.buckets.delete';\n     *\n     * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // Test several permissions at once.\n     * //-\n     * const tests = [\n     *   'storage.buckets.delete',\n     *   'storage.buckets.get'\n     * ];\n     *\n     * bucket.iam.testPermissions(tests, function(err, permissions) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": false,\n     *   //   \"storage.buckets.get\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.testPermissions(test).then(function(data) {\n     *   const permissions = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    testPermissions(permissions, optionsOrCallback, callback) {\n        if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n            throw new Error('Permissions are required.');\n        }\n        const { options, callback: cb } = util_1.normalize(optionsOrCallback, callback);\n        const permissionsArray = arrify(permissions);\n        const req = Object.assign({\n            permissions: permissionsArray,\n        }, options);\n        this.request_({\n            uri: '/iam/testPermissions',\n            qs: req,\n            useQuerystring: true,\n        }, (err, resp) => {\n            if (err) {\n                cb(err, null, resp);\n                return;\n            }\n            const availablePermissions = arrify(resp.permissions);\n            const permissionsHash = permissionsArray.reduce((acc, permission) => {\n                acc[permission] = availablePermissions.indexOf(permission) > -1;\n                return acc;\n            }, {});\n            cb(null, permissionsHash, resp);\n        });\n    }\n}\nexports.Iam = Iam;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Iam);\n//# sourceMappingURL=iam.js.map"]},"metadata":{},"sourceType":"script"}