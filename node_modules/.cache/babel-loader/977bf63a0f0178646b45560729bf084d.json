{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRetryConfig = void 0;\n\nasync function getRetryConfig(err) {\n  var _a;\n\n  let config = getConfig(err);\n\n  if (!err || !err.config || !config && !err.config.retry) {\n    return {\n      shouldRetry: false\n    };\n  }\n\n  config = config || {};\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  config.retry = config.retry === undefined || config.retry === null ? 3 : config.retry;\n  config.httpMethodsToRetry = config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n  config.noResponseRetries = config.noResponseRetries === undefined || config.noResponseRetries === null ? 2 : config.noResponseRetries; // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n  const retryRanges = [// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n  // 1xx - Retry (Informational, request still processing)\n  // 2xx - Do not retry (Success)\n  // 3xx - Do not retry (Redirect)\n  // 4xx - Do not retry (Client errors)\n  // 429 - Retry (\"Too Many Requests\")\n  // 5xx - Retry (Server errors)\n  [100, 199], [429, 429], [500, 599]];\n  config.statusCodesToRetry = config.statusCodesToRetry || retryRanges; // Put the config back into the err\n\n  err.config.retryConfig = config; // Determine if we should retry the request\n\n  const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n\n  if (!(await shouldRetryFn(err))) {\n    return {\n      shouldRetry: false,\n      config: err.config\n    };\n  } // Calculate time to wait with exponential backoff.\n  // If this is the first retry, look for a configured retryDelay.\n\n\n  const retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100; // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n\n  const delay = retryDelay + (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000; // We're going to retry!  Incremenent the counter.\n\n  err.config.retryConfig.currentRetryAttempt += 1; // Create a promise that invokes the retry after the backOffDelay\n\n  const backoff = new Promise(resolve => {\n    setTimeout(resolve, delay);\n  }); // Notify the user if they added an `onRetryAttempt` handler\n\n  if (config.onRetryAttempt) {\n    config.onRetryAttempt(err);\n  } // Return the promise in which recalls Gaxios to retry the request\n\n\n  await backoff;\n  return {\n    shouldRetry: true,\n    config: err.config\n  };\n}\n\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\n\nfunction shouldRetryRequest(err) {\n  const config = getConfig(err); // node-fetch raises an AbortError if signaled:\n  // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n\n  if (err.name === 'AbortError') {\n    return false;\n  } // If there's no config, or retries are disabled, return.\n\n\n  if (!config || config.retry === 0) {\n    return false;\n  } // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n\n\n  if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n    return false;\n  } // Only retry with configured HttpMethods.\n\n\n  if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n    return false;\n  } // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n\n  if (err.response && err.response.status) {\n    let isInRange = false;\n\n    for (const [min, max] of config.statusCodesToRetry) {\n      const status = err.response.status;\n\n      if (status >= min && status <= max) {\n        isInRange = true;\n        break;\n      }\n    }\n\n    if (!isInRange) {\n      return false;\n    }\n  } // If we are out of retry attempts, return\n\n\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n\n  if (config.currentRetryAttempt >= config.retry) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\n\n\nfunction getConfig(err) {\n  if (err && err.config && err.config.retryConfig) {\n    return err.config.retryConfig;\n  }\n\n  return;\n}","map":{"version":3,"sources":["../../src/retry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRetryConfig = void 0;\nasync function getRetryConfig(err) {\n    var _a;\n    let config = getConfig(err);\n    if (!err || !err.config || (!config && !err.config.retry)) {\n        return { shouldRetry: false };\n    }\n    config = config || {};\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    config.retry =\n        config.retry === undefined || config.retry === null ? 3 : config.retry;\n    config.httpMethodsToRetry = config.httpMethodsToRetry || [\n        'GET',\n        'HEAD',\n        'PUT',\n        'OPTIONS',\n        'DELETE',\n    ];\n    config.noResponseRetries =\n        config.noResponseRetries === undefined || config.noResponseRetries === null\n            ? 2\n            : config.noResponseRetries;\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    const retryRanges = [\n        // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n        // 1xx - Retry (Informational, request still processing)\n        // 2xx - Do not retry (Success)\n        // 3xx - Do not retry (Redirect)\n        // 4xx - Do not retry (Client errors)\n        // 429 - Retry (\"Too Many Requests\")\n        // 5xx - Retry (Server errors)\n        [100, 199],\n        [429, 429],\n        [500, 599],\n    ];\n    config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;\n    // Put the config back into the err\n    err.config.retryConfig = config;\n    // Determine if we should retry the request\n    const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n    if (!(await shouldRetryFn(err))) {\n        return { shouldRetry: false, config: err.config };\n    }\n    // Calculate time to wait with exponential backoff.\n    // If this is the first retry, look for a configured retryDelay.\n    const retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100;\n    // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n    const delay = retryDelay + ((Math.pow(2, config.currentRetryAttempt) - 1) / 2) * 1000;\n    // We're going to retry!  Incremenent the counter.\n    err.config.retryConfig.currentRetryAttempt += 1;\n    // Create a promise that invokes the retry after the backOffDelay\n    const backoff = new Promise(resolve => {\n        setTimeout(resolve, delay);\n    });\n    // Notify the user if they added an `onRetryAttempt` handler\n    if (config.onRetryAttempt) {\n        config.onRetryAttempt(err);\n    }\n    // Return the promise in which recalls Gaxios to retry the request\n    await backoff;\n    return { shouldRetry: true, config: err.config };\n}\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\nfunction shouldRetryRequest(err) {\n    const config = getConfig(err);\n    // node-fetch raises an AbortError if signaled:\n    // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n    if (err.name === 'AbortError') {\n        return false;\n    }\n    // If there's no config, or retries are disabled, return.\n    if (!config || config.retry === 0) {\n        return false;\n    }\n    // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n    if (!err.response &&\n        (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n        return false;\n    }\n    // Only retry with configured HttpMethods.\n    if (!err.config.method ||\n        config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n        return false;\n    }\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    if (err.response && err.response.status) {\n        let isInRange = false;\n        for (const [min, max] of config.statusCodesToRetry) {\n            const status = err.response.status;\n            if (status >= min && status <= max) {\n                isInRange = true;\n                break;\n            }\n        }\n        if (!isInRange) {\n            return false;\n        }\n    }\n    // If we are out of retry attempts, return\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    if (config.currentRetryAttempt >= config.retry) {\n        return false;\n    }\n    return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\nfunction getConfig(err) {\n    if (err && err.config && err.config.retryConfig) {\n        return err.config.retryConfig;\n    }\n    return;\n}\n//# sourceMappingURL=retry.js.map"]},"metadata":{},"sourceType":"script"}