{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BundleDescriptor = void 0;\n\nconst normalApiCaller_1 = require(\"../normalCalls/normalApiCaller\");\n\nconst bundleApiCaller_1 = require(\"./bundleApiCaller\");\n\nconst bundleExecutor_1 = require(\"./bundleExecutor\");\n\nconst util_1 = require(\"../util\");\n/**\n * A descriptor for calls that can be bundled into one call.\n */\n\n\nclass BundleDescriptor {\n  /**\n   * Describes the structure of bundled call.\n   *\n   * requestDiscriminatorFields may include '.' as a separator, which is used to\n   * indicate object traversal. This allows fields in nested objects to be used\n   * to determine what request to bundle.\n   *\n   * @property {String} bundledField\n   * @property {String} requestDiscriminatorFields\n   * @property {String} subresponseField\n   * @property {Function} byteLengthFunction\n   *\n   * @param {String} bundledField - the repeated field in the request message\n   *   that will have its elements aggregated by bundling.\n   * @param {String} requestDiscriminatorFields - a list of fields in the\n   *   target request message class that are used to detemrine which request\n   *   messages should be bundled together.\n   * @param {String} subresponseField - an optional field, when present it\n   *   indicates the field in the response message that should be used to\n   *   demultiplex the response into multiple response messages.\n   * @param {Function} byteLengthFunction - a function to obtain the byte\n   *   length to be consumed for the bundled field messages. Because Node.JS\n   *   protobuf.js/gRPC uses builtin Objects for the user-visible data and\n   *   internally they are encoded/decoded in protobuf manner, this function\n   *   is actually necessary to calculate the byte length.\n   * @constructor\n   */\n  constructor(bundledField, requestDiscriminatorFields, subresponseField, byteLengthFunction) {\n    if (!byteLengthFunction && typeof subresponseField === 'function') {\n      byteLengthFunction = subresponseField;\n      subresponseField = null;\n    }\n\n    this.bundledField = bundledField;\n    this.requestDiscriminatorFields = requestDiscriminatorFields.map(util_1.snakeToCamelCase);\n    this.subresponseField = subresponseField;\n    this.byteLengthFunction = byteLengthFunction;\n  }\n\n  getApiCaller(settings) {\n    if (settings.isBundling === false) {\n      return new normalApiCaller_1.NormalApiCaller();\n    }\n\n    return new bundleApiCaller_1.BundleApiCaller(new bundleExecutor_1.BundleExecutor(settings.bundleOptions, this));\n  }\n\n}\n\nexports.BundleDescriptor = BundleDescriptor;","map":{"version":3,"sources":["../../../src/bundlingCalls/bundleDescriptor.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAIH,MAAA,iBAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;;AAEA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,gBAAb,CAA6B;AAM3B;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BG;AACH,EAAA,WAAA,CACE,YADF,EAEE,0BAFF,EAGE,gBAHF,EAIE,kBAJF,EAI8B;AAE5B,QAAI,CAAC,kBAAD,IAAuB,OAAO,gBAAP,KAA4B,UAAvD,EAAmE;AACjE,MAAA,kBAAkB,GAAG,gBAArB;AACA,MAAA,gBAAgB,GAAG,IAAnB;AACD;;AACD,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,0BAAL,GAAkC,0BAA0B,CAAC,GAA3B,CAChC,MAAA,CAAA,gBADgC,CAAlC;AAGA,SAAK,gBAAL,GAAwB,gBAAxB;AACA,SAAK,kBAAL,GAA0B,kBAA1B;AACD;;AAED,EAAA,YAAY,CAAC,QAAD,EAAuB;AACjC,QAAI,QAAQ,CAAC,UAAT,KAAwB,KAA5B,EAAmC;AACjC,aAAO,IAAI,iBAAA,CAAA,eAAJ,EAAP;AACD;;AACD,WAAO,IAAI,iBAAA,CAAA,eAAJ,CACL,IAAI,gBAAA,CAAA,cAAJ,CAAmB,QAAQ,CAAC,aAA5B,EAA4C,IAA5C,CADK,CAAP;AAGD;;AA1D0B;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BundleDescriptor = void 0;\nconst normalApiCaller_1 = require(\"../normalCalls/normalApiCaller\");\nconst bundleApiCaller_1 = require(\"./bundleApiCaller\");\nconst bundleExecutor_1 = require(\"./bundleExecutor\");\nconst util_1 = require(\"../util\");\n/**\n * A descriptor for calls that can be bundled into one call.\n */\nclass BundleDescriptor {\n    /**\n     * Describes the structure of bundled call.\n     *\n     * requestDiscriminatorFields may include '.' as a separator, which is used to\n     * indicate object traversal. This allows fields in nested objects to be used\n     * to determine what request to bundle.\n     *\n     * @property {String} bundledField\n     * @property {String} requestDiscriminatorFields\n     * @property {String} subresponseField\n     * @property {Function} byteLengthFunction\n     *\n     * @param {String} bundledField - the repeated field in the request message\n     *   that will have its elements aggregated by bundling.\n     * @param {String} requestDiscriminatorFields - a list of fields in the\n     *   target request message class that are used to detemrine which request\n     *   messages should be bundled together.\n     * @param {String} subresponseField - an optional field, when present it\n     *   indicates the field in the response message that should be used to\n     *   demultiplex the response into multiple response messages.\n     * @param {Function} byteLengthFunction - a function to obtain the byte\n     *   length to be consumed for the bundled field messages. Because Node.JS\n     *   protobuf.js/gRPC uses builtin Objects for the user-visible data and\n     *   internally they are encoded/decoded in protobuf manner, this function\n     *   is actually necessary to calculate the byte length.\n     * @constructor\n     */\n    constructor(bundledField, requestDiscriminatorFields, subresponseField, byteLengthFunction) {\n        if (!byteLengthFunction && typeof subresponseField === 'function') {\n            byteLengthFunction = subresponseField;\n            subresponseField = null;\n        }\n        this.bundledField = bundledField;\n        this.requestDiscriminatorFields = requestDiscriminatorFields.map(util_1.snakeToCamelCase);\n        this.subresponseField = subresponseField;\n        this.byteLengthFunction = byteLengthFunction;\n    }\n    getApiCaller(settings) {\n        if (settings.isBundling === false) {\n            return new normalApiCaller_1.NormalApiCaller();\n        }\n        return new bundleApiCaller_1.BundleApiCaller(new bundleExecutor_1.BundleExecutor(settings.bundleOptions, this));\n    }\n}\nexports.BundleDescriptor = BundleDescriptor;\n//# sourceMappingURL=bundleDescriptor.js.map"]},"metadata":{},"sourceType":"script"}