{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BundleApiCaller = void 0;\n\nconst call_1 = require(\"../call\");\n\nconst googleError_1 = require(\"../googleError\");\n/**\n * An implementation of APICaller for bundled calls.\n * Uses BundleExecutor to do bundling.\n */\n\n\nclass BundleApiCaller {\n  constructor(bundler) {\n    this.bundler = bundler;\n  }\n\n  init(callback) {\n    if (callback) {\n      return new call_1.OngoingCall(callback);\n    }\n\n    return new call_1.OngoingCallPromise();\n  }\n\n  wrap(func) {\n    return func;\n  }\n\n  call(apiCall, argument, settings, status) {\n    if (!settings.isBundling) {\n      throw new googleError_1.GoogleError('Bundling enabled with no isBundling!');\n    }\n\n    status.call((argument, callback) => {\n      this.bundler.schedule(apiCall, argument, callback);\n      return status;\n    }, argument);\n  }\n\n  fail(canceller, err) {\n    canceller.callback(err);\n  }\n\n  result(canceller) {\n    return canceller.promise;\n  }\n\n}\n\nexports.BundleApiCaller = BundleApiCaller;","map":{"version":3,"sources":["../../../src/bundlingCalls/bundleApiCaller.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAIH,MAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAKA;;;AAGG;;;AACH,MAAa,eAAb,CAA4B;AAG1B,EAAA,WAAA,CAAY,OAAZ,EAAmC;AACjC,SAAK,OAAL,GAAe,OAAf;AACD;;AAED,EAAA,IAAI,CAAC,QAAD,EAAuB;AACzB,QAAI,QAAJ,EAAc;AACZ,aAAO,IAAI,MAAA,CAAA,WAAJ,CAAgB,QAAhB,CAAP;AACD;;AACD,WAAO,IAAI,MAAA,CAAA,kBAAJ,EAAP;AACD;;AAED,EAAA,IAAI,CAAC,IAAD,EAAe;AACjB,WAAO,IAAP;AACD;;AAED,EAAA,IAAI,CACF,OADE,EAEF,QAFE,EAGF,QAHE,EAIF,MAJE,EAIwB;AAE1B,QAAI,CAAC,QAAQ,CAAC,UAAd,EAA0B;AACxB,YAAM,IAAI,aAAA,CAAA,WAAJ,CAAgB,sCAAhB,CAAN;AACD;;AAED,IAAA,MAAM,CAAC,IAAP,CAAY,CAAC,QAAD,EAAe,QAAf,KAAyC;AACnD,WAAK,OAAL,CAAa,QAAb,CAAsB,OAAtB,EAA+B,QAA/B,EAAyC,QAAzC;AACA,aAAO,MAAP;AACD,KAHD,EAGG,QAHH;AAID;;AAED,EAAA,IAAI,CAAC,SAAD,EAAgC,GAAhC,EAAgD;AAClD,IAAA,SAAS,CAAC,QAAV,CAAoB,GAApB;AACD;;AAED,EAAA,MAAM,CAAC,SAAD,EAA8B;AAClC,WAAO,SAAS,CAAC,OAAjB;AACD;;AAxCyB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BundleApiCaller = void 0;\nconst call_1 = require(\"../call\");\nconst googleError_1 = require(\"../googleError\");\n/**\n * An implementation of APICaller for bundled calls.\n * Uses BundleExecutor to do bundling.\n */\nclass BundleApiCaller {\n    constructor(bundler) {\n        this.bundler = bundler;\n    }\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, status) {\n        if (!settings.isBundling) {\n            throw new googleError_1.GoogleError('Bundling enabled with no isBundling!');\n        }\n        status.call((argument, callback) => {\n            this.bundler.schedule(apiCall, argument, callback);\n            return status;\n        }, argument);\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.BundleApiCaller = BundleApiCaller;\n//# sourceMappingURL=bundleApiCaller.js.map"]},"metadata":{},"sourceType":"script"}