{"ast":null,"code":"var _jsxFileName = \"/Users/pulkitmittal/nft-bridge/NFTbridge/src/contexts/Web3Context.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport Web3 from 'web3';\nimport Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Web3Context = /*#__PURE__*/React.createContext({});\nexport const useWeb3Context = () => {\n  _s();\n\n  return useContext(Web3Context);\n};\n\n_s(useWeb3Context, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: '196440d5d02d41dfa2a8ee5bfd2e96bd'\n    }\n  }\n};\nconst web3Modal = new Web3Modal({\n  cacheProvider: true,\n  providerOptions\n});\nlet inj_provider;\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n\n  const [web3State, setWeb3State] = useState({});\n  const {\n    providerChainId,\n    ethersProvider,\n    account\n  } = web3State;\n  const [loading, setLoading] = useState(true);\n  const setWeb3Provider = useCallback(async (prov, initialCall = false) => {\n    try {\n      if (prov) {\n        const web3Provider = new Web3(prov); // console.log(prov)\n\n        inj_provider = web3Provider; // console.log(inj_provider);\n\n        const provider = new ethers.providers.Web3Provider(web3Provider.currentProvider);\n        const chainId = Number(prov.chainId);\n\n        if (initialCall) {\n          const signer = provider.getSigner();\n          const gotAccount = await signer.getAddress(); // console.log(gotAccount)\n\n          setWeb3State(_old => ({\n            account: gotAccount,\n            ethersProvider: provider,\n            providerChainId: chainId\n          }));\n        } else {\n          // console.log(prov.chainId)\n          setWeb3State(_old => ({ ..._old,\n            ethersProvider: provider,\n            providerChainId: Number(prov.chainId)\n          }));\n        }\n      }\n    } catch (error) {\n      console.log({\n        web3ModalError: error\n      });\n    }\n  }, []);\n  const connectWeb3 = useCallback(async () => {\n    try {\n      setLoading(true);\n      console.log(\"connecting..\");\n      const modalProvider = await web3Modal.connect();\n      console.log(modalProvider);\n      await setWeb3Provider(modalProvider, true); // Subscribe to accounts change\n\n      modalProvider.on('accountsChanged', accounts => {\n        setWeb3State(_old => ({ ..._old,\n          account: accounts[0]\n        }));\n      }); // Subscribe to chainId change\n\n      modalProvider.on('chainChanged', _chainId => {\n        setWeb3Provider(modalProvider);\n      });\n    } catch (error) {\n      console.log({\n        web3ModalError: error\n      });\n    }\n\n    setLoading(false);\n  }, [setWeb3Provider]);\n  const disconnect = useCallback(async () => {\n    web3Modal.clearCachedProvider();\n    setWeb3State({});\n  }, []);\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.autoRefreshOnNetworkChange = false;\n    }\n\n    if (web3Modal.cachedProvider) {\n      connectWeb3();\n    } else {\n      setLoading(false);\n    }\n  }, [connectWeb3]);\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      ethersProvider,\n      connectWeb3,\n      loading,\n      disconnect,\n      providerChainId,\n      account,\n      inj_provider\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Web3Provider, \"x6dc8GrPRUxOaIjp9VONNuhHZGw=\");\n\n_c = Web3Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/src/contexts/Web3Context.jsx"],"names":["React","useCallback","useContext","useEffect","useState","ethers","Web3","Web3Modal","WalletConnectProvider","Web3Context","createContext","useWeb3Context","providerOptions","walletconnect","package","options","infuraId","web3Modal","cacheProvider","inj_provider","Web3Provider","children","web3State","setWeb3State","providerChainId","ethersProvider","account","loading","setLoading","setWeb3Provider","prov","initialCall","web3Provider","provider","providers","currentProvider","chainId","Number","signer","getSigner","gotAccount","getAddress","_old","error","console","log","web3ModalError","connectWeb3","modalProvider","connect","on","accounts","_chainId","disconnect","clearCachedProvider","window","ethereum","autoRefreshOnNetworkChange","cachedProvider"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\n\nimport Web3 from 'web3';\nimport Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\n\nexport const Web3Context = React.createContext({});\nexport const useWeb3Context = () => useContext(Web3Context);\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: '196440d5d02d41dfa2a8ee5bfd2e96bd',\n    }\n  },\n};\n\nconst web3Modal = new Web3Modal({\n  cacheProvider: true,\n  providerOptions,\n});\n\nlet inj_provider;\n\nexport const Web3Provider = ({ children }) => {\n  const [web3State, setWeb3State] = useState({});\n  const { providerChainId, ethersProvider, account } = web3State;\n  const [loading, setLoading] = useState(true);\n\n  const setWeb3Provider = useCallback(async (prov, initialCall = false) => {\n    try {\n      if (prov) {\n        const web3Provider = new Web3(prov);\n        // console.log(prov)\n        inj_provider = web3Provider;\n        // console.log(inj_provider);\n        const provider = new ethers.providers.Web3Provider(\n          web3Provider.currentProvider,\n        );\n        const chainId = Number(prov.chainId);\n        \n        if (initialCall) {\n          const signer = provider.getSigner();\n          const gotAccount = await signer.getAddress();\n          // console.log(gotAccount)\n          setWeb3State(_old => ({\n            account: gotAccount,\n            ethersProvider: provider,\n            providerChainId: chainId,\n          }));\n        } else {\n          // console.log(prov.chainId)\n          setWeb3State(_old => ({\n            ..._old,\n            ethersProvider: provider,\n            providerChainId: Number(prov.chainId),\n          }));\n        }\n      }\n    } catch (error) {\n      console.log({ web3ModalError: error });\n    }\n  }, []);\n\n  const connectWeb3 = useCallback(async () => {\n    try {\n      setLoading(true);\n      console.log(\"connecting..\")\n\n      const modalProvider = await web3Modal.connect();\n      console.log(modalProvider)\n\n      await setWeb3Provider(modalProvider, true);\n\n      // Subscribe to accounts change\n      modalProvider.on('accountsChanged', accounts => {\n        setWeb3State(_old => ({\n          ..._old,\n          account: accounts[0],\n        }));\n      });\n\n      // Subscribe to chainId change\n      modalProvider.on('chainChanged', _chainId => {\n        setWeb3Provider(modalProvider);\n      });\n    } catch (error) {\n      console.log({ web3ModalError: error });\n    }\n    setLoading(false);\n  }, [setWeb3Provider]);\n\n  const disconnect = useCallback(async () => {\n    web3Modal.clearCachedProvider();\n    setWeb3State({});\n  }, []);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.autoRefreshOnNetworkChange = false;\n    }\n    if (web3Modal.cachedProvider) {\n      connectWeb3();\n    } else {\n      setLoading(false);\n    }\n  }, [connectWeb3]);\n\n  return (\n    <Web3Context.Provider\n      value={{\n        ethersProvider,\n        connectWeb3,\n        loading,\n        disconnect,\n        providerChainId,\n        account,\n        inj_provider\n      }}\n    >\n      {children}\n    </Web3Context.Provider>\n  );\n};"]},"metadata":{},"sourceType":"module"}