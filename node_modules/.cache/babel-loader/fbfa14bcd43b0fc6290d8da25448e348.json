{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Gaxios = void 0;\n\nconst extend_1 = __importDefault(require(\"extend\"));\n\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\n\nconst querystring_1 = __importDefault(require(\"querystring\"));\n\nconst is_stream_1 = __importDefault(require(\"is-stream\"));\n\nconst common_1 = require(\"./common\");\n\nconst retry_1 = require(\"./retry\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nconst fetch = hasFetch() ? window.fetch : node_fetch_1.default;\n\nfunction hasWindow() {\n  return typeof window !== 'undefined' && !!window;\n}\n\nfunction hasFetch() {\n  return hasWindow() && !!window.fetch;\n}\n\nfunction hasBuffer() {\n  return typeof Buffer !== 'undefined';\n}\n\nfunction hasHeader(options, header) {\n  return !!getHeader(options, header);\n}\n\nfunction getHeader(options, header) {\n  header = header.toLowerCase();\n\n  for (const key of Object.keys((options === null || options === void 0 ? void 0 : options.headers) || {})) {\n    if (header === key.toLowerCase()) {\n      return options.headers[key];\n    }\n  }\n\n  return undefined;\n}\n\nlet HttpsProxyAgent;\n\nfunction loadProxy() {\n  const proxy = process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy;\n\n  if (proxy) {\n    HttpsProxyAgent = require('https-proxy-agent');\n  }\n\n  return proxy;\n}\n\nloadProxy();\n\nfunction skipProxy(url) {\n  var _a;\n\n  const noProxyEnv = (_a = process.env.NO_PROXY) !== null && _a !== void 0 ? _a : process.env.no_proxy;\n\n  if (!noProxyEnv) {\n    return false;\n  }\n\n  const noProxyUrls = noProxyEnv.split(',');\n  const parsedURL = new URL(url);\n  return !!noProxyUrls.find(url => {\n    if (url.startsWith('*.') || url.startsWith('.')) {\n      url = url.replace('*', '');\n      return parsedURL.hostname.endsWith(url);\n    } else {\n      return url === parsedURL.origin || url === parsedURL.hostname;\n    }\n  });\n} // Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\n\n\nfunction getProxy(url) {\n  // If there is a match between the no_proxy env variables and the url, then do not proxy\n  if (skipProxy(url)) {\n    return undefined; // If there is not a match between the no_proxy env variables and the url, check to see if there should be a proxy\n  } else {\n    return loadProxy();\n  }\n}\n\nclass Gaxios {\n  /**\n   * The Gaxios class is responsible for making HTTP requests.\n   * @param defaults The default set of options to be used for this instance.\n   */\n  constructor(defaults) {\n    this.agentCache = new Map();\n    this.defaults = defaults || {};\n  }\n  /**\n   * Perform an HTTP request with the given options.\n   * @param opts Set of HTTP options that will be used for this HTTP request.\n   */\n\n\n  async request(opts = {}) {\n    opts = this.validateOpts(opts);\n    return this._request(opts);\n  }\n\n  async _defaultAdapter(opts) {\n    const fetchImpl = opts.fetchImplementation || fetch;\n    const res = await fetchImpl(opts.url, opts);\n    const data = await this.getResponseData(opts, res);\n    return this.translateResponse(opts, res, data);\n  }\n  /**\n   * Internal, retryable version of the `request` method.\n   * @param opts Set of HTTP options that will be used for this HTTP request.\n   */\n\n\n  async _request(opts = {}) {\n    try {\n      let translatedResponse;\n\n      if (opts.adapter) {\n        translatedResponse = await opts.adapter(opts, this._defaultAdapter.bind(this));\n      } else {\n        translatedResponse = await this._defaultAdapter(opts);\n      }\n\n      if (!opts.validateStatus(translatedResponse.status)) {\n        throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n      }\n\n      return translatedResponse;\n    } catch (e) {\n      const err = e;\n      err.config = opts;\n      const {\n        shouldRetry,\n        config\n      } = await retry_1.getRetryConfig(e);\n\n      if (shouldRetry && config) {\n        err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n        return this._request(err.config);\n      }\n\n      throw err;\n    }\n  }\n\n  async getResponseData(opts, res) {\n    switch (opts.responseType) {\n      case 'stream':\n        return res.body;\n\n      case 'json':\n        {\n          let data = await res.text();\n\n          try {\n            data = JSON.parse(data);\n          } catch (_a) {// continue\n          }\n\n          return data;\n        }\n\n      case 'arraybuffer':\n        return res.arrayBuffer();\n\n      case 'blob':\n        return res.blob();\n\n      default:\n        return res.text();\n    }\n  }\n  /**\n   * Validates the options, and merges them with defaults.\n   * @param opts The original options passed from the client.\n   */\n\n\n  validateOpts(options) {\n    const opts = extend_1.default(true, {}, this.defaults, options);\n\n    if (!opts.url) {\n      throw new Error('URL is required.');\n    } // baseUrl has been deprecated, remove in 2.0\n\n\n    const baseUrl = opts.baseUrl || opts.baseURL;\n\n    if (baseUrl) {\n      opts.url = baseUrl + opts.url;\n    }\n\n    opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n\n    if (opts.params && Object.keys(opts.params).length > 0) {\n      let additionalQueryParams = opts.paramsSerializer(opts.params);\n\n      if (additionalQueryParams.startsWith('?')) {\n        additionalQueryParams = additionalQueryParams.slice(1);\n      }\n\n      const prefix = opts.url.includes('?') ? '&' : '?';\n      opts.url = opts.url + prefix + additionalQueryParams;\n    }\n\n    if (typeof options.maxContentLength === 'number') {\n      opts.size = options.maxContentLength;\n    }\n\n    if (typeof options.maxRedirects === 'number') {\n      opts.follow = options.maxRedirects;\n    }\n\n    opts.headers = opts.headers || {};\n\n    if (opts.data) {\n      if (is_stream_1.default.readable(opts.data)) {\n        opts.body = opts.data;\n      } else if (hasBuffer() && Buffer.isBuffer(opts.data)) {\n        // Do not attempt to JSON.stringify() a Buffer:\n        opts.body = opts.data;\n\n        if (!hasHeader(opts, 'Content-Type')) {\n          opts.headers['Content-Type'] = 'application/json';\n        }\n      } else if (typeof opts.data === 'object') {\n        // If www-form-urlencoded content type has been set, but data is\n        // provided as an object, serialize the content using querystring:\n        if (getHeader(opts, 'content-type') === 'application/x-www-form-urlencoded') {\n          opts.body = opts.paramsSerializer(opts.data);\n        } else {\n          if (!hasHeader(opts, 'Content-Type')) {\n            opts.headers['Content-Type'] = 'application/json';\n          }\n\n          opts.body = JSON.stringify(opts.data);\n        }\n      } else {\n        opts.body = opts.data;\n      }\n    }\n\n    opts.validateStatus = opts.validateStatus || this.validateStatus;\n    opts.responseType = opts.responseType || 'json';\n\n    if (!opts.headers['Accept'] && opts.responseType === 'json') {\n      opts.headers['Accept'] = 'application/json';\n    }\n\n    opts.method = opts.method || 'GET';\n    const proxy = getProxy(opts.url);\n\n    if (proxy) {\n      if (this.agentCache.has(proxy)) {\n        opts.agent = this.agentCache.get(proxy);\n      } else {\n        opts.agent = new HttpsProxyAgent(proxy);\n        this.agentCache.set(proxy, opts.agent);\n      }\n    }\n\n    return opts;\n  }\n  /**\n   * By default, throw for any non-2xx status code\n   * @param status status code from the HTTP response\n   */\n\n\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n  /**\n   * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n   * @param params key value pars to encode\n   */\n\n\n  paramsSerializer(params) {\n    return querystring_1.default.stringify(params);\n  }\n\n  translateResponse(opts, res, data) {\n    // headers need to be converted from a map to an obj\n    const headers = {};\n    res.headers.forEach((value, key) => {\n      headers[key] = value;\n    });\n    return {\n      config: opts,\n      data: data,\n      headers,\n      status: res.status,\n      statusText: res.statusText,\n      // XMLHttpRequestLike\n      request: {\n        responseURL: res.url\n      }\n    };\n  }\n\n}\n\nexports.Gaxios = Gaxios;","map":{"version":3,"sources":["../../src/gaxios.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Gaxios = void 0;\nconst extend_1 = __importDefault(require(\"extend\"));\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst querystring_1 = __importDefault(require(\"querystring\"));\nconst is_stream_1 = __importDefault(require(\"is-stream\"));\nconst common_1 = require(\"./common\");\nconst retry_1 = require(\"./retry\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fetch = hasFetch() ? window.fetch : node_fetch_1.default;\nfunction hasWindow() {\n    return typeof window !== 'undefined' && !!window;\n}\nfunction hasFetch() {\n    return hasWindow() && !!window.fetch;\n}\nfunction hasBuffer() {\n    return typeof Buffer !== 'undefined';\n}\nfunction hasHeader(options, header) {\n    return !!getHeader(options, header);\n}\nfunction getHeader(options, header) {\n    header = header.toLowerCase();\n    for (const key of Object.keys((options === null || options === void 0 ? void 0 : options.headers) || {})) {\n        if (header === key.toLowerCase()) {\n            return options.headers[key];\n        }\n    }\n    return undefined;\n}\nlet HttpsProxyAgent;\nfunction loadProxy() {\n    const proxy = process.env.HTTPS_PROXY ||\n        process.env.https_proxy ||\n        process.env.HTTP_PROXY ||\n        process.env.http_proxy;\n    if (proxy) {\n        HttpsProxyAgent = require('https-proxy-agent');\n    }\n    return proxy;\n}\nloadProxy();\nfunction skipProxy(url) {\n    var _a;\n    const noProxyEnv = (_a = process.env.NO_PROXY) !== null && _a !== void 0 ? _a : process.env.no_proxy;\n    if (!noProxyEnv) {\n        return false;\n    }\n    const noProxyUrls = noProxyEnv.split(',');\n    const parsedURL = new URL(url);\n    return !!noProxyUrls.find(url => {\n        if (url.startsWith('*.') || url.startsWith('.')) {\n            url = url.replace('*', '');\n            return parsedURL.hostname.endsWith(url);\n        }\n        else {\n            return url === parsedURL.origin || url === parsedURL.hostname;\n        }\n    });\n}\n// Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\nfunction getProxy(url) {\n    // If there is a match between the no_proxy env variables and the url, then do not proxy\n    if (skipProxy(url)) {\n        return undefined;\n        // If there is not a match between the no_proxy env variables and the url, check to see if there should be a proxy\n    }\n    else {\n        return loadProxy();\n    }\n}\nclass Gaxios {\n    /**\n     * The Gaxios class is responsible for making HTTP requests.\n     * @param defaults The default set of options to be used for this instance.\n     */\n    constructor(defaults) {\n        this.agentCache = new Map();\n        this.defaults = defaults || {};\n    }\n    /**\n     * Perform an HTTP request with the given options.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n    async request(opts = {}) {\n        opts = this.validateOpts(opts);\n        return this._request(opts);\n    }\n    async _defaultAdapter(opts) {\n        const fetchImpl = opts.fetchImplementation || fetch;\n        const res = (await fetchImpl(opts.url, opts));\n        const data = await this.getResponseData(opts, res);\n        return this.translateResponse(opts, res, data);\n    }\n    /**\n     * Internal, retryable version of the `request` method.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n    async _request(opts = {}) {\n        try {\n            let translatedResponse;\n            if (opts.adapter) {\n                translatedResponse = await opts.adapter(opts, this._defaultAdapter.bind(this));\n            }\n            else {\n                translatedResponse = await this._defaultAdapter(opts);\n            }\n            if (!opts.validateStatus(translatedResponse.status)) {\n                throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n            }\n            return translatedResponse;\n        }\n        catch (e) {\n            const err = e;\n            err.config = opts;\n            const { shouldRetry, config } = await retry_1.getRetryConfig(e);\n            if (shouldRetry && config) {\n                err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n                return this._request(err.config);\n            }\n            throw err;\n        }\n    }\n    async getResponseData(opts, res) {\n        switch (opts.responseType) {\n            case 'stream':\n                return res.body;\n            case 'json': {\n                let data = await res.text();\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (_a) {\n                    // continue\n                }\n                return data;\n            }\n            case 'arraybuffer':\n                return res.arrayBuffer();\n            case 'blob':\n                return res.blob();\n            default:\n                return res.text();\n        }\n    }\n    /**\n     * Validates the options, and merges them with defaults.\n     * @param opts The original options passed from the client.\n     */\n    validateOpts(options) {\n        const opts = extend_1.default(true, {}, this.defaults, options);\n        if (!opts.url) {\n            throw new Error('URL is required.');\n        }\n        // baseUrl has been deprecated, remove in 2.0\n        const baseUrl = opts.baseUrl || opts.baseURL;\n        if (baseUrl) {\n            opts.url = baseUrl + opts.url;\n        }\n        opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n        if (opts.params && Object.keys(opts.params).length > 0) {\n            let additionalQueryParams = opts.paramsSerializer(opts.params);\n            if (additionalQueryParams.startsWith('?')) {\n                additionalQueryParams = additionalQueryParams.slice(1);\n            }\n            const prefix = opts.url.includes('?') ? '&' : '?';\n            opts.url = opts.url + prefix + additionalQueryParams;\n        }\n        if (typeof options.maxContentLength === 'number') {\n            opts.size = options.maxContentLength;\n        }\n        if (typeof options.maxRedirects === 'number') {\n            opts.follow = options.maxRedirects;\n        }\n        opts.headers = opts.headers || {};\n        if (opts.data) {\n            if (is_stream_1.default.readable(opts.data)) {\n                opts.body = opts.data;\n            }\n            else if (hasBuffer() && Buffer.isBuffer(opts.data)) {\n                // Do not attempt to JSON.stringify() a Buffer:\n                opts.body = opts.data;\n                if (!hasHeader(opts, 'Content-Type')) {\n                    opts.headers['Content-Type'] = 'application/json';\n                }\n            }\n            else if (typeof opts.data === 'object') {\n                // If www-form-urlencoded content type has been set, but data is\n                // provided as an object, serialize the content using querystring:\n                if (getHeader(opts, 'content-type') ===\n                    'application/x-www-form-urlencoded') {\n                    opts.body = opts.paramsSerializer(opts.data);\n                }\n                else {\n                    if (!hasHeader(opts, 'Content-Type')) {\n                        opts.headers['Content-Type'] = 'application/json';\n                    }\n                    opts.body = JSON.stringify(opts.data);\n                }\n            }\n            else {\n                opts.body = opts.data;\n            }\n        }\n        opts.validateStatus = opts.validateStatus || this.validateStatus;\n        opts.responseType = opts.responseType || 'json';\n        if (!opts.headers['Accept'] && opts.responseType === 'json') {\n            opts.headers['Accept'] = 'application/json';\n        }\n        opts.method = opts.method || 'GET';\n        const proxy = getProxy(opts.url);\n        if (proxy) {\n            if (this.agentCache.has(proxy)) {\n                opts.agent = this.agentCache.get(proxy);\n            }\n            else {\n                opts.agent = new HttpsProxyAgent(proxy);\n                this.agentCache.set(proxy, opts.agent);\n            }\n        }\n        return opts;\n    }\n    /**\n     * By default, throw for any non-2xx status code\n     * @param status status code from the HTTP response\n     */\n    validateStatus(status) {\n        return status >= 200 && status < 300;\n    }\n    /**\n     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n     * @param params key value pars to encode\n     */\n    paramsSerializer(params) {\n        return querystring_1.default.stringify(params);\n    }\n    translateResponse(opts, res, data) {\n        // headers need to be converted from a map to an obj\n        const headers = {};\n        res.headers.forEach((value, key) => {\n            headers[key] = value;\n        });\n        return {\n            config: opts,\n            data: data,\n            headers,\n            status: res.status,\n            statusText: res.statusText,\n            // XMLHttpRequestLike\n            request: {\n                responseURL: res.url,\n            },\n        };\n    }\n}\nexports.Gaxios = Gaxios;\n//# sourceMappingURL=gaxios.js.map"]},"metadata":{},"sourceType":"script"}