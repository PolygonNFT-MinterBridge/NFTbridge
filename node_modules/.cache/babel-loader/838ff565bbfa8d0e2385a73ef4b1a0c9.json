{"ast":null,"code":"/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tenant = void 0;\n\nvar validator = require(\"../utils/validator\");\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar auth_config_1 = require(\"./auth-config\");\n/**\n * Tenant class that defines a Firebase Auth tenant.\n */\n\n\nvar Tenant =\n/** @class */\nfunction () {\n  /**\n   * The Tenant object constructor.\n   *\n   * @param response The server side response used to initialize the Tenant object.\n   * @constructor\n   */\n  function Tenant(response) {\n    var tenantId = Tenant.getTenantIdFromResourceName(response.name);\n\n    if (!tenantId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid tenant response');\n    }\n\n    this.tenantId = tenantId;\n    this.displayName = response.displayName;\n\n    try {\n      this.emailSignInConfig = new auth_config_1.EmailSignInConfig(response);\n    } catch (e) {\n      // If allowPasswordSignup is undefined, it is disabled by default.\n      this.emailSignInConfig = new auth_config_1.EmailSignInConfig({\n        allowPasswordSignup: false\n      });\n    }\n\n    this.anonymousSignInEnabled = !!response.enableAnonymousUser;\n\n    if (typeof response.mfaConfig !== 'undefined') {\n      this.multiFactorConfig = new auth_config_1.MultiFactorAuthConfig(response.mfaConfig);\n    }\n\n    if (typeof response.testPhoneNumbers !== 'undefined') {\n      this.testPhoneNumbers = deep_copy_1.deepCopy(response.testPhoneNumbers || {});\n    }\n  }\n  /**\n   * Builds the corresponding server request for a TenantOptions object.\n   *\n   * @param {TenantOptions} tenantOptions The properties to convert to a server request.\n   * @param {boolean} createRequest Whether this is a create request.\n   * @return {object} The equivalent server request.\n   */\n\n\n  Tenant.buildServerRequest = function (tenantOptions, createRequest) {\n    var _a;\n\n    Tenant.validate(tenantOptions, createRequest);\n    var request = {};\n\n    if (typeof tenantOptions.emailSignInConfig !== 'undefined') {\n      request = auth_config_1.EmailSignInConfig.buildServerRequest(tenantOptions.emailSignInConfig);\n    }\n\n    if (typeof tenantOptions.displayName !== 'undefined') {\n      request.displayName = tenantOptions.displayName;\n    }\n\n    if (typeof tenantOptions.anonymousSignInEnabled !== 'undefined') {\n      request.enableAnonymousUser = tenantOptions.anonymousSignInEnabled;\n    }\n\n    if (typeof tenantOptions.multiFactorConfig !== 'undefined') {\n      request.mfaConfig = auth_config_1.MultiFactorAuthConfig.buildServerRequest(tenantOptions.multiFactorConfig);\n    }\n\n    if (typeof tenantOptions.testPhoneNumbers !== 'undefined') {\n      // null will clear existing test phone numbers. Translate to empty object.\n      request.testPhoneNumbers = (_a = tenantOptions.testPhoneNumbers) !== null && _a !== void 0 ? _a : {};\n    }\n\n    return request;\n  };\n  /**\n   * Returns the tenant ID corresponding to the resource name if available.\n   *\n   * @param {string} resourceName The server side resource name\n   * @return {?string} The tenant ID corresponding to the resource, null otherwise.\n   */\n\n\n  Tenant.getTenantIdFromResourceName = function (resourceName) {\n    // name is of form projects/project1/tenants/tenant1\n    var matchTenantRes = resourceName.match(/\\/tenants\\/(.*)$/);\n\n    if (!matchTenantRes || matchTenantRes.length < 2) {\n      return null;\n    }\n\n    return matchTenantRes[1];\n  };\n  /**\n   * Validates a tenant options object. Throws an error on failure.\n   *\n   * @param {any} request The tenant options object to validate.\n   * @param {boolean} createRequest Whether this is a create request.\n   */\n\n\n  Tenant.validate = function (request, createRequest) {\n    var validKeys = {\n      displayName: true,\n      emailSignInConfig: true,\n      anonymousSignInEnabled: true,\n      multiFactorConfig: true,\n      testPhoneNumbers: true\n    };\n    var label = createRequest ? 'CreateTenantRequest' : 'UpdateTenantRequest';\n\n    if (!validator.isNonNullObject(request)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \"\\\" must be a valid non-null object.\");\n    } // Check for unsupported top level attributes.\n\n\n    for (var key in request) {\n      if (!(key in validKeys)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + key + \"\\\" is not a valid \" + label + \" parameter.\");\n      }\n    } // Validate displayName type if provided.\n\n\n    if (typeof request.displayName !== 'undefined' && !validator.isNonEmptyString(request.displayName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \".displayName\\\" must be a valid non-empty string.\");\n    } // Validate emailSignInConfig type if provided.\n\n\n    if (typeof request.emailSignInConfig !== 'undefined') {\n      // This will throw an error if invalid.\n      auth_config_1.EmailSignInConfig.buildServerRequest(request.emailSignInConfig);\n    } // Validate test phone numbers if provided.\n\n\n    if (typeof request.testPhoneNumbers !== 'undefined' && request.testPhoneNumbers !== null) {\n      auth_config_1.validateTestPhoneNumbers(request.testPhoneNumbers);\n    } else if (request.testPhoneNumbers === null && createRequest) {\n      // null allowed only for update operations.\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \".testPhoneNumbers\\\" must be a non-null object.\");\n    } // Validate multiFactorConfig type if provided.\n\n\n    if (typeof request.multiFactorConfig !== 'undefined') {\n      // This will throw an error if invalid.\n      auth_config_1.MultiFactorAuthConfig.buildServerRequest(request.multiFactorConfig);\n    }\n  };\n  /** @return {object} The plain object representation of the tenant. */\n\n\n  Tenant.prototype.toJSON = function () {\n    var _a, _b;\n\n    var json = {\n      tenantId: this.tenantId,\n      displayName: this.displayName,\n      emailSignInConfig: (_a = this.emailSignInConfig) === null || _a === void 0 ? void 0 : _a.toJSON(),\n      anonymousSignInEnabled: this.anonymousSignInEnabled,\n      multiFactorConfig: (_b = this.multiFactorConfig) === null || _b === void 0 ? void 0 : _b.toJSON(),\n      testPhoneNumbers: this.testPhoneNumbers\n    };\n\n    if (typeof json.multiFactorConfig === 'undefined') {\n      delete json.multiFactorConfig;\n    }\n\n    if (typeof json.testPhoneNumbers === 'undefined') {\n      delete json.testPhoneNumbers;\n    }\n\n    return json;\n  };\n\n  return Tenant;\n}();\n\nexports.Tenant = Tenant;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/firebase-admin/lib/auth/tenant.js"],"names":["Object","defineProperty","exports","value","Tenant","validator","require","deep_copy_1","error_1","auth_config_1","response","tenantId","getTenantIdFromResourceName","name","FirebaseAuthError","AuthClientErrorCode","INTERNAL_ERROR","displayName","emailSignInConfig","EmailSignInConfig","e","allowPasswordSignup","anonymousSignInEnabled","enableAnonymousUser","mfaConfig","multiFactorConfig","MultiFactorAuthConfig","testPhoneNumbers","deepCopy","buildServerRequest","tenantOptions","createRequest","_a","validate","request","resourceName","matchTenantRes","match","length","validKeys","label","isNonNullObject","INVALID_ARGUMENT","key","isNonEmptyString","validateTestPhoneNumbers","prototype","toJSON","_b","json"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tenant = void 0;\nvar validator = require(\"../utils/validator\");\nvar deep_copy_1 = require(\"../utils/deep-copy\");\nvar error_1 = require(\"../utils/error\");\nvar auth_config_1 = require(\"./auth-config\");\n/**\n * Tenant class that defines a Firebase Auth tenant.\n */\nvar Tenant = /** @class */ (function () {\n    /**\n     * The Tenant object constructor.\n     *\n     * @param response The server side response used to initialize the Tenant object.\n     * @constructor\n     */\n    function Tenant(response) {\n        var tenantId = Tenant.getTenantIdFromResourceName(response.name);\n        if (!tenantId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid tenant response');\n        }\n        this.tenantId = tenantId;\n        this.displayName = response.displayName;\n        try {\n            this.emailSignInConfig = new auth_config_1.EmailSignInConfig(response);\n        }\n        catch (e) {\n            // If allowPasswordSignup is undefined, it is disabled by default.\n            this.emailSignInConfig = new auth_config_1.EmailSignInConfig({\n                allowPasswordSignup: false,\n            });\n        }\n        this.anonymousSignInEnabled = !!response.enableAnonymousUser;\n        if (typeof response.mfaConfig !== 'undefined') {\n            this.multiFactorConfig = new auth_config_1.MultiFactorAuthConfig(response.mfaConfig);\n        }\n        if (typeof response.testPhoneNumbers !== 'undefined') {\n            this.testPhoneNumbers = deep_copy_1.deepCopy(response.testPhoneNumbers || {});\n        }\n    }\n    /**\n     * Builds the corresponding server request for a TenantOptions object.\n     *\n     * @param {TenantOptions} tenantOptions The properties to convert to a server request.\n     * @param {boolean} createRequest Whether this is a create request.\n     * @return {object} The equivalent server request.\n     */\n    Tenant.buildServerRequest = function (tenantOptions, createRequest) {\n        var _a;\n        Tenant.validate(tenantOptions, createRequest);\n        var request = {};\n        if (typeof tenantOptions.emailSignInConfig !== 'undefined') {\n            request = auth_config_1.EmailSignInConfig.buildServerRequest(tenantOptions.emailSignInConfig);\n        }\n        if (typeof tenantOptions.displayName !== 'undefined') {\n            request.displayName = tenantOptions.displayName;\n        }\n        if (typeof tenantOptions.anonymousSignInEnabled !== 'undefined') {\n            request.enableAnonymousUser = tenantOptions.anonymousSignInEnabled;\n        }\n        if (typeof tenantOptions.multiFactorConfig !== 'undefined') {\n            request.mfaConfig = auth_config_1.MultiFactorAuthConfig.buildServerRequest(tenantOptions.multiFactorConfig);\n        }\n        if (typeof tenantOptions.testPhoneNumbers !== 'undefined') {\n            // null will clear existing test phone numbers. Translate to empty object.\n            request.testPhoneNumbers = (_a = tenantOptions.testPhoneNumbers) !== null && _a !== void 0 ? _a : {};\n        }\n        return request;\n    };\n    /**\n     * Returns the tenant ID corresponding to the resource name if available.\n     *\n     * @param {string} resourceName The server side resource name\n     * @return {?string} The tenant ID corresponding to the resource, null otherwise.\n     */\n    Tenant.getTenantIdFromResourceName = function (resourceName) {\n        // name is of form projects/project1/tenants/tenant1\n        var matchTenantRes = resourceName.match(/\\/tenants\\/(.*)$/);\n        if (!matchTenantRes || matchTenantRes.length < 2) {\n            return null;\n        }\n        return matchTenantRes[1];\n    };\n    /**\n     * Validates a tenant options object. Throws an error on failure.\n     *\n     * @param {any} request The tenant options object to validate.\n     * @param {boolean} createRequest Whether this is a create request.\n     */\n    Tenant.validate = function (request, createRequest) {\n        var validKeys = {\n            displayName: true,\n            emailSignInConfig: true,\n            anonymousSignInEnabled: true,\n            multiFactorConfig: true,\n            testPhoneNumbers: true,\n        };\n        var label = createRequest ? 'CreateTenantRequest' : 'UpdateTenantRequest';\n        if (!validator.isNonNullObject(request)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \"\\\" must be a valid non-null object.\");\n        }\n        // Check for unsupported top level attributes.\n        for (var key in request) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + key + \"\\\" is not a valid \" + label + \" parameter.\");\n            }\n        }\n        // Validate displayName type if provided.\n        if (typeof request.displayName !== 'undefined' &&\n            !validator.isNonEmptyString(request.displayName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \".displayName\\\" must be a valid non-empty string.\");\n        }\n        // Validate emailSignInConfig type if provided.\n        if (typeof request.emailSignInConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.EmailSignInConfig.buildServerRequest(request.emailSignInConfig);\n        }\n        // Validate test phone numbers if provided.\n        if (typeof request.testPhoneNumbers !== 'undefined' &&\n            request.testPhoneNumbers !== null) {\n            auth_config_1.validateTestPhoneNumbers(request.testPhoneNumbers);\n        }\n        else if (request.testPhoneNumbers === null && createRequest) {\n            // null allowed only for update operations.\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \".testPhoneNumbers\\\" must be a non-null object.\");\n        }\n        // Validate multiFactorConfig type if provided.\n        if (typeof request.multiFactorConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.MultiFactorAuthConfig.buildServerRequest(request.multiFactorConfig);\n        }\n    };\n    /** @return {object} The plain object representation of the tenant. */\n    Tenant.prototype.toJSON = function () {\n        var _a, _b;\n        var json = {\n            tenantId: this.tenantId,\n            displayName: this.displayName,\n            emailSignInConfig: (_a = this.emailSignInConfig) === null || _a === void 0 ? void 0 : _a.toJSON(),\n            anonymousSignInEnabled: this.anonymousSignInEnabled,\n            multiFactorConfig: (_b = this.multiFactorConfig) === null || _b === void 0 ? void 0 : _b.toJSON(),\n            testPhoneNumbers: this.testPhoneNumbers,\n        };\n        if (typeof json.multiFactorConfig === 'undefined') {\n            delete json.multiFactorConfig;\n        }\n        if (typeof json.testPhoneNumbers === 'undefined') {\n            delete json.testPhoneNumbers;\n        }\n        return json;\n    };\n    return Tenant;\n}());\nexports.Tenant = Tenant;\n"]},"metadata":{},"sourceType":"script"}