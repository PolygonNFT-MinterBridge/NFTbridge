{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst assert = require(\"assert\");\n\nconst backoff_1 = require(\"./backoff\");\n\nconst rate_limiter_1 = require(\"./rate-limiter\");\n\nconst timestamp_1 = require(\"./timestamp\");\n\nconst util_1 = require(\"./util\");\n\nconst write_batch_1 = require(\"./write-batch\");\n\nconst validate_1 = require(\"./validate\");\n\nconst logger_1 = require(\"./logger\");\n\nconst google_gax_1 = require(\"google-gax\");\n/*!\n * The maximum number of writes that can be in a single batch.\n */\n\n\nconst MAX_BATCH_SIZE = 20;\n/*!\n * The starting maximum number of operations per second as allowed by the\n * 500/50/5 rule.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\n\nexports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = 500;\n/*!\n * The maximum number of operations per second as allowed by the 500/50/5 rule.\n * By default the rate limiter will not exceed this value.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\n\nexports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = 10000;\n/*!\n * The default jitter to apply to the exponential backoff used in retries. For\n * example, a factor of 0.3 means a 30% jitter is applied.\n */\n\nexports.DEFAULT_JITTER_FACTOR = 0.3;\n/*!\n * The rate by which to increase the capacity as specified by the 500/50/5 rule.\n */\n\nconst RATE_LIMITER_MULTIPLIER = 1.5;\n/*!\n * How often the operations per second capacity should increase in milliseconds\n * as specified by the 500/50/5 rule.\n */\n\nconst RATE_LIMITER_MULTIPLIER_MILLIS = 5 * 60 * 1000;\n/*!\n * The default maximum number of pending operations that can be enqueued onto a\n * BulkWriter instance. An operation is considered pending if BulkWriter has\n * sent it via RPC and is awaiting the result. BulkWriter buffers additional\n * writes after this many pending operations in order to avoiding going OOM.\n */\n\nconst DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT = 500;\n/**\n * Represents a single write for BulkWriter, encapsulating operation dispatch\n * and error handling.\n * @private\n */\n\nclass BulkWriterOperation {\n  /**\n   * @param ref The document reference being written to.\n   * @param type The type of operation that created this write.\n   * @param sendFn A callback to invoke when the operation should be sent.\n   * @param errorFn The user provided global error callback.\n   * @param successFn The user provided global success callback.\n   */\n  constructor(ref, type, sendFn, errorFn, successFn) {\n    this.ref = ref;\n    this.type = type;\n    this.sendFn = sendFn;\n    this.errorFn = errorFn;\n    this.successFn = successFn;\n    this.deferred = new util_1.Deferred();\n    this.failedAttempts = 0;\n    this._backoffDuration = 0;\n  }\n\n  get promise() {\n    return this.deferred.promise;\n  }\n\n  get backoffDuration() {\n    return this._backoffDuration;\n  }\n\n  onError(error) {\n    ++this.failedAttempts;\n\n    try {\n      const bulkWriterError = new BulkWriterError(error.code, error.message, this.ref, this.type, this.failedAttempts);\n      const shouldRetry = this.errorFn(bulkWriterError);\n      logger_1.logger('BulkWriter.errorFn', null, 'Ran error callback on error code:', error.code, ', shouldRetry:', shouldRetry, ' for document:', this.ref.path);\n\n      if (shouldRetry) {\n        this.lastStatus = error.code;\n        this.updateBackoffDuration();\n        this.sendFn(this);\n      } else {\n        this.deferred.reject(bulkWriterError);\n      }\n    } catch (userCallbackError) {\n      this.deferred.reject(userCallbackError);\n    }\n  }\n\n  updateBackoffDuration() {\n    if (this.lastStatus === google_gax_1.Status.RESOURCE_EXHAUSTED) {\n      this._backoffDuration = backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS;\n    } else if (this._backoffDuration === 0) {\n      this._backoffDuration = backoff_1.DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n    } else {\n      this._backoffDuration *= backoff_1.DEFAULT_BACKOFF_FACTOR;\n    }\n  }\n\n  onSuccess(result) {\n    try {\n      this.successFn(this.ref, result);\n      this.deferred.resolve(result);\n    } catch (userCallbackError) {\n      this.deferred.reject(userCallbackError);\n    }\n  }\n\n}\n/**\n * Used to represent a batch on the BatchQueue.\n *\n * @private\n */\n\n\nclass BulkCommitBatch extends write_batch_1.WriteBatch {\n  constructor() {\n    super(...arguments); // The set of document reference paths present in the WriteBatch.\n\n    this.docPaths = new Set(); // An array of pending write operations. Only contains writes that have not\n    // been resolved.\n\n    this.pendingOps = [];\n  }\n\n  has(documentRef) {\n    return this.docPaths.has(documentRef.path);\n  }\n\n  async bulkCommit(options = {}) {\n    var _a;\n\n    const tag = (_a = options === null || options === void 0 ? void 0 : options.requestTag) !== null && _a !== void 0 ? _a : util_1.requestTag(); // Capture the error stack to preserve stack tracing across async calls.\n\n    const stack = Error().stack;\n    let response;\n\n    try {\n      logger_1.logger('BulkCommitBatch.bulkCommit', tag, `Sending next batch with ${this._opCount} writes`);\n      const retryCodes = util_1.getRetryCodes('batchWrite');\n      response = await this._commit({\n        retryCodes,\n        methodName: 'batchWrite',\n        requestTag: tag\n      });\n    } catch (err) {\n      // Map the failure to each individual write's result.\n      const ops = Array.from({\n        length: this.pendingOps.length\n      });\n      response = {\n        writeResults: ops.map(() => {\n          return {};\n        }),\n        status: ops.map(() => err)\n      };\n    }\n\n    for (let i = 0; i < (response.writeResults || []).length; ++i) {\n      // Since delete operations currently do not have write times, use a\n      // sentinel Timestamp value.\n      // TODO(b/158502664): Use actual delete timestamp.\n      const DELETE_TIMESTAMP_SENTINEL = timestamp_1.Timestamp.fromMillis(0);\n      const status = (response.status || [])[i];\n\n      if (status.code === google_gax_1.Status.OK) {\n        const updateTime = timestamp_1.Timestamp.fromProto(response.writeResults[i].updateTime || DELETE_TIMESTAMP_SENTINEL);\n        this.pendingOps[i].onSuccess(new write_batch_1.WriteResult(updateTime));\n      } else {\n        const error = new google_gax_1.GoogleError(status.message || undefined);\n        error.code = status.code;\n        this.pendingOps[i].onError(util_1.wrapError(error, stack));\n      }\n    }\n  }\n  /**\n   * Helper to update data structures associated with the operation and returns\n   * the result.\n   */\n\n\n  processLastOperation(op) {\n    assert(!this.docPaths.has(op.ref.path), 'Batch should not contain writes to the same document');\n    this.docPaths.add(op.ref.path);\n    this.pendingOps.push(op);\n  }\n\n}\n/**\n * The error thrown when a BulkWriter operation fails.\n *\n * @class BulkWriterError\n */\n\n\nclass BulkWriterError extends Error {\n  /** @hideconstructor */\n  constructor(\n  /** The status code of the error. */\n  code,\n  /** The error message of the error. */\n  message,\n  /** The document reference the operation was performed on. */\n  documentRef,\n  /** The type of operation performed. */\n  operationType,\n  /** How many times this operation has been attempted unsuccessfully. */\n  failedAttempts) {\n    super(message);\n    this.code = code;\n    this.message = message;\n    this.documentRef = documentRef;\n    this.operationType = operationType;\n    this.failedAttempts = failedAttempts;\n  }\n\n}\n\nexports.BulkWriterError = BulkWriterError;\n/**\n * A Firestore BulkWriter that can be used to perform a large number of writes\n * in parallel.\n *\n * @class BulkWriter\n */\n\nclass BulkWriter {\n  /** @hideconstructor */\n  constructor(firestore, options) {\n    var _a, _b;\n\n    this.firestore = firestore;\n    /**\n     * The maximum number of writes that can be in a single batch.\n     * Visible for testing.\n     * @private\n     */\n\n    this._maxBatchSize = MAX_BATCH_SIZE;\n    /**\n     * The batch that is currently used to schedule operations. Once this batch\n     * reaches maximum capacity, a new batch is created.\n     * @private\n     */\n\n    this._bulkCommitBatch = new BulkCommitBatch(this.firestore);\n    /**\n     * A pointer to the tail of all active BulkWriter operations. This pointer\n     * is advanced every time a new write is enqueued.\n     * @private\n     */\n\n    this._lastOp = Promise.resolve();\n    /**\n     * Whether this BulkWriter instance has started to close. Afterwards, no\n     * new operations can be enqueued, except for retry operations scheduled by\n     * the error handler.\n     * @private\n     */\n\n    this._closing = false;\n    /**\n     * The number of pending operations enqueued on this BulkWriter instance.\n     * An operation is considered pending if BulkWriter has sent it via RPC and\n     * is awaiting the result.\n     * @private\n     */\n\n    this._pendingOpsCount = 0;\n    /**\n     * An array containing buffered BulkWriter operations after the maximum number\n     * of pending operations has been enqueued.\n     * @private\n     */\n\n    this._bufferedOperations = [];\n    /**\n     * The maximum number of pending operations that can be enqueued onto this\n     * BulkWriter instance. Once the this number of writes have been enqueued,\n     * subsequent writes are buffered.\n     * @private\n     */\n\n    this._maxPendingOpCount = DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT;\n    /**\n     * The user-provided callback to be run every time a BulkWriter operation\n     * successfully completes.\n     * @private\n     */\n\n    this._successFn = () => {};\n    /**\n     * The user-provided callback to be run every time a BulkWriter operation\n     * fails.\n     * @private\n     */\n\n\n    this._errorFn = error => {\n      const isRetryableDeleteError = error.operationType === 'delete' && error.code === google_gax_1.Status.INTERNAL;\n      const retryCodes = util_1.getRetryCodes('batchWrite');\n      return (retryCodes.includes(error.code) || isRetryableDeleteError) && error.failedAttempts < backoff_1.MAX_RETRY_ATTEMPTS;\n    };\n\n    this.firestore._incrementBulkWritersCount();\n\n    validateBulkWriterOptions(options);\n\n    if ((options === null || options === void 0 ? void 0 : options.throttling) === false) {\n      this._rateLimiter = new rate_limiter_1.RateLimiter(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n    } else {\n      let startingRate = exports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT;\n      let maxRate = exports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT;\n\n      if (typeof (options === null || options === void 0 ? void 0 : options.throttling) !== 'boolean') {\n        if (((_a = options === null || options === void 0 ? void 0 : options.throttling) === null || _a === void 0 ? void 0 : _a.maxOpsPerSecond) !== undefined) {\n          maxRate = options.throttling.maxOpsPerSecond;\n        }\n\n        if (((_b = options === null || options === void 0 ? void 0 : options.throttling) === null || _b === void 0 ? void 0 : _b.initialOpsPerSecond) !== undefined) {\n          startingRate = options.throttling.initialOpsPerSecond;\n        } // The initial validation step ensures that the maxOpsPerSecond is\n        // greater than initialOpsPerSecond. If this inequality is true, that\n        // means initialOpsPerSecond was not set and maxOpsPerSecond is less\n        // than the default starting rate.\n\n\n        if (maxRate < startingRate) {\n          startingRate = maxRate;\n        } // Ensure that the batch size is not larger than the number of allowed\n        // operations per second.\n\n\n        if (startingRate < this._maxBatchSize) {\n          this._maxBatchSize = startingRate;\n        }\n      }\n\n      this._rateLimiter = new rate_limiter_1.RateLimiter(startingRate, RATE_LIMITER_MULTIPLIER, RATE_LIMITER_MULTIPLIER_MILLIS, maxRate);\n    }\n  } // Visible for testing.\n\n\n  _getBufferedOperationsCount() {\n    return this._bufferedOperations.length;\n  } // Visible for testing.\n\n\n  _setMaxPendingOpCount(newMax) {\n    this._maxPendingOpCount = newMax;\n  }\n  /**\n   * Create a document with the provided data. This single operation will fail\n   * if a document exists at its location.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * created.\n   * @param {T} data The object to serialize as the document.\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\n   * the write. If the write fails, the promise is rejected with a\n   * [BulkWriterError]{@link BulkWriterError}.\n   *\n   * @example\n   * let bulkWriter = firestore.bulkWriter();\n   * let documentRef = firestore.collection('col').doc();\n   *\n   * bulkWriter\n   *  .create(documentRef, {foo: 'bar'})\n   *  .then(result => {\n   *    console.log('Successfully executed write at: ', result);\n   *  })\n   *  .catch(err => {\n   *    console.log('Write failed with: ', err);\n   *  });\n   * });\n   */\n\n\n  create(documentRef, data) {\n    this._verifyNotClosed();\n\n    const op = this._enqueue(documentRef, 'create', bulkCommitBatch => bulkCommitBatch.create(documentRef, data));\n\n    util_1.silencePromise(op);\n    return op;\n  }\n  /**\n   * Delete a document from the database.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * deleted.\n   * @param {Precondition=} precondition A precondition to enforce for this\n   * delete.\n   * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n   * document was last updated at lastUpdateTime. Fails the batch if the\n   * document doesn't exist or was last updated at a different time.\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\n   * the delete. If the delete fails, the promise is rejected with a\n   * [BulkWriterError]{@link BulkWriterError}.\n   *\n   * @example\n   * let bulkWriter = firestore.bulkWriter();\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * bulkWriter\n   *  .delete(documentRef)\n   *  .then(result => {\n   *    console.log('Successfully deleted document');\n   *  })\n   *  .catch(err => {\n   *    console.log('Delete failed with: ', err);\n   *  });\n   * });\n   */\n\n\n  delete(documentRef, precondition) {\n    this._verifyNotClosed();\n\n    const op = this._enqueue(documentRef, 'delete', bulkCommitBatch => bulkCommitBatch.delete(documentRef, precondition));\n\n    util_1.silencePromise(op);\n    return op;\n  }\n  /**\n   * Write to the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. If the document does not\n   * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions}.,\n   * the provided data can be merged into the existing document.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * set.\n   * @param {T} data The object to serialize as the document.\n   * @param {SetOptions=} options An object to configure the set behavior.\n   * @param {boolean=} options.merge - If true, set() merges the values\n   * specified in its data argument. Fields omitted from this set() call remain\n   * untouched.\n   * @param {Array.<string|FieldPath>=} options.mergeFields - If provided, set()\n   * only replaces the specified field paths. Any field path that is not\n   * specified is ignored and remains untouched.\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\n   * the write. If the write fails, the promise is rejected with a\n   * [BulkWriterError]{@link BulkWriterError}.\n   *\n   *\n   * @example\n   * let bulkWriter = firestore.bulkWriter();\n   * let documentRef = firestore.collection('col').doc();\n   *\n   * bulkWriter\n   *  .set(documentRef, {foo: 'bar'})\n   *  .then(result => {\n   *    console.log('Successfully executed write at: ', result);\n   *  })\n   *  .catch(err => {\n   *    console.log('Write failed with: ', err);\n   *  });\n   * });\n   */\n\n\n  set(documentRef, data, options) {\n    this._verifyNotClosed();\n\n    const op = this._enqueue(documentRef, 'set', bulkCommitBatch => bulkCommitBatch.set(documentRef, data, options));\n\n    util_1.silencePromise(op);\n    return op;\n  }\n  /**\n   * Update fields of the document referred to by the provided\n   * [DocumentReference]{@link DocumentReference}. If the document doesn't yet\n   * exist, the update fails and the entire batch will be rejected.\n   *\n   * The update() method accepts either an object with field paths encoded as\n   * keys and field values encoded as values, or a variable number of arguments\n   * that alternate between field paths and field values. Nested fields can be\n   * updated by providing dot-separated field path strings or by providing\n   * FieldPath objects.\n   *\n   *\n   * A Precondition restricting this update can be specified as the last\n   * argument.\n   *\n   * @param {DocumentReference} documentRef A reference to the document to be\n   * updated.\n   * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n   * fields and values with which to update the document or the path of the\n   * first field to update.\n   * @param {...(Precondition|*|string|FieldPath)} preconditionOrValues - An\n   * alternating list of field paths and values to update or a Precondition to\n   * restrict this update\n   * @returns {Promise<WriteResult>} A promise that resolves with the result of\n   * the write. If the write fails, the promise is rejected with a\n   * [BulkWriterError]{@link BulkWriterError}.\n   *\n   * @example\n   * let bulkWriter = firestore.bulkWriter();\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * bulkWriter\n   *  .update(documentRef, {foo: 'bar'})\n   *  .then(result => {\n   *    console.log('Successfully executed write at: ', result);\n   *  })\n   *  .catch(err => {\n   *    console.log('Write failed with: ', err);\n   *  });\n   * });\n   */\n\n\n  update(documentRef, dataOrField, ...preconditionOrValues) {\n    this._verifyNotClosed();\n\n    const op = this._enqueue(documentRef, 'update', bulkCommitBatch => bulkCommitBatch.update(documentRef, dataOrField, ...preconditionOrValues));\n\n    util_1.silencePromise(op);\n    return op;\n  }\n  /**\n   * Attaches a listener that is run every time a BulkWriter operation\n   * successfully completes.\n   *\n   * @param callback A callback to be called every time a BulkWriter operation\n   * successfully completes.\n   * @example\n   * let bulkWriter = firestore.bulkWriter();\n   *\n   * bulkWriter\n   *   .onWriteResult((documentRef, result) => {\n   *     console.log(\n   *       'Successfully executed write on document: ',\n   *       documentRef,\n   *       ' at: ',\n   *       result\n   *     );\n   *   });\n   */\n\n\n  onWriteResult(callback) {\n    this._successFn = callback;\n  }\n  /**\n   * Attaches an error handler listener that is run every time a BulkWriter\n   * operation fails.\n   *\n   * BulkWriter has a default error handler that retries UNAVAILABLE and\n   * ABORTED errors up to a maximum of 10 failed attempts. When an error\n   * handler is specified, the default error handler will be overwritten.\n   *\n   * @param shouldRetryCallback A callback to be called every time a BulkWriter\n   * operation fails. Returning `true` will retry the operation. Returning\n   * `false` will stop the retry loop.\n   * @example\n   * let bulkWriter = firestore.bulkWriter();\n   *\n   * bulkWriter\n   *   .onWriteError((error) => {\n   *     if (\n   *       error.code === GrpcStatus.UNAVAILABLE &&\n   *       error.failedAttempts < MAX_RETRY_ATTEMPTS\n   *     ) {\n   *       return true;\n   *     } else {\n   *       console.log('Failed write at document: ', error.documentRef);\n   *       return false;\n   *     }\n   *   });\n   */\n\n\n  onWriteError(shouldRetryCallback) {\n    this._errorFn = shouldRetryCallback;\n  }\n  /**\n   * Commits all writes that have been enqueued up to this point in parallel.\n   *\n   * Returns a Promise that resolves when all currently queued operations have\n   * been committed. The Promise will never be rejected since the results for\n   * each individual operation are conveyed via their individual Promises.\n   *\n   * The Promise resolves immediately if there are no pending writes. Otherwise,\n   * the Promise waits for all previously issued writes, but it does not wait\n   * for writes that were added after the method is called. If you want to wait\n   * for additional writes, call `flush()` again.\n   *\n   * @return {Promise<void>} A promise that resolves when all enqueued writes\n   * up to this point have been committed.\n   *\n   * @example\n   * let bulkWriter = firestore.bulkWriter();\n   *\n   * bulkWriter.create(documentRef, {foo: 'bar'});\n   * bulkWriter.update(documentRef2, {foo: 'bar'});\n   * bulkWriter.delete(documentRef3);\n   * await flush().then(() => {\n   *   console.log('Executed all writes');\n   * });\n   */\n\n\n  flush() {\n    this._verifyNotClosed();\n\n    this._scheduleCurrentBatch(\n    /* flush= */\n    true);\n\n    return this._lastOp;\n  }\n  /**\n   * Commits all enqueued writes and marks the BulkWriter instance as closed.\n   *\n   * After calling `close()`, calling any method will throw an error. Any\n   * retries scheduled as part of an `onWriteError()` handler will be run\n   * before the `close()` promise resolves.\n   *\n   * Returns a Promise that resolves when there are no more pending writes. The\n   * Promise will never be rejected. Calling this method will send all requests.\n   * The promise resolves immediately if there are no pending writes.\n   *\n   * @return {Promise<void>} A promise that resolves when all enqueued writes\n   * up to this point have been committed.\n   *\n   * @example\n   * let bulkWriter = firestore.bulkWriter();\n   *\n   * bulkWriter.create(documentRef, {foo: 'bar'});\n   * bulkWriter.update(documentRef2, {foo: 'bar'});\n   * bulkWriter.delete(documentRef3);\n   * await close().then(() => {\n   *   console.log('Executed all writes');\n   * });\n   */\n\n\n  close() {\n    this._verifyNotClosed();\n\n    this.firestore._decrementBulkWritersCount();\n\n    const flushPromise = this.flush();\n    this._closing = true;\n    return flushPromise;\n  }\n  /**\n   * Throws an error if the BulkWriter instance has been closed.\n   * @private\n   */\n\n\n  _verifyNotClosed() {\n    if (this._closing) {\n      throw new Error('BulkWriter has already been closed.');\n    }\n  }\n  /**\n   * Sends the current batch and resets `this._bulkCommitBatch`.\n   *\n   * @param flush If provided, keeps re-sending operations until no more\n   * operations are enqueued. This allows retries to resolve as part of a\n   * `flush()` or `close()` call.\n   * @private\n   */\n\n\n  _scheduleCurrentBatch(flush = false) {\n    if (this._bulkCommitBatch._opCount === 0) return;\n    const pendingBatch = this._bulkCommitBatch;\n    this._bulkCommitBatch = new BulkCommitBatch(this.firestore); // Use the write with the longest backoff duration when determining backoff.\n\n    const highestBackoffDuration = pendingBatch.pendingOps.reduce((prev, cur) => prev.backoffDuration > cur.backoffDuration ? prev : cur).backoffDuration;\n\n    const backoffMsWithJitter = BulkWriter._applyJitter(highestBackoffDuration);\n\n    const delayedExecution = new util_1.Deferred();\n\n    if (backoffMsWithJitter > 0) {\n      backoff_1.delayExecution(() => delayedExecution.resolve(), backoffMsWithJitter);\n    } else {\n      delayedExecution.resolve();\n    }\n\n    delayedExecution.promise.then(() => this._sendBatch(pendingBatch, flush));\n  }\n  /**\n   * Sends the provided batch once the rate limiter does not require any delay.\n   */\n\n\n  async _sendBatch(batch, flush = false) {\n    const tag = util_1.requestTag(); // Send the batch if it is does not require any delay, or schedule another\n    // attempt after the appropriate timeout.\n\n    const underRateLimit = this._rateLimiter.tryMakeRequest(batch._opCount);\n\n    if (underRateLimit) {\n      await batch.bulkCommit({\n        requestTag: tag\n      });\n      if (flush) this._scheduleCurrentBatch(flush);\n    } else {\n      const delayMs = this._rateLimiter.getNextRequestDelayMs(batch._opCount);\n\n      logger_1.logger('BulkWriter._sendBatch', tag, `Backing off for ${delayMs} seconds`);\n      backoff_1.delayExecution(() => this._sendBatch(batch, flush), delayMs);\n    }\n  }\n  /**\n   * Adds a 30% jitter to the provided backoff.\n   *\n   * @private\n   */\n\n\n  static _applyJitter(backoffMs) {\n    if (backoffMs === 0) return 0; // Random value in [-0.3, 0.3].\n\n    const jitter = exports.DEFAULT_JITTER_FACTOR * (Math.random() * 2 - 1);\n    return Math.min(backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS, backoffMs + jitter * backoffMs);\n  }\n  /**\n   * Schedules and runs the provided operation on the next available batch.\n   * @private\n   */\n\n\n  _enqueue(ref, type, enqueueOnBatchCallback) {\n    const bulkWriterOp = new BulkWriterOperation(ref, type, this._sendFn.bind(this, enqueueOnBatchCallback), this._errorFn.bind(this), this._successFn.bind(this)); // Advance the `_lastOp` pointer. This ensures that `_lastOp` only resolves\n    // when both the previous and the current write resolves.\n\n    this._lastOp = this._lastOp.then(() => util_1.silencePromise(bulkWriterOp.promise)); // Schedule the operation if the BulkWriter has fewer than the maximum\n    // number of allowed pending operations, or add the operation to the\n    // buffer.\n\n    if (this._pendingOpsCount < this._maxPendingOpCount) {\n      this._pendingOpsCount++;\n\n      this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n    } else {\n      this._bufferedOperations.push(() => {\n        this._pendingOpsCount++;\n\n        this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n      });\n    } // Chain the BulkWriter operation promise with the buffer processing logic\n    // in order to ensure that it runs and that subsequent operations are\n    // enqueued before the next batch is scheduled in `_sendBatch()`.\n\n\n    return bulkWriterOp.promise.then(res => {\n      this._pendingOpsCount--;\n\n      this._processBufferedOps();\n\n      return res;\n    }).catch(err => {\n      this._pendingOpsCount--;\n\n      this._processBufferedOps();\n\n      throw err;\n    });\n  }\n  /**\n   * Manages the pending operation counter and schedules the next BulkWriter\n   * operation if we're under the maximum limit.\n   * @private\n   */\n\n\n  _processBufferedOps() {\n    if (this._pendingOpsCount < this._maxPendingOpCount && this._bufferedOperations.length > 0) {\n      const nextOp = this._bufferedOperations.shift();\n\n      nextOp();\n    }\n  }\n  /**\n   * Schedules the provided operations on current BulkCommitBatch.\n   * Sends the BulkCommitBatch if it reaches maximum capacity.\n   *\n   * @private\n   */\n\n\n  _sendFn(enqueueOnBatchCallback, op) {\n    if (this._bulkCommitBatch.has(op.ref)) {\n      // Create a new batch since the backend doesn't support batches with two\n      // writes to the same document.\n      this._scheduleCurrentBatch();\n    }\n\n    enqueueOnBatchCallback(this._bulkCommitBatch);\n\n    this._bulkCommitBatch.processLastOperation(op);\n\n    if (this._bulkCommitBatch._opCount === this._maxBatchSize) {\n      this._scheduleCurrentBatch();\n    }\n  }\n\n}\n\nexports.BulkWriter = BulkWriter;\n/**\n * Validates the use of 'value' as BulkWriterOptions.\n *\n * @private\n * @param value The BulkWriterOptions object to validate.\n * @throws if the input is not a valid BulkWriterOptions object.\n */\n\nfunction validateBulkWriterOptions(value) {\n  if (validate_1.validateOptional(value, {\n    optional: true\n  })) {\n    return;\n  }\n\n  const argName = 'options';\n\n  if (!util_1.isObject(value)) {\n    throw new Error(`${validate_1.invalidArgumentMessage(argName, 'bulkWriter() options argument')} Input is not an object.`);\n  }\n\n  const options = value;\n\n  if (options.throttling === undefined || typeof options.throttling === 'boolean') {\n    return;\n  }\n\n  if (options.throttling.initialOpsPerSecond !== undefined) {\n    validate_1.validateInteger('initialOpsPerSecond', options.throttling.initialOpsPerSecond, {\n      minValue: 1\n    });\n  }\n\n  if (options.throttling.maxOpsPerSecond !== undefined) {\n    validate_1.validateInteger('maxOpsPerSecond', options.throttling.maxOpsPerSecond, {\n      minValue: 1\n    });\n\n    if (options.throttling.initialOpsPerSecond !== undefined && options.throttling.initialOpsPerSecond > options.throttling.maxOpsPerSecond) {\n      throw new Error(`${validate_1.invalidArgumentMessage(argName, 'bulkWriter() options argument')} \"maxOpsPerSecond\" cannot be less than \"initialOpsPerSecond\".`);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/firestore/build/src/bulk-writer.js"],"names":["Object","defineProperty","exports","value","assert","require","backoff_1","rate_limiter_1","timestamp_1","util_1","write_batch_1","validate_1","logger_1","google_gax_1","MAX_BATCH_SIZE","DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT","DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT","DEFAULT_JITTER_FACTOR","RATE_LIMITER_MULTIPLIER","RATE_LIMITER_MULTIPLIER_MILLIS","DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT","BulkWriterOperation","constructor","ref","type","sendFn","errorFn","successFn","deferred","Deferred","failedAttempts","_backoffDuration","promise","backoffDuration","onError","error","bulkWriterError","BulkWriterError","code","message","shouldRetry","logger","path","lastStatus","updateBackoffDuration","reject","userCallbackError","Status","RESOURCE_EXHAUSTED","DEFAULT_BACKOFF_MAX_DELAY_MS","DEFAULT_BACKOFF_INITIAL_DELAY_MS","DEFAULT_BACKOFF_FACTOR","onSuccess","result","resolve","BulkCommitBatch","WriteBatch","arguments","docPaths","Set","pendingOps","has","documentRef","bulkCommit","options","_a","tag","requestTag","stack","Error","response","_opCount","retryCodes","getRetryCodes","_commit","methodName","err","ops","Array","from","length","writeResults","map","status","i","DELETE_TIMESTAMP_SENTINEL","Timestamp","fromMillis","OK","updateTime","fromProto","WriteResult","GoogleError","undefined","wrapError","processLastOperation","op","add","push","operationType","BulkWriter","firestore","_b","_maxBatchSize","_bulkCommitBatch","_lastOp","Promise","_closing","_pendingOpsCount","_bufferedOperations","_maxPendingOpCount","_successFn","_errorFn","isRetryableDeleteError","INTERNAL","includes","MAX_RETRY_ATTEMPTS","_incrementBulkWritersCount","validateBulkWriterOptions","throttling","_rateLimiter","RateLimiter","Number","POSITIVE_INFINITY","startingRate","maxRate","maxOpsPerSecond","initialOpsPerSecond","_getBufferedOperationsCount","_setMaxPendingOpCount","newMax","create","data","_verifyNotClosed","_enqueue","bulkCommitBatch","silencePromise","delete","precondition","set","update","dataOrField","preconditionOrValues","onWriteResult","callback","onWriteError","shouldRetryCallback","flush","_scheduleCurrentBatch","close","_decrementBulkWritersCount","flushPromise","pendingBatch","highestBackoffDuration","reduce","prev","cur","backoffMsWithJitter","_applyJitter","delayedExecution","delayExecution","then","_sendBatch","batch","underRateLimit","tryMakeRequest","delayMs","getNextRequestDelayMs","backoffMs","jitter","Math","random","min","enqueueOnBatchCallback","bulkWriterOp","_sendFn","bind","res","_processBufferedOps","catch","nextOp","shift","validateOptional","optional","argName","isObject","invalidArgumentMessage","validateInteger","minValue"],"mappings":"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AAhB,CAAuBrE,WAAvB,EAAoCsE,IAApC,CAAxD,CAAX;;AACA3H,IAAAA,MAAM,CAAC+H,cAAP,CAAsBxC,EAAtB;AACA,WAAOA,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIyC,EAAAA,MAAM,CAAC3E,WAAD,EAAc4E,YAAd,EAA4B;AAC9B,SAAKL,gBAAL;;AACA,UAAMrC,EAAE,GAAG,KAAKsC,QAAL,CAAcxE,WAAd,EAA2B,QAA3B,EAAqCyE,eAAe,IAAIA,eAAe,CAACE,MAAhB,CAAuB3E,WAAvB,EAAoC4E,YAApC,CAAxD,CAAX;;AACAjI,IAAAA,MAAM,CAAC+H,cAAP,CAAsBxC,EAAtB;AACA,WAAOA,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI2C,EAAAA,GAAG,CAAC7E,WAAD,EAAcsE,IAAd,EAAoBpE,OAApB,EAA6B;AAC5B,SAAKqE,gBAAL;;AACA,UAAMrC,EAAE,GAAG,KAAKsC,QAAL,CAAcxE,WAAd,EAA2B,KAA3B,EAAkCyE,eAAe,IAAIA,eAAe,CAACI,GAAhB,CAAoB7E,WAApB,EAAiCsE,IAAjC,EAAuCpE,OAAvC,CAArD,CAAX;;AACAvD,IAAAA,MAAM,CAAC+H,cAAP,CAAsBxC,EAAtB;AACA,WAAOA,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI4C,EAAAA,MAAM,CAAC9E,WAAD,EAAc+E,WAAd,EAA2B,GAAGC,oBAA9B,EAAoD;AACtD,SAAKT,gBAAL;;AACA,UAAMrC,EAAE,GAAG,KAAKsC,QAAL,CAAcxE,WAAd,EAA2B,QAA3B,EAAqCyE,eAAe,IAAIA,eAAe,CAACK,MAAhB,CAAuB9E,WAAvB,EAAoC+E,WAApC,EAAiD,GAAGC,oBAApD,CAAxD,CAAX;;AACArI,IAAAA,MAAM,CAAC+H,cAAP,CAAsBxC,EAAtB;AACA,WAAOA,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI+C,EAAAA,aAAa,CAACC,QAAD,EAAW;AACpB,SAAKjC,UAAL,GAAkBiC,QAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,YAAY,CAACC,mBAAD,EAAsB;AAC9B,SAAKlC,QAAL,GAAgBkC,mBAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,KAAK,GAAG;AACJ,SAAKd,gBAAL;;AACA,SAAKe,qBAAL;AAA2B;AAAa,QAAxC;;AACA,WAAO,KAAK3C,OAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI4C,EAAAA,KAAK,GAAG;AACJ,SAAKhB,gBAAL;;AACA,SAAKhC,SAAL,CAAeiD,0BAAf;;AACA,UAAMC,YAAY,GAAG,KAAKJ,KAAL,EAArB;AACA,SAAKxC,QAAL,GAAgB,IAAhB;AACA,WAAO4C,YAAP;AACH;AACD;AAC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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst assert = require(\"assert\");\nconst backoff_1 = require(\"./backoff\");\nconst rate_limiter_1 = require(\"./rate-limiter\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst write_batch_1 = require(\"./write-batch\");\nconst validate_1 = require(\"./validate\");\nconst logger_1 = require(\"./logger\");\nconst google_gax_1 = require(\"google-gax\");\n/*!\n * The maximum number of writes that can be in a single batch.\n */\nconst MAX_BATCH_SIZE = 20;\n/*!\n * The starting maximum number of operations per second as allowed by the\n * 500/50/5 rule.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\nexports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = 500;\n/*!\n * The maximum number of operations per second as allowed by the 500/50/5 rule.\n * By default the rate limiter will not exceed this value.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\nexports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = 10000;\n/*!\n * The default jitter to apply to the exponential backoff used in retries. For\n * example, a factor of 0.3 means a 30% jitter is applied.\n */\nexports.DEFAULT_JITTER_FACTOR = 0.3;\n/*!\n * The rate by which to increase the capacity as specified by the 500/50/5 rule.\n */\nconst RATE_LIMITER_MULTIPLIER = 1.5;\n/*!\n * How often the operations per second capacity should increase in milliseconds\n * as specified by the 500/50/5 rule.\n */\nconst RATE_LIMITER_MULTIPLIER_MILLIS = 5 * 60 * 1000;\n/*!\n * The default maximum number of pending operations that can be enqueued onto a\n * BulkWriter instance. An operation is considered pending if BulkWriter has\n * sent it via RPC and is awaiting the result. BulkWriter buffers additional\n * writes after this many pending operations in order to avoiding going OOM.\n */\nconst DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT = 500;\n/**\n * Represents a single write for BulkWriter, encapsulating operation dispatch\n * and error handling.\n * @private\n */\nclass BulkWriterOperation {\n    /**\n     * @param ref The document reference being written to.\n     * @param type The type of operation that created this write.\n     * @param sendFn A callback to invoke when the operation should be sent.\n     * @param errorFn The user provided global error callback.\n     * @param successFn The user provided global success callback.\n     */\n    constructor(ref, type, sendFn, errorFn, successFn) {\n        this.ref = ref;\n        this.type = type;\n        this.sendFn = sendFn;\n        this.errorFn = errorFn;\n        this.successFn = successFn;\n        this.deferred = new util_1.Deferred();\n        this.failedAttempts = 0;\n        this._backoffDuration = 0;\n    }\n    get promise() {\n        return this.deferred.promise;\n    }\n    get backoffDuration() {\n        return this._backoffDuration;\n    }\n    onError(error) {\n        ++this.failedAttempts;\n        try {\n            const bulkWriterError = new BulkWriterError(error.code, error.message, this.ref, this.type, this.failedAttempts);\n            const shouldRetry = this.errorFn(bulkWriterError);\n            logger_1.logger('BulkWriter.errorFn', null, 'Ran error callback on error code:', error.code, ', shouldRetry:', shouldRetry, ' for document:', this.ref.path);\n            if (shouldRetry) {\n                this.lastStatus = error.code;\n                this.updateBackoffDuration();\n                this.sendFn(this);\n            }\n            else {\n                this.deferred.reject(bulkWriterError);\n            }\n        }\n        catch (userCallbackError) {\n            this.deferred.reject(userCallbackError);\n        }\n    }\n    updateBackoffDuration() {\n        if (this.lastStatus === google_gax_1.Status.RESOURCE_EXHAUSTED) {\n            this._backoffDuration = backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS;\n        }\n        else if (this._backoffDuration === 0) {\n            this._backoffDuration = backoff_1.DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n        }\n        else {\n            this._backoffDuration *= backoff_1.DEFAULT_BACKOFF_FACTOR;\n        }\n    }\n    onSuccess(result) {\n        try {\n            this.successFn(this.ref, result);\n            this.deferred.resolve(result);\n        }\n        catch (userCallbackError) {\n            this.deferred.reject(userCallbackError);\n        }\n    }\n}\n/**\n * Used to represent a batch on the BatchQueue.\n *\n * @private\n */\nclass BulkCommitBatch extends write_batch_1.WriteBatch {\n    constructor() {\n        super(...arguments);\n        // The set of document reference paths present in the WriteBatch.\n        this.docPaths = new Set();\n        // An array of pending write operations. Only contains writes that have not\n        // been resolved.\n        this.pendingOps = [];\n    }\n    has(documentRef) {\n        return this.docPaths.has(documentRef.path);\n    }\n    async bulkCommit(options = {}) {\n        var _a;\n        const tag = (_a = options === null || options === void 0 ? void 0 : options.requestTag) !== null && _a !== void 0 ? _a : util_1.requestTag();\n        // Capture the error stack to preserve stack tracing across async calls.\n        const stack = Error().stack;\n        let response;\n        try {\n            logger_1.logger('BulkCommitBatch.bulkCommit', tag, `Sending next batch with ${this._opCount} writes`);\n            const retryCodes = util_1.getRetryCodes('batchWrite');\n            response = await this._commit({ retryCodes, methodName: 'batchWrite', requestTag: tag });\n        }\n        catch (err) {\n            // Map the failure to each individual write's result.\n            const ops = Array.from({ length: this.pendingOps.length });\n            response = {\n                writeResults: ops.map(() => {\n                    return {};\n                }),\n                status: ops.map(() => err),\n            };\n        }\n        for (let i = 0; i < (response.writeResults || []).length; ++i) {\n            // Since delete operations currently do not have write times, use a\n            // sentinel Timestamp value.\n            // TODO(b/158502664): Use actual delete timestamp.\n            const DELETE_TIMESTAMP_SENTINEL = timestamp_1.Timestamp.fromMillis(0);\n            const status = (response.status || [])[i];\n            if (status.code === google_gax_1.Status.OK) {\n                const updateTime = timestamp_1.Timestamp.fromProto(response.writeResults[i].updateTime || DELETE_TIMESTAMP_SENTINEL);\n                this.pendingOps[i].onSuccess(new write_batch_1.WriteResult(updateTime));\n            }\n            else {\n                const error = new google_gax_1.GoogleError(status.message || undefined);\n                error.code = status.code;\n                this.pendingOps[i].onError(util_1.wrapError(error, stack));\n            }\n        }\n    }\n    /**\n     * Helper to update data structures associated with the operation and returns\n     * the result.\n     */\n    processLastOperation(op) {\n        assert(!this.docPaths.has(op.ref.path), 'Batch should not contain writes to the same document');\n        this.docPaths.add(op.ref.path);\n        this.pendingOps.push(op);\n    }\n}\n/**\n * The error thrown when a BulkWriter operation fails.\n *\n * @class BulkWriterError\n */\nclass BulkWriterError extends Error {\n    /** @hideconstructor */\n    constructor(\n    /** The status code of the error. */\n    code, \n    /** The error message of the error. */\n    message, \n    /** The document reference the operation was performed on. */\n    documentRef, \n    /** The type of operation performed. */\n    operationType, \n    /** How many times this operation has been attempted unsuccessfully. */\n    failedAttempts) {\n        super(message);\n        this.code = code;\n        this.message = message;\n        this.documentRef = documentRef;\n        this.operationType = operationType;\n        this.failedAttempts = failedAttempts;\n    }\n}\nexports.BulkWriterError = BulkWriterError;\n/**\n * A Firestore BulkWriter that can be used to perform a large number of writes\n * in parallel.\n *\n * @class BulkWriter\n */\nclass BulkWriter {\n    /** @hideconstructor */\n    constructor(firestore, options) {\n        var _a, _b;\n        this.firestore = firestore;\n        /**\n         * The maximum number of writes that can be in a single batch.\n         * Visible for testing.\n         * @private\n         */\n        this._maxBatchSize = MAX_BATCH_SIZE;\n        /**\n         * The batch that is currently used to schedule operations. Once this batch\n         * reaches maximum capacity, a new batch is created.\n         * @private\n         */\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore);\n        /**\n         * A pointer to the tail of all active BulkWriter operations. This pointer\n         * is advanced every time a new write is enqueued.\n         * @private\n         */\n        this._lastOp = Promise.resolve();\n        /**\n         * Whether this BulkWriter instance has started to close. Afterwards, no\n         * new operations can be enqueued, except for retry operations scheduled by\n         * the error handler.\n         * @private\n         */\n        this._closing = false;\n        /**\n         * The number of pending operations enqueued on this BulkWriter instance.\n         * An operation is considered pending if BulkWriter has sent it via RPC and\n         * is awaiting the result.\n         * @private\n         */\n        this._pendingOpsCount = 0;\n        /**\n         * An array containing buffered BulkWriter operations after the maximum number\n         * of pending operations has been enqueued.\n         * @private\n         */\n        this._bufferedOperations = [];\n        /**\n         * The maximum number of pending operations that can be enqueued onto this\n         * BulkWriter instance. Once the this number of writes have been enqueued,\n         * subsequent writes are buffered.\n         * @private\n         */\n        this._maxPendingOpCount = DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT;\n        /**\n         * The user-provided callback to be run every time a BulkWriter operation\n         * successfully completes.\n         * @private\n         */\n        this._successFn = () => { };\n        /**\n         * The user-provided callback to be run every time a BulkWriter operation\n         * fails.\n         * @private\n         */\n        this._errorFn = error => {\n            const isRetryableDeleteError = error.operationType === 'delete' &&\n                error.code === google_gax_1.Status.INTERNAL;\n            const retryCodes = util_1.getRetryCodes('batchWrite');\n            return ((retryCodes.includes(error.code) || isRetryableDeleteError) &&\n                error.failedAttempts < backoff_1.MAX_RETRY_ATTEMPTS);\n        };\n        this.firestore._incrementBulkWritersCount();\n        validateBulkWriterOptions(options);\n        if ((options === null || options === void 0 ? void 0 : options.throttling) === false) {\n            this._rateLimiter = new rate_limiter_1.RateLimiter(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        }\n        else {\n            let startingRate = exports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT;\n            let maxRate = exports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT;\n            if (typeof (options === null || options === void 0 ? void 0 : options.throttling) !== 'boolean') {\n                if (((_a = options === null || options === void 0 ? void 0 : options.throttling) === null || _a === void 0 ? void 0 : _a.maxOpsPerSecond) !== undefined) {\n                    maxRate = options.throttling.maxOpsPerSecond;\n                }\n                if (((_b = options === null || options === void 0 ? void 0 : options.throttling) === null || _b === void 0 ? void 0 : _b.initialOpsPerSecond) !== undefined) {\n                    startingRate = options.throttling.initialOpsPerSecond;\n                }\n                // The initial validation step ensures that the maxOpsPerSecond is\n                // greater than initialOpsPerSecond. If this inequality is true, that\n                // means initialOpsPerSecond was not set and maxOpsPerSecond is less\n                // than the default starting rate.\n                if (maxRate < startingRate) {\n                    startingRate = maxRate;\n                }\n                // Ensure that the batch size is not larger than the number of allowed\n                // operations per second.\n                if (startingRate < this._maxBatchSize) {\n                    this._maxBatchSize = startingRate;\n                }\n            }\n            this._rateLimiter = new rate_limiter_1.RateLimiter(startingRate, RATE_LIMITER_MULTIPLIER, RATE_LIMITER_MULTIPLIER_MILLIS, maxRate);\n        }\n    }\n    // Visible for testing.\n    _getBufferedOperationsCount() {\n        return this._bufferedOperations.length;\n    }\n    // Visible for testing.\n    _setMaxPendingOpCount(newMax) {\n        this._maxPendingOpCount = newMax;\n    }\n    /**\n     * Create a document with the provided data. This single operation will fail\n     * if a document exists at its location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {T} data The object to serialize as the document.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * bulkWriter\n     *  .create(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     */\n    create(documentRef, data) {\n        this._verifyNotClosed();\n        const op = this._enqueue(documentRef, 'create', bulkCommitBatch => bulkCommitBatch.create(documentRef, data));\n        util_1.silencePromise(op);\n        return op;\n    }\n    /**\n     * Delete a document from the database.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the batch if the\n     * document doesn't exist or was last updated at a different time.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the delete. If the delete fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * bulkWriter\n     *  .delete(documentRef)\n     *  .then(result => {\n     *    console.log('Successfully deleted document');\n     *  })\n     *  .catch(err => {\n     *    console.log('Delete failed with: ', err);\n     *  });\n     * });\n     */\n    delete(documentRef, precondition) {\n        this._verifyNotClosed();\n        const op = this._enqueue(documentRef, 'delete', bulkCommitBatch => bulkCommitBatch.delete(documentRef, precondition));\n        util_1.silencePromise(op);\n        return op;\n    }\n    /**\n     * Write to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document does not\n     * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions}.,\n     * the provided data can be merged into the existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call remain\n     * untouched.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided, set()\n     * only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     *\n     * @example\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * bulkWriter\n     *  .set(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     */\n    set(documentRef, data, options) {\n        this._verifyNotClosed();\n        const op = this._enqueue(documentRef, 'set', bulkCommitBatch => bulkCommitBatch.set(documentRef, data, options));\n        util_1.silencePromise(op);\n        return op;\n    }\n    /**\n     * Update fields of the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document doesn't yet\n     * exist, the update fails and the entire batch will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n     * fields and values with which to update the document or the path of the\n     * first field to update.\n     * @param {...(Precondition|*|string|FieldPath)} preconditionOrValues - An\n     * alternating list of field paths and values to update or a Precondition to\n     * restrict this update\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * bulkWriter\n     *  .update(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        this._verifyNotClosed();\n        const op = this._enqueue(documentRef, 'update', bulkCommitBatch => bulkCommitBatch.update(documentRef, dataOrField, ...preconditionOrValues));\n        util_1.silencePromise(op);\n        return op;\n    }\n    /**\n     * Attaches a listener that is run every time a BulkWriter operation\n     * successfully completes.\n     *\n     * @param callback A callback to be called every time a BulkWriter operation\n     * successfully completes.\n     * @example\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter\n     *   .onWriteResult((documentRef, result) => {\n     *     console.log(\n     *       'Successfully executed write on document: ',\n     *       documentRef,\n     *       ' at: ',\n     *       result\n     *     );\n     *   });\n     */\n    onWriteResult(callback) {\n        this._successFn = callback;\n    }\n    /**\n     * Attaches an error handler listener that is run every time a BulkWriter\n     * operation fails.\n     *\n     * BulkWriter has a default error handler that retries UNAVAILABLE and\n     * ABORTED errors up to a maximum of 10 failed attempts. When an error\n     * handler is specified, the default error handler will be overwritten.\n     *\n     * @param shouldRetryCallback A callback to be called every time a BulkWriter\n     * operation fails. Returning `true` will retry the operation. Returning\n     * `false` will stop the retry loop.\n     * @example\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter\n     *   .onWriteError((error) => {\n     *     if (\n     *       error.code === GrpcStatus.UNAVAILABLE &&\n     *       error.failedAttempts < MAX_RETRY_ATTEMPTS\n     *     ) {\n     *       return true;\n     *     } else {\n     *       console.log('Failed write at document: ', error.documentRef);\n     *       return false;\n     *     }\n     *   });\n     */\n    onWriteError(shouldRetryCallback) {\n        this._errorFn = shouldRetryCallback;\n    }\n    /**\n     * Commits all writes that have been enqueued up to this point in parallel.\n     *\n     * Returns a Promise that resolves when all currently queued operations have\n     * been committed. The Promise will never be rejected since the results for\n     * each individual operation are conveyed via their individual Promises.\n     *\n     * The Promise resolves immediately if there are no pending writes. Otherwise,\n     * the Promise waits for all previously issued writes, but it does not wait\n     * for writes that were added after the method is called. If you want to wait\n     * for additional writes, call `flush()` again.\n     *\n     * @return {Promise<void>} A promise that resolves when all enqueued writes\n     * up to this point have been committed.\n     *\n     * @example\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(documentRef, {foo: 'bar'});\n     * bulkWriter.update(documentRef2, {foo: 'bar'});\n     * bulkWriter.delete(documentRef3);\n     * await flush().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     */\n    flush() {\n        this._verifyNotClosed();\n        this._scheduleCurrentBatch(/* flush= */ true);\n        return this._lastOp;\n    }\n    /**\n     * Commits all enqueued writes and marks the BulkWriter instance as closed.\n     *\n     * After calling `close()`, calling any method will throw an error. Any\n     * retries scheduled as part of an `onWriteError()` handler will be run\n     * before the `close()` promise resolves.\n     *\n     * Returns a Promise that resolves when there are no more pending writes. The\n     * Promise will never be rejected. Calling this method will send all requests.\n     * The promise resolves immediately if there are no pending writes.\n     *\n     * @return {Promise<void>} A promise that resolves when all enqueued writes\n     * up to this point have been committed.\n     *\n     * @example\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(documentRef, {foo: 'bar'});\n     * bulkWriter.update(documentRef2, {foo: 'bar'});\n     * bulkWriter.delete(documentRef3);\n     * await close().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     */\n    close() {\n        this._verifyNotClosed();\n        this.firestore._decrementBulkWritersCount();\n        const flushPromise = this.flush();\n        this._closing = true;\n        return flushPromise;\n    }\n    /**\n     * Throws an error if the BulkWriter instance has been closed.\n     * @private\n     */\n    _verifyNotClosed() {\n        if (this._closing) {\n            throw new Error('BulkWriter has already been closed.');\n        }\n    }\n    /**\n     * Sends the current batch and resets `this._bulkCommitBatch`.\n     *\n     * @param flush If provided, keeps re-sending operations until no more\n     * operations are enqueued. This allows retries to resolve as part of a\n     * `flush()` or `close()` call.\n     * @private\n     */\n    _scheduleCurrentBatch(flush = false) {\n        if (this._bulkCommitBatch._opCount === 0)\n            return;\n        const pendingBatch = this._bulkCommitBatch;\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore);\n        // Use the write with the longest backoff duration when determining backoff.\n        const highestBackoffDuration = pendingBatch.pendingOps.reduce((prev, cur) => prev.backoffDuration > cur.backoffDuration ? prev : cur).backoffDuration;\n        const backoffMsWithJitter = BulkWriter._applyJitter(highestBackoffDuration);\n        const delayedExecution = new util_1.Deferred();\n        if (backoffMsWithJitter > 0) {\n            backoff_1.delayExecution(() => delayedExecution.resolve(), backoffMsWithJitter);\n        }\n        else {\n            delayedExecution.resolve();\n        }\n        delayedExecution.promise.then(() => this._sendBatch(pendingBatch, flush));\n    }\n    /**\n     * Sends the provided batch once the rate limiter does not require any delay.\n     */\n    async _sendBatch(batch, flush = false) {\n        const tag = util_1.requestTag();\n        // Send the batch if it is does not require any delay, or schedule another\n        // attempt after the appropriate timeout.\n        const underRateLimit = this._rateLimiter.tryMakeRequest(batch._opCount);\n        if (underRateLimit) {\n            await batch.bulkCommit({ requestTag: tag });\n            if (flush)\n                this._scheduleCurrentBatch(flush);\n        }\n        else {\n            const delayMs = this._rateLimiter.getNextRequestDelayMs(batch._opCount);\n            logger_1.logger('BulkWriter._sendBatch', tag, `Backing off for ${delayMs} seconds`);\n            backoff_1.delayExecution(() => this._sendBatch(batch, flush), delayMs);\n        }\n    }\n    /**\n     * Adds a 30% jitter to the provided backoff.\n     *\n     * @private\n     */\n    static _applyJitter(backoffMs) {\n        if (backoffMs === 0)\n            return 0;\n        // Random value in [-0.3, 0.3].\n        const jitter = exports.DEFAULT_JITTER_FACTOR * (Math.random() * 2 - 1);\n        return Math.min(backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS, backoffMs + jitter * backoffMs);\n    }\n    /**\n     * Schedules and runs the provided operation on the next available batch.\n     * @private\n     */\n    _enqueue(ref, type, enqueueOnBatchCallback) {\n        const bulkWriterOp = new BulkWriterOperation(ref, type, this._sendFn.bind(this, enqueueOnBatchCallback), this._errorFn.bind(this), this._successFn.bind(this));\n        // Advance the `_lastOp` pointer. This ensures that `_lastOp` only resolves\n        // when both the previous and the current write resolves.\n        this._lastOp = this._lastOp.then(() => util_1.silencePromise(bulkWriterOp.promise));\n        // Schedule the operation if the BulkWriter has fewer than the maximum\n        // number of allowed pending operations, or add the operation to the\n        // buffer.\n        if (this._pendingOpsCount < this._maxPendingOpCount) {\n            this._pendingOpsCount++;\n            this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n        }\n        else {\n            this._bufferedOperations.push(() => {\n                this._pendingOpsCount++;\n                this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n            });\n        }\n        // Chain the BulkWriter operation promise with the buffer processing logic\n        // in order to ensure that it runs and that subsequent operations are\n        // enqueued before the next batch is scheduled in `_sendBatch()`.\n        return bulkWriterOp.promise\n            .then(res => {\n            this._pendingOpsCount--;\n            this._processBufferedOps();\n            return res;\n        })\n            .catch(err => {\n            this._pendingOpsCount--;\n            this._processBufferedOps();\n            throw err;\n        });\n    }\n    /**\n     * Manages the pending operation counter and schedules the next BulkWriter\n     * operation if we're under the maximum limit.\n     * @private\n     */\n    _processBufferedOps() {\n        if (this._pendingOpsCount < this._maxPendingOpCount &&\n            this._bufferedOperations.length > 0) {\n            const nextOp = this._bufferedOperations.shift();\n            nextOp();\n        }\n    }\n    /**\n     * Schedules the provided operations on current BulkCommitBatch.\n     * Sends the BulkCommitBatch if it reaches maximum capacity.\n     *\n     * @private\n     */\n    _sendFn(enqueueOnBatchCallback, op) {\n        if (this._bulkCommitBatch.has(op.ref)) {\n            // Create a new batch since the backend doesn't support batches with two\n            // writes to the same document.\n            this._scheduleCurrentBatch();\n        }\n        enqueueOnBatchCallback(this._bulkCommitBatch);\n        this._bulkCommitBatch.processLastOperation(op);\n        if (this._bulkCommitBatch._opCount === this._maxBatchSize) {\n            this._scheduleCurrentBatch();\n        }\n    }\n}\nexports.BulkWriter = BulkWriter;\n/**\n * Validates the use of 'value' as BulkWriterOptions.\n *\n * @private\n * @param value The BulkWriterOptions object to validate.\n * @throws if the input is not a valid BulkWriterOptions object.\n */\nfunction validateBulkWriterOptions(value) {\n    if (validate_1.validateOptional(value, { optional: true })) {\n        return;\n    }\n    const argName = 'options';\n    if (!util_1.isObject(value)) {\n        throw new Error(`${validate_1.invalidArgumentMessage(argName, 'bulkWriter() options argument')} Input is not an object.`);\n    }\n    const options = value;\n    if (options.throttling === undefined ||\n        typeof options.throttling === 'boolean') {\n        return;\n    }\n    if (options.throttling.initialOpsPerSecond !== undefined) {\n        validate_1.validateInteger('initialOpsPerSecond', options.throttling.initialOpsPerSecond, {\n            minValue: 1,\n        });\n    }\n    if (options.throttling.maxOpsPerSecond !== undefined) {\n        validate_1.validateInteger('maxOpsPerSecond', options.throttling.maxOpsPerSecond, {\n            minValue: 1,\n        });\n        if (options.throttling.initialOpsPerSecond !== undefined &&\n            options.throttling.initialOpsPerSecond >\n                options.throttling.maxOpsPerSecond) {\n            throw new Error(`${validate_1.invalidArgumentMessage(argName, 'bulkWriter() options argument')} \"maxOpsPerSecond\" cannot be less than \"initialOpsPerSecond\".`);\n        }\n    }\n}\n//# sourceMappingURL=bulk-writer.js.map"]},"metadata":{},"sourceType":"script"}