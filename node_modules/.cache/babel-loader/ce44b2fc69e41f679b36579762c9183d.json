{"ast":null,"code":"/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateMessage = exports.BLACKLISTED_OPTIONS_KEYS = exports.BLACKLISTED_DATA_PAYLOAD_KEYS = void 0;\n\nvar index_1 = require(\"../utils/index\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\"); // Keys which are not allowed in the messaging data payload object.\n\n\nexports.BLACKLISTED_DATA_PAYLOAD_KEYS = ['from']; // Keys which are not allowed in the messaging options object.\n\nexports.BLACKLISTED_OPTIONS_KEYS = ['condition', 'data', 'notification', 'registrationIds', 'registration_ids', 'to'];\n/**\n * Checks if the given Message object is valid. Recursively validates all the child objects\n * included in the message (android, apns, data etc.). If successful, transforms the message\n * in place by renaming the keys to what's expected by the remote FCM service.\n *\n * @param {Message} Message An object to be validated.\n */\n\nfunction validateMessage(message) {\n  if (!validator.isNonNullObject(message)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Message must be a non-null object');\n  }\n\n  var anyMessage = message;\n\n  if (anyMessage.topic) {\n    // If the topic name is prefixed, remove it.\n    if (anyMessage.topic.startsWith('/topics/')) {\n      anyMessage.topic = anyMessage.topic.replace(/^\\/topics\\//, '');\n    } // Checks for illegal characters and empty string.\n\n\n    if (!/^[a-zA-Z0-9-_.~%]+$/.test(anyMessage.topic)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Malformed topic name');\n    }\n  }\n\n  var targets = [anyMessage.token, anyMessage.topic, anyMessage.condition];\n\n  if (targets.filter(function (v) {\n    return validator.isNonEmptyString(v);\n  }).length !== 1) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Exactly one of topic, token or condition is required');\n  }\n\n  validateStringMap(message.data, 'data');\n  validateAndroidConfig(message.android);\n  validateWebpushConfig(message.webpush);\n  validateApnsConfig(message.apns);\n  validateFcmOptions(message.fcmOptions);\n  validateNotification(message.notification);\n}\n\nexports.validateMessage = validateMessage;\n/**\n * Checks if the given object only contains strings as child values.\n *\n * @param {object} map An object to be validated.\n * @param {string} label A label to be included in the errors thrown.\n */\n\nfunction validateStringMap(map, label) {\n  if (typeof map === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(map)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, label + \" must be a non-null object\");\n  }\n\n  Object.keys(map).forEach(function (key) {\n    if (!validator.isString(map[key])) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, label + \" must only contain string values\");\n    }\n  });\n}\n/**\n * Checks if the given WebpushConfig object is valid. The object must have valid headers and data.\n *\n * @param {WebpushConfig} config An object to be validated.\n */\n\n\nfunction validateWebpushConfig(config) {\n  if (typeof config === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(config)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'webpush must be a non-null object');\n  }\n\n  validateStringMap(config.headers, 'webpush.headers');\n  validateStringMap(config.data, 'webpush.data');\n}\n/**\n * Checks if the given ApnsConfig object is valid. The object must have valid headers and a\n * payload.\n *\n * @param {ApnsConfig} config An object to be validated.\n */\n\n\nfunction validateApnsConfig(config) {\n  if (typeof config === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(config)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns must be a non-null object');\n  }\n\n  validateStringMap(config.headers, 'apns.headers');\n  validateApnsPayload(config.payload);\n  validateApnsFcmOptions(config.fcmOptions);\n}\n/**\n * Checks if the given ApnsFcmOptions object is valid.\n *\n * @param {ApnsFcmOptions} fcmOptions An object to be validated.\n */\n\n\nfunction validateApnsFcmOptions(fcmOptions) {\n  if (typeof fcmOptions === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(fcmOptions)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n  }\n\n  if (typeof fcmOptions.imageUrl !== 'undefined' && !validator.isURL(fcmOptions.imageUrl)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'imageUrl must be a valid URL string');\n  }\n\n  if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n  }\n\n  var propertyMappings = {\n    imageUrl: 'image'\n  };\n  Object.keys(propertyMappings).forEach(function (key) {\n    if (key in fcmOptions && propertyMappings[key] in fcmOptions) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Multiple specifications for \" + key + \" in ApnsFcmOptions\");\n    }\n  });\n  index_1.renameProperties(fcmOptions, propertyMappings);\n}\n/**\n * Checks if the given FcmOptions object is valid.\n *\n * @param {FcmOptions} fcmOptions An object to be validated.\n */\n\n\nfunction validateFcmOptions(fcmOptions) {\n  if (typeof fcmOptions === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(fcmOptions)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n  }\n\n  if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n  }\n}\n/**\n * Checks if the given Notification object is valid.\n *\n * @param {Notification} notification An object to be validated.\n */\n\n\nfunction validateNotification(notification) {\n  if (typeof notification === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(notification)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification must be a non-null object');\n  }\n\n  if (typeof notification.imageUrl !== 'undefined' && !validator.isURL(notification.imageUrl)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification.imageUrl must be a valid URL string');\n  }\n\n  var propertyMappings = {\n    imageUrl: 'image'\n  };\n  Object.keys(propertyMappings).forEach(function (key) {\n    if (key in notification && propertyMappings[key] in notification) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Multiple specifications for \" + key + \" in Notification\");\n    }\n  });\n  index_1.renameProperties(notification, propertyMappings);\n}\n/**\n * Checks if the given ApnsPayload object is valid. The object must have a valid aps value.\n *\n * @param {ApnsPayload} payload An object to be validated.\n */\n\n\nfunction validateApnsPayload(payload) {\n  if (typeof payload === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(payload)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload must be a non-null object');\n  }\n\n  validateAps(payload.aps);\n}\n/**\n * Checks if the given Aps object is valid. The object must have a valid alert. If the validation\n * is successful, transforms the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {Aps} aps An object to be validated.\n */\n\n\nfunction validateAps(aps) {\n  if (typeof aps === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(aps)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps must be a non-null object');\n  }\n\n  validateApsAlert(aps.alert);\n  validateApsSound(aps.sound);\n  var propertyMappings = {\n    contentAvailable: 'content-available',\n    mutableContent: 'mutable-content',\n    threadId: 'thread-id'\n  };\n  Object.keys(propertyMappings).forEach(function (key) {\n    if (key in aps && propertyMappings[key] in aps) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Multiple specifications for \" + key + \" in Aps\");\n    }\n  });\n  index_1.renameProperties(aps, propertyMappings);\n  var contentAvailable = aps['content-available'];\n\n  if (typeof contentAvailable !== 'undefined' && contentAvailable !== 1) {\n    if (contentAvailable === true) {\n      aps['content-available'] = 1;\n    } else {\n      delete aps['content-available'];\n    }\n  }\n\n  var mutableContent = aps['mutable-content'];\n\n  if (typeof mutableContent !== 'undefined' && mutableContent !== 1) {\n    if (mutableContent === true) {\n      aps['mutable-content'] = 1;\n    } else {\n      delete aps['mutable-content'];\n    }\n  }\n}\n\nfunction validateApsSound(sound) {\n  if (typeof sound === 'undefined' || validator.isNonEmptyString(sound)) {\n    return;\n  } else if (!validator.isNonNullObject(sound)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound must be a non-empty string or a non-null object');\n  }\n\n  if (!validator.isNonEmptyString(sound.name)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.name must be a non-empty string');\n  }\n\n  var volume = sound.volume;\n\n  if (typeof volume !== 'undefined') {\n    if (!validator.isNumber(volume)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be a number');\n    }\n\n    if (volume < 0 || volume > 1) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be in the interval [0, 1]');\n    }\n  }\n\n  var soundObject = sound;\n  var key = 'critical';\n  var critical = soundObject[key];\n\n  if (typeof critical !== 'undefined' && critical !== 1) {\n    if (critical === true) {\n      soundObject[key] = 1;\n    } else {\n      delete soundObject[key];\n    }\n  }\n}\n/**\n * Checks if the given alert object is valid. Alert could be a string or a complex object.\n * If specified as an object, it must have valid localization parameters. If successful, transforms\n * the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {string | ApsAlert} alert An alert string or an object to be validated.\n */\n\n\nfunction validateApsAlert(alert) {\n  if (typeof alert === 'undefined' || validator.isString(alert)) {\n    return;\n  } else if (!validator.isNonNullObject(alert)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert must be a string or a non-null object');\n  }\n\n  var apsAlert = alert;\n\n  if (validator.isNonEmptyArray(apsAlert.locArgs) && !validator.isNonEmptyString(apsAlert.locKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.locKey is required when specifying locArgs');\n  }\n\n  if (validator.isNonEmptyArray(apsAlert.titleLocArgs) && !validator.isNonEmptyString(apsAlert.titleLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.titleLocKey is required when specifying titleLocArgs');\n  }\n\n  if (validator.isNonEmptyArray(apsAlert.subtitleLocArgs) && !validator.isNonEmptyString(apsAlert.subtitleLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.subtitleLocKey is required when specifying subtitleLocArgs');\n  }\n\n  var propertyMappings = {\n    locKey: 'loc-key',\n    locArgs: 'loc-args',\n    titleLocKey: 'title-loc-key',\n    titleLocArgs: 'title-loc-args',\n    subtitleLocKey: 'subtitle-loc-key',\n    subtitleLocArgs: 'subtitle-loc-args',\n    actionLocKey: 'action-loc-key',\n    launchImage: 'launch-image'\n  };\n  index_1.renameProperties(apsAlert, propertyMappings);\n}\n/**\n * Checks if the given AndroidConfig object is valid. The object must have valid ttl, data,\n * and notification fields. If successful, transforms the input object by renaming keys to valid\n * Android keys. Also transforms the ttl value to the format expected by FCM service.\n *\n * @param {AndroidConfig} config An object to be validated.\n */\n\n\nfunction validateAndroidConfig(config) {\n  if (typeof config === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(config)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android must be a non-null object');\n  }\n\n  if (typeof config.ttl !== 'undefined') {\n    if (!validator.isNumber(config.ttl) || config.ttl < 0) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'TTL must be a non-negative duration in milliseconds');\n    }\n\n    var duration = transformMillisecondsToSecondsString(config.ttl);\n    config.ttl = duration;\n  }\n\n  validateStringMap(config.data, 'android.data');\n  validateAndroidNotification(config.notification);\n  validateAndroidFcmOptions(config.fcmOptions);\n  var propertyMappings = {\n    collapseKey: 'collapse_key',\n    restrictedPackageName: 'restricted_package_name'\n  };\n  index_1.renameProperties(config, propertyMappings);\n}\n/**\n * Checks if the given AndroidNotification object is valid. The object must have valid color and\n * localization parameters. If successful, transforms the input object by renaming keys to valid\n * Android keys.\n *\n * @param {AndroidNotification} notification An object to be validated.\n */\n\n\nfunction validateAndroidNotification(notification) {\n  if (typeof notification === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(notification)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification must be a non-null object');\n  }\n\n  if (typeof notification.color !== 'undefined' && !/^#[0-9a-fA-F]{6}$/.test(notification.color)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.color must be in the form #RRGGBB');\n  }\n\n  if (validator.isNonEmptyArray(notification.bodyLocArgs) && !validator.isNonEmptyString(notification.bodyLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.bodyLocKey is required when specifying bodyLocArgs');\n  }\n\n  if (validator.isNonEmptyArray(notification.titleLocArgs) && !validator.isNonEmptyString(notification.titleLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.titleLocKey is required when specifying titleLocArgs');\n  }\n\n  if (typeof notification.imageUrl !== 'undefined' && !validator.isURL(notification.imageUrl)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.imageUrl must be a valid URL string');\n  }\n\n  if (typeof notification.eventTimestamp !== 'undefined') {\n    if (!(notification.eventTimestamp instanceof Date)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.eventTimestamp must be a valid `Date` object');\n    } // Convert timestamp to RFC3339 UTC \"Zulu\" format, example \"2014-10-02T15:01:23.045123456Z\"\n\n\n    var zuluTimestamp = notification.eventTimestamp.toISOString();\n    notification.eventTimestamp = zuluTimestamp;\n  }\n\n  if (typeof notification.vibrateTimingsMillis !== 'undefined') {\n    if (!validator.isNonEmptyArray(notification.vibrateTimingsMillis)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be a non-empty array of numbers');\n    }\n\n    var vibrateTimings_1 = [];\n    notification.vibrateTimingsMillis.forEach(function (value) {\n      if (!validator.isNumber(value) || value < 0) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be non-negative durations in milliseconds');\n      }\n\n      var duration = transformMillisecondsToSecondsString(value);\n      vibrateTimings_1.push(duration);\n    });\n    notification.vibrateTimingsMillis = vibrateTimings_1;\n  }\n\n  if (typeof notification.priority !== 'undefined') {\n    var priority = 'PRIORITY_' + notification.priority.toUpperCase();\n    notification.priority = priority;\n  }\n\n  if (typeof notification.visibility !== 'undefined') {\n    var visibility = notification.visibility.toUpperCase();\n    notification.visibility = visibility;\n  }\n\n  validateLightSettings(notification.lightSettings);\n  var propertyMappings = {\n    clickAction: 'click_action',\n    bodyLocKey: 'body_loc_key',\n    bodyLocArgs: 'body_loc_args',\n    titleLocKey: 'title_loc_key',\n    titleLocArgs: 'title_loc_args',\n    channelId: 'channel_id',\n    imageUrl: 'image',\n    eventTimestamp: 'event_time',\n    localOnly: 'local_only',\n    priority: 'notification_priority',\n    vibrateTimingsMillis: 'vibrate_timings',\n    defaultVibrateTimings: 'default_vibrate_timings',\n    defaultSound: 'default_sound',\n    lightSettings: 'light_settings',\n    defaultLightSettings: 'default_light_settings',\n    notificationCount: 'notification_count'\n  };\n  index_1.renameProperties(notification, propertyMappings);\n}\n/**\n * Checks if the given LightSettings object is valid. The object must have valid color and\n * light on/off duration parameters. If successful, transforms the input object by renaming\n * keys to valid Android keys.\n *\n * @param {LightSettings} lightSettings An object to be validated.\n */\n\n\nfunction validateLightSettings(lightSettings) {\n  if (typeof lightSettings === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(lightSettings)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings must be a non-null object');\n  }\n\n  if (!validator.isNumber(lightSettings.lightOnDurationMillis) || lightSettings.lightOnDurationMillis < 0) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOnDurationMillis must be a non-negative duration in milliseconds');\n  }\n\n  var durationOn = transformMillisecondsToSecondsString(lightSettings.lightOnDurationMillis);\n  lightSettings.lightOnDurationMillis = durationOn;\n\n  if (!validator.isNumber(lightSettings.lightOffDurationMillis) || lightSettings.lightOffDurationMillis < 0) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOffDurationMillis must be a non-negative duration in milliseconds');\n  }\n\n  var durationOff = transformMillisecondsToSecondsString(lightSettings.lightOffDurationMillis);\n  lightSettings.lightOffDurationMillis = durationOff;\n\n  if (!validator.isString(lightSettings.color) || !/^#[0-9a-fA-F]{6}$/.test(lightSettings.color) && !/^#[0-9a-fA-F]{8}$/.test(lightSettings.color)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.color must be in the form #RRGGBB or #RRGGBBAA format');\n  }\n\n  var colorString = lightSettings.color.length === 7 ? lightSettings.color + 'FF' : lightSettings.color;\n  var rgb = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/i.exec(colorString);\n\n  if (!rgb || rgb.length < 4) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INTERNAL_ERROR, 'regex to extract rgba values from ' + colorString + ' failed.');\n  }\n\n  var color = {\n    red: parseInt(rgb[1], 16) / 255.0,\n    green: parseInt(rgb[2], 16) / 255.0,\n    blue: parseInt(rgb[3], 16) / 255.0,\n    alpha: parseInt(rgb[4], 16) / 255.0\n  };\n  lightSettings.color = color;\n  var propertyMappings = {\n    lightOnDurationMillis: 'light_on_duration',\n    lightOffDurationMillis: 'light_off_duration'\n  };\n  index_1.renameProperties(lightSettings, propertyMappings);\n}\n/**\n * Checks if the given AndroidFcmOptions object is valid.\n *\n * @param {AndroidFcmOptions} fcmOptions An object to be validated.\n */\n\n\nfunction validateAndroidFcmOptions(fcmOptions) {\n  if (typeof fcmOptions === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(fcmOptions)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n  }\n\n  if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n  }\n}\n/**\n * Transforms milliseconds to the format expected by FCM service.\n * Returns the duration in seconds with up to nine fractional\n * digits, terminated by 's'. Example: \"3.5s\".\n *\n * @param {number} milliseconds The duration in milliseconds.\n * @return {string} The resulting formatted string in seconds with up to nine fractional\n * digits, terminated by 's'.\n */\n\n\nfunction transformMillisecondsToSecondsString(milliseconds) {\n  var duration;\n  var seconds = Math.floor(milliseconds / 1000);\n  var nanos = (milliseconds - seconds * 1000) * 1000000;\n\n  if (nanos > 0) {\n    var nanoString = nanos.toString();\n\n    while (nanoString.length < 9) {\n      nanoString = '0' + nanoString;\n    }\n\n    duration = seconds + \".\" + nanoString + \"s\";\n  } else {\n    duration = seconds + \"s\";\n  }\n\n  return duration;\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/firebase-admin/lib/messaging/messaging-internal.js"],"names":["Object","defineProperty","exports","value","validateMessage","BLACKLISTED_OPTIONS_KEYS","BLACKLISTED_DATA_PAYLOAD_KEYS","index_1","require","error_1","validator","message","isNonNullObject","FirebaseMessagingError","MessagingClientErrorCode","INVALID_PAYLOAD","anyMessage","topic","startsWith","replace","test","targets","token","condition","filter","v","isNonEmptyString","length","validateStringMap","data","validateAndroidConfig","android","validateWebpushConfig","webpush","validateApnsConfig","apns","validateFcmOptions","fcmOptions","validateNotification","notification","map","label","keys","forEach","key","isString","config","headers","validateApnsPayload","payload","validateApnsFcmOptions","imageUrl","isURL","analyticsLabel","propertyMappings","renameProperties","validateAps","aps","validateApsAlert","alert","validateApsSound","sound","contentAvailable","mutableContent","threadId","name","volume","isNumber","soundObject","critical","apsAlert","isNonEmptyArray","locArgs","locKey","titleLocArgs","titleLocKey","subtitleLocArgs","subtitleLocKey","actionLocKey","launchImage","ttl","duration","transformMillisecondsToSecondsString","validateAndroidNotification","validateAndroidFcmOptions","collapseKey","restrictedPackageName","color","bodyLocArgs","bodyLocKey","eventTimestamp","Date","zuluTimestamp","toISOString","vibrateTimingsMillis","vibrateTimings_1","push","priority","toUpperCase","visibility","validateLightSettings","lightSettings","clickAction","channelId","localOnly","defaultVibrateTimings","defaultSound","defaultLightSettings","notificationCount","lightOnDurationMillis","durationOn","lightOffDurationMillis","durationOff","colorString","rgb","exec","INTERNAL_ERROR","red","parseInt","green","blue","alpha","milliseconds","seconds","Math","floor","nanos","nanoString","toString"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateMessage = exports.BLACKLISTED_OPTIONS_KEYS = exports.BLACKLISTED_DATA_PAYLOAD_KEYS = void 0;\nvar index_1 = require(\"../utils/index\");\nvar error_1 = require(\"../utils/error\");\nvar validator = require(\"../utils/validator\");\n// Keys which are not allowed in the messaging data payload object.\nexports.BLACKLISTED_DATA_PAYLOAD_KEYS = ['from'];\n// Keys which are not allowed in the messaging options object.\nexports.BLACKLISTED_OPTIONS_KEYS = [\n    'condition', 'data', 'notification', 'registrationIds', 'registration_ids', 'to',\n];\n/**\n * Checks if the given Message object is valid. Recursively validates all the child objects\n * included in the message (android, apns, data etc.). If successful, transforms the message\n * in place by renaming the keys to what's expected by the remote FCM service.\n *\n * @param {Message} Message An object to be validated.\n */\nfunction validateMessage(message) {\n    if (!validator.isNonNullObject(message)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Message must be a non-null object');\n    }\n    var anyMessage = message;\n    if (anyMessage.topic) {\n        // If the topic name is prefixed, remove it.\n        if (anyMessage.topic.startsWith('/topics/')) {\n            anyMessage.topic = anyMessage.topic.replace(/^\\/topics\\//, '');\n        }\n        // Checks for illegal characters and empty string.\n        if (!/^[a-zA-Z0-9-_.~%]+$/.test(anyMessage.topic)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Malformed topic name');\n        }\n    }\n    var targets = [anyMessage.token, anyMessage.topic, anyMessage.condition];\n    if (targets.filter(function (v) { return validator.isNonEmptyString(v); }).length !== 1) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Exactly one of topic, token or condition is required');\n    }\n    validateStringMap(message.data, 'data');\n    validateAndroidConfig(message.android);\n    validateWebpushConfig(message.webpush);\n    validateApnsConfig(message.apns);\n    validateFcmOptions(message.fcmOptions);\n    validateNotification(message.notification);\n}\nexports.validateMessage = validateMessage;\n/**\n * Checks if the given object only contains strings as child values.\n *\n * @param {object} map An object to be validated.\n * @param {string} label A label to be included in the errors thrown.\n */\nfunction validateStringMap(map, label) {\n    if (typeof map === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(map)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, label + \" must be a non-null object\");\n    }\n    Object.keys(map).forEach(function (key) {\n        if (!validator.isString(map[key])) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, label + \" must only contain string values\");\n        }\n    });\n}\n/**\n * Checks if the given WebpushConfig object is valid. The object must have valid headers and data.\n *\n * @param {WebpushConfig} config An object to be validated.\n */\nfunction validateWebpushConfig(config) {\n    if (typeof config === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(config)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'webpush must be a non-null object');\n    }\n    validateStringMap(config.headers, 'webpush.headers');\n    validateStringMap(config.data, 'webpush.data');\n}\n/**\n * Checks if the given ApnsConfig object is valid. The object must have valid headers and a\n * payload.\n *\n * @param {ApnsConfig} config An object to be validated.\n */\nfunction validateApnsConfig(config) {\n    if (typeof config === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(config)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns must be a non-null object');\n    }\n    validateStringMap(config.headers, 'apns.headers');\n    validateApnsPayload(config.payload);\n    validateApnsFcmOptions(config.fcmOptions);\n}\n/**\n * Checks if the given ApnsFcmOptions object is valid.\n *\n * @param {ApnsFcmOptions} fcmOptions An object to be validated.\n */\nfunction validateApnsFcmOptions(fcmOptions) {\n    if (typeof fcmOptions === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(fcmOptions)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n    }\n    if (typeof fcmOptions.imageUrl !== 'undefined' &&\n        !validator.isURL(fcmOptions.imageUrl)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'imageUrl must be a valid URL string');\n    }\n    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n    }\n    var propertyMappings = {\n        imageUrl: 'image',\n    };\n    Object.keys(propertyMappings).forEach(function (key) {\n        if (key in fcmOptions && propertyMappings[key] in fcmOptions) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Multiple specifications for \" + key + \" in ApnsFcmOptions\");\n        }\n    });\n    index_1.renameProperties(fcmOptions, propertyMappings);\n}\n/**\n * Checks if the given FcmOptions object is valid.\n *\n * @param {FcmOptions} fcmOptions An object to be validated.\n */\nfunction validateFcmOptions(fcmOptions) {\n    if (typeof fcmOptions === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(fcmOptions)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n    }\n    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n    }\n}\n/**\n * Checks if the given Notification object is valid.\n *\n * @param {Notification} notification An object to be validated.\n */\nfunction validateNotification(notification) {\n    if (typeof notification === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(notification)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification must be a non-null object');\n    }\n    if (typeof notification.imageUrl !== 'undefined' && !validator.isURL(notification.imageUrl)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification.imageUrl must be a valid URL string');\n    }\n    var propertyMappings = {\n        imageUrl: 'image',\n    };\n    Object.keys(propertyMappings).forEach(function (key) {\n        if (key in notification && propertyMappings[key] in notification) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Multiple specifications for \" + key + \" in Notification\");\n        }\n    });\n    index_1.renameProperties(notification, propertyMappings);\n}\n/**\n * Checks if the given ApnsPayload object is valid. The object must have a valid aps value.\n *\n * @param {ApnsPayload} payload An object to be validated.\n */\nfunction validateApnsPayload(payload) {\n    if (typeof payload === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(payload)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload must be a non-null object');\n    }\n    validateAps(payload.aps);\n}\n/**\n * Checks if the given Aps object is valid. The object must have a valid alert. If the validation\n * is successful, transforms the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {Aps} aps An object to be validated.\n */\nfunction validateAps(aps) {\n    if (typeof aps === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(aps)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps must be a non-null object');\n    }\n    validateApsAlert(aps.alert);\n    validateApsSound(aps.sound);\n    var propertyMappings = {\n        contentAvailable: 'content-available',\n        mutableContent: 'mutable-content',\n        threadId: 'thread-id',\n    };\n    Object.keys(propertyMappings).forEach(function (key) {\n        if (key in aps && propertyMappings[key] in aps) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Multiple specifications for \" + key + \" in Aps\");\n        }\n    });\n    index_1.renameProperties(aps, propertyMappings);\n    var contentAvailable = aps['content-available'];\n    if (typeof contentAvailable !== 'undefined' && contentAvailable !== 1) {\n        if (contentAvailable === true) {\n            aps['content-available'] = 1;\n        }\n        else {\n            delete aps['content-available'];\n        }\n    }\n    var mutableContent = aps['mutable-content'];\n    if (typeof mutableContent !== 'undefined' && mutableContent !== 1) {\n        if (mutableContent === true) {\n            aps['mutable-content'] = 1;\n        }\n        else {\n            delete aps['mutable-content'];\n        }\n    }\n}\nfunction validateApsSound(sound) {\n    if (typeof sound === 'undefined' || validator.isNonEmptyString(sound)) {\n        return;\n    }\n    else if (!validator.isNonNullObject(sound)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound must be a non-empty string or a non-null object');\n    }\n    if (!validator.isNonEmptyString(sound.name)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.name must be a non-empty string');\n    }\n    var volume = sound.volume;\n    if (typeof volume !== 'undefined') {\n        if (!validator.isNumber(volume)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be a number');\n        }\n        if (volume < 0 || volume > 1) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be in the interval [0, 1]');\n        }\n    }\n    var soundObject = sound;\n    var key = 'critical';\n    var critical = soundObject[key];\n    if (typeof critical !== 'undefined' && critical !== 1) {\n        if (critical === true) {\n            soundObject[key] = 1;\n        }\n        else {\n            delete soundObject[key];\n        }\n    }\n}\n/**\n * Checks if the given alert object is valid. Alert could be a string or a complex object.\n * If specified as an object, it must have valid localization parameters. If successful, transforms\n * the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {string | ApsAlert} alert An alert string or an object to be validated.\n */\nfunction validateApsAlert(alert) {\n    if (typeof alert === 'undefined' || validator.isString(alert)) {\n        return;\n    }\n    else if (!validator.isNonNullObject(alert)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert must be a string or a non-null object');\n    }\n    var apsAlert = alert;\n    if (validator.isNonEmptyArray(apsAlert.locArgs) &&\n        !validator.isNonEmptyString(apsAlert.locKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.locKey is required when specifying locArgs');\n    }\n    if (validator.isNonEmptyArray(apsAlert.titleLocArgs) &&\n        !validator.isNonEmptyString(apsAlert.titleLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.titleLocKey is required when specifying titleLocArgs');\n    }\n    if (validator.isNonEmptyArray(apsAlert.subtitleLocArgs) &&\n        !validator.isNonEmptyString(apsAlert.subtitleLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.subtitleLocKey is required when specifying subtitleLocArgs');\n    }\n    var propertyMappings = {\n        locKey: 'loc-key',\n        locArgs: 'loc-args',\n        titleLocKey: 'title-loc-key',\n        titleLocArgs: 'title-loc-args',\n        subtitleLocKey: 'subtitle-loc-key',\n        subtitleLocArgs: 'subtitle-loc-args',\n        actionLocKey: 'action-loc-key',\n        launchImage: 'launch-image',\n    };\n    index_1.renameProperties(apsAlert, propertyMappings);\n}\n/**\n * Checks if the given AndroidConfig object is valid. The object must have valid ttl, data,\n * and notification fields. If successful, transforms the input object by renaming keys to valid\n * Android keys. Also transforms the ttl value to the format expected by FCM service.\n *\n * @param {AndroidConfig} config An object to be validated.\n */\nfunction validateAndroidConfig(config) {\n    if (typeof config === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(config)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android must be a non-null object');\n    }\n    if (typeof config.ttl !== 'undefined') {\n        if (!validator.isNumber(config.ttl) || config.ttl < 0) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'TTL must be a non-negative duration in milliseconds');\n        }\n        var duration = transformMillisecondsToSecondsString(config.ttl);\n        config.ttl = duration;\n    }\n    validateStringMap(config.data, 'android.data');\n    validateAndroidNotification(config.notification);\n    validateAndroidFcmOptions(config.fcmOptions);\n    var propertyMappings = {\n        collapseKey: 'collapse_key',\n        restrictedPackageName: 'restricted_package_name',\n    };\n    index_1.renameProperties(config, propertyMappings);\n}\n/**\n * Checks if the given AndroidNotification object is valid. The object must have valid color and\n * localization parameters. If successful, transforms the input object by renaming keys to valid\n * Android keys.\n *\n * @param {AndroidNotification} notification An object to be validated.\n */\nfunction validateAndroidNotification(notification) {\n    if (typeof notification === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(notification)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification must be a non-null object');\n    }\n    if (typeof notification.color !== 'undefined' && !/^#[0-9a-fA-F]{6}$/.test(notification.color)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.color must be in the form #RRGGBB');\n    }\n    if (validator.isNonEmptyArray(notification.bodyLocArgs) &&\n        !validator.isNonEmptyString(notification.bodyLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.bodyLocKey is required when specifying bodyLocArgs');\n    }\n    if (validator.isNonEmptyArray(notification.titleLocArgs) &&\n        !validator.isNonEmptyString(notification.titleLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.titleLocKey is required when specifying titleLocArgs');\n    }\n    if (typeof notification.imageUrl !== 'undefined' &&\n        !validator.isURL(notification.imageUrl)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.imageUrl must be a valid URL string');\n    }\n    if (typeof notification.eventTimestamp !== 'undefined') {\n        if (!(notification.eventTimestamp instanceof Date)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.eventTimestamp must be a valid `Date` object');\n        }\n        // Convert timestamp to RFC3339 UTC \"Zulu\" format, example \"2014-10-02T15:01:23.045123456Z\"\n        var zuluTimestamp = notification.eventTimestamp.toISOString();\n        notification.eventTimestamp = zuluTimestamp;\n    }\n    if (typeof notification.vibrateTimingsMillis !== 'undefined') {\n        if (!validator.isNonEmptyArray(notification.vibrateTimingsMillis)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be a non-empty array of numbers');\n        }\n        var vibrateTimings_1 = [];\n        notification.vibrateTimingsMillis.forEach(function (value) {\n            if (!validator.isNumber(value) || value < 0) {\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be non-negative durations in milliseconds');\n            }\n            var duration = transformMillisecondsToSecondsString(value);\n            vibrateTimings_1.push(duration);\n        });\n        notification.vibrateTimingsMillis = vibrateTimings_1;\n    }\n    if (typeof notification.priority !== 'undefined') {\n        var priority = 'PRIORITY_' + notification.priority.toUpperCase();\n        notification.priority = priority;\n    }\n    if (typeof notification.visibility !== 'undefined') {\n        var visibility = notification.visibility.toUpperCase();\n        notification.visibility = visibility;\n    }\n    validateLightSettings(notification.lightSettings);\n    var propertyMappings = {\n        clickAction: 'click_action',\n        bodyLocKey: 'body_loc_key',\n        bodyLocArgs: 'body_loc_args',\n        titleLocKey: 'title_loc_key',\n        titleLocArgs: 'title_loc_args',\n        channelId: 'channel_id',\n        imageUrl: 'image',\n        eventTimestamp: 'event_time',\n        localOnly: 'local_only',\n        priority: 'notification_priority',\n        vibrateTimingsMillis: 'vibrate_timings',\n        defaultVibrateTimings: 'default_vibrate_timings',\n        defaultSound: 'default_sound',\n        lightSettings: 'light_settings',\n        defaultLightSettings: 'default_light_settings',\n        notificationCount: 'notification_count',\n    };\n    index_1.renameProperties(notification, propertyMappings);\n}\n/**\n * Checks if the given LightSettings object is valid. The object must have valid color and\n * light on/off duration parameters. If successful, transforms the input object by renaming\n * keys to valid Android keys.\n *\n * @param {LightSettings} lightSettings An object to be validated.\n */\nfunction validateLightSettings(lightSettings) {\n    if (typeof lightSettings === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(lightSettings)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings must be a non-null object');\n    }\n    if (!validator.isNumber(lightSettings.lightOnDurationMillis) || lightSettings.lightOnDurationMillis < 0) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOnDurationMillis must be a non-negative duration in milliseconds');\n    }\n    var durationOn = transformMillisecondsToSecondsString(lightSettings.lightOnDurationMillis);\n    lightSettings.lightOnDurationMillis = durationOn;\n    if (!validator.isNumber(lightSettings.lightOffDurationMillis) || lightSettings.lightOffDurationMillis < 0) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOffDurationMillis must be a non-negative duration in milliseconds');\n    }\n    var durationOff = transformMillisecondsToSecondsString(lightSettings.lightOffDurationMillis);\n    lightSettings.lightOffDurationMillis = durationOff;\n    if (!validator.isString(lightSettings.color) ||\n        (!/^#[0-9a-fA-F]{6}$/.test(lightSettings.color) && !/^#[0-9a-fA-F]{8}$/.test(lightSettings.color))) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.color must be in the form #RRGGBB or #RRGGBBAA format');\n    }\n    var colorString = lightSettings.color.length === 7 ? lightSettings.color + 'FF' : lightSettings.color;\n    var rgb = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/i.exec(colorString);\n    if (!rgb || rgb.length < 4) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INTERNAL_ERROR, 'regex to extract rgba values from ' + colorString + ' failed.');\n    }\n    var color = {\n        red: parseInt(rgb[1], 16) / 255.0,\n        green: parseInt(rgb[2], 16) / 255.0,\n        blue: parseInt(rgb[3], 16) / 255.0,\n        alpha: parseInt(rgb[4], 16) / 255.0,\n    };\n    lightSettings.color = color;\n    var propertyMappings = {\n        lightOnDurationMillis: 'light_on_duration',\n        lightOffDurationMillis: 'light_off_duration',\n    };\n    index_1.renameProperties(lightSettings, propertyMappings);\n}\n/**\n * Checks if the given AndroidFcmOptions object is valid.\n *\n * @param {AndroidFcmOptions} fcmOptions An object to be validated.\n */\nfunction validateAndroidFcmOptions(fcmOptions) {\n    if (typeof fcmOptions === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(fcmOptions)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n    }\n    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n    }\n}\n/**\n * Transforms milliseconds to the format expected by FCM service.\n * Returns the duration in seconds with up to nine fractional\n * digits, terminated by 's'. Example: \"3.5s\".\n *\n * @param {number} milliseconds The duration in milliseconds.\n * @return {string} The resulting formatted string in seconds with up to nine fractional\n * digits, terminated by 's'.\n */\nfunction transformMillisecondsToSecondsString(milliseconds) {\n    var duration;\n    var seconds = Math.floor(milliseconds / 1000);\n    var nanos = (milliseconds - seconds * 1000) * 1000000;\n    if (nanos > 0) {\n        var nanoString = nanos.toString();\n        while (nanoString.length < 9) {\n            nanoString = '0' + nanoString;\n        }\n        duration = seconds + \".\" + nanoString + \"s\";\n    }\n    else {\n        duration = seconds + \"s\";\n    }\n    return duration;\n}\n"]},"metadata":{},"sourceType":"script"}