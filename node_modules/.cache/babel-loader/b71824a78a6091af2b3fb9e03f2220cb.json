{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst validate_1 = require(\"./validate\");\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as a latitude/longitude pair.\n *\n * @class\n */\n\n\nclass GeoPoint {\n  /**\n   * Creates a [GeoPoint]{@link GeoPoint}.\n   *\n   * @param {number} latitude The latitude as a number between -90 and 90.\n   * @param {number} longitude The longitude as a number between -180 and 180.\n   *\n   * @example\n   * let data = {\n   *   google: new Firestore.GeoPoint(37.422, 122.084)\n   * };\n   *\n   * firestore.doc('col/doc').set(data).then(() => {\n   *   console.log(`Location is ${data.google.latitude}, ` +\n   *     `${data.google.longitude}`);\n   * });\n   */\n  constructor(latitude, longitude) {\n    validate_1.validateNumber('latitude', latitude, {\n      minValue: -90,\n      maxValue: 90\n    });\n    validate_1.validateNumber('longitude', longitude, {\n      minValue: -180,\n      maxValue: 180\n    });\n    this._latitude = latitude;\n    this._longitude = longitude;\n  }\n  /**\n   * The latitude as a number between -90 and 90.\n   *\n   * @type {number}\n   * @name GeoPoint#latitude\n   * @readonly\n   */\n\n\n  get latitude() {\n    return this._latitude;\n  }\n  /**\n   * The longitude as a number between -180 and 180.\n   *\n   * @type {number}\n   * @name GeoPoint#longitude\n   * @readonly\n   */\n\n\n  get longitude() {\n    return this._longitude;\n  }\n  /**\n   * Returns true if this `GeoPoint` is equal to the provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return {boolean} true if this `GeoPoint` is equal to the provided value.\n   */\n\n\n  isEqual(other) {\n    return this === other || other instanceof GeoPoint && this.latitude === other.latitude && this.longitude === other.longitude;\n  }\n  /**\n   * Converts the GeoPoint to a google.type.LatLng proto.\n   * @private\n   */\n\n\n  toProto() {\n    return {\n      geoPointValue: {\n        latitude: this.latitude,\n        longitude: this.longitude\n      }\n    };\n  }\n  /**\n   * Converts a google.type.LatLng proto to its GeoPoint representation.\n   * @private\n   */\n\n\n  static fromProto(proto) {\n    return new GeoPoint(proto.latitude || 0, proto.longitude || 0);\n  }\n\n}\n\nexports.GeoPoint = GeoPoint;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/firestore/build/src/geo-point.js"],"names":["Object","defineProperty","exports","value","validate_1","require","GeoPoint","constructor","latitude","longitude","validateNumber","minValue","maxValue","_latitude","_longitude","isEqual","other","toProto","geoPointValue","fromProto","proto"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,QAAN,CAAe;AACX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsB;AAC7BL,IAAAA,UAAU,CAACM,cAAX,CAA0B,UAA1B,EAAsCF,QAAtC,EAAgD;AAAEG,MAAAA,QAAQ,EAAE,CAAC,EAAb;AAAiBC,MAAAA,QAAQ,EAAE;AAA3B,KAAhD;AACAR,IAAAA,UAAU,CAACM,cAAX,CAA0B,WAA1B,EAAuCD,SAAvC,EAAkD;AAAEE,MAAAA,QAAQ,EAAE,CAAC,GAAb;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAAlD;AACA,SAAKC,SAAL,GAAiBL,QAAjB;AACA,SAAKM,UAAL,GAAkBL,SAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACgB,MAARD,QAAQ,GAAG;AACX,WAAO,KAAKK,SAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACiB,MAATJ,SAAS,GAAG;AACZ,WAAO,KAAKK,UAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX,WAAQ,SAASA,KAAT,IACHA,KAAK,YAAYV,QAAjB,IACG,KAAKE,QAAL,KAAkBQ,KAAK,CAACR,QAD3B,IAEG,KAAKC,SAAL,KAAmBO,KAAK,CAACP,SAHjC;AAIH;AACD;AACJ;AACA;AACA;;;AACIQ,EAAAA,OAAO,GAAG;AACN,WAAO;AACHC,MAAAA,aAAa,EAAE;AACXV,QAAAA,QAAQ,EAAE,KAAKA,QADJ;AAEXC,QAAAA,SAAS,EAAE,KAAKA;AAFL;AADZ,KAAP;AAMH;AACD;AACJ;AACA;AACA;;;AACoB,SAATU,SAAS,CAACC,KAAD,EAAQ;AACpB,WAAO,IAAId,QAAJ,CAAac,KAAK,CAACZ,QAAN,IAAkB,CAA/B,EAAkCY,KAAK,CAACX,SAAN,IAAmB,CAArD,CAAP;AACH;;AAzEU;;AA2EfP,OAAO,CAACI,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_1 = require(\"./validate\");\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as a latitude/longitude pair.\n *\n * @class\n */\nclass GeoPoint {\n    /**\n     * Creates a [GeoPoint]{@link GeoPoint}.\n     *\n     * @param {number} latitude The latitude as a number between -90 and 90.\n     * @param {number} longitude The longitude as a number between -180 and 180.\n     *\n     * @example\n     * let data = {\n     *   google: new Firestore.GeoPoint(37.422, 122.084)\n     * };\n     *\n     * firestore.doc('col/doc').set(data).then(() => {\n     *   console.log(`Location is ${data.google.latitude}, ` +\n     *     `${data.google.longitude}`);\n     * });\n     */\n    constructor(latitude, longitude) {\n        validate_1.validateNumber('latitude', latitude, { minValue: -90, maxValue: 90 });\n        validate_1.validateNumber('longitude', longitude, { minValue: -180, maxValue: 180 });\n        this._latitude = latitude;\n        this._longitude = longitude;\n    }\n    /**\n     * The latitude as a number between -90 and 90.\n     *\n     * @type {number}\n     * @name GeoPoint#latitude\n     * @readonly\n     */\n    get latitude() {\n        return this._latitude;\n    }\n    /**\n     * The longitude as a number between -180 and 180.\n     *\n     * @type {number}\n     * @name GeoPoint#longitude\n     * @readonly\n     */\n    get longitude() {\n        return this._longitude;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `GeoPoint` is equal to the provided value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof GeoPoint &&\n                this.latitude === other.latitude &&\n                this.longitude === other.longitude));\n    }\n    /**\n     * Converts the GeoPoint to a google.type.LatLng proto.\n     * @private\n     */\n    toProto() {\n        return {\n            geoPointValue: {\n                latitude: this.latitude,\n                longitude: this.longitude,\n            },\n        };\n    }\n    /**\n     * Converts a google.type.LatLng proto to its GeoPoint representation.\n     * @private\n     */\n    static fromProto(proto) {\n        return new GeoPoint(proto.latitude || 0, proto.longitude || 0);\n    }\n}\nexports.GeoPoint = GeoPoint;\n//# sourceMappingURL=geo-point.js.map"]},"metadata":{},"sourceType":"script"}