{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Method; // extends ReflectionObject\n\nvar ReflectionObject = require(\"./object\");\n\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(\"./util\");\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */\n\n\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n  /* istanbul ignore next */\n  if (util.isObject(requestStream)) {\n    options = requestStream;\n    requestStream = responseStream = undefined;\n  } else if (util.isObject(responseStream)) {\n    options = responseStream;\n    responseStream = undefined;\n  }\n  /* istanbul ignore if */\n\n\n  if (!(type === undefined || util.isString(type))) throw TypeError(\"type must be a string\");\n  /* istanbul ignore if */\n\n  if (!util.isString(requestType)) throw TypeError(\"requestType must be a string\");\n  /* istanbul ignore if */\n\n  if (!util.isString(responseType)) throw TypeError(\"responseType must be a string\");\n  ReflectionObject.call(this, name, options);\n  /**\n   * Method type.\n   * @type {string}\n   */\n\n  this.type = type || \"rpc\"; // toJSON\n\n  /**\n   * Request type.\n   * @type {string}\n   */\n\n  this.requestType = requestType; // toJSON, marker\n\n  /**\n   * Whether requests are streamed or not.\n   * @type {boolean|undefined}\n   */\n\n  this.requestStream = requestStream ? true : undefined; // toJSON\n\n  /**\n   * Response type.\n   * @type {string}\n   */\n\n  this.responseType = responseType; // toJSON\n\n  /**\n   * Whether responses are streamed or not.\n   * @type {boolean|undefined}\n   */\n\n  this.responseStream = responseStream ? true : undefined; // toJSON\n\n  /**\n   * Resolved request type.\n   * @type {Type|null}\n   */\n\n  this.resolvedRequestType = null;\n  /**\n   * Resolved response type.\n   * @type {Type|null}\n   */\n\n  this.resolvedResponseType = null;\n  /**\n   * Comment for this method\n   * @type {string|null}\n   */\n\n  this.comment = comment;\n  /**\n   * Options properly parsed into an object\n   */\n\n  this.parsedOptions = parsedOptions;\n}\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\n\n\nMethod.fromJSON = function fromJSON(name, json) {\n  return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\n\n\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"type\", this.type !== \"rpc\" &&\n  /* istanbul ignore next */\n  this.type || undefined, \"requestType\", this.requestType, \"requestStream\", this.requestStream, \"responseType\", this.responseType, \"responseStream\", this.responseStream, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined, \"parsedOptions\", this.parsedOptions]);\n};\n/**\n * @override\n */\n\n\nMethod.prototype.resolve = function resolve() {\n  /* istanbul ignore if */\n  if (this.resolved) return this;\n  this.resolvedRequestType = this.parent.lookupType(this.requestType);\n  this.resolvedResponseType = this.parent.lookupType(this.responseType);\n  return ReflectionObject.prototype.resolve.call(this);\n};","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/protobufjs/src/method.js"],"names":["module","exports","Method","ReflectionObject","require","prototype","Object","create","constructor","className","util","name","type","requestType","responseType","requestStream","responseStream","options","comment","parsedOptions","isObject","undefined","isString","TypeError","call","resolvedRequestType","resolvedResponseType","fromJSON","json","toJSON","toJSONOptions","keepComments","Boolean","toObject","resolve","resolved","parent","lookupType"],"mappings":"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","sourcesContent":["\"use strict\";\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(\"./util\");\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type)))\n        throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType))\n        throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType))\n        throw TypeError(\"responseType must be a string\");\n\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Options properly parsed into an object\n     */\n    this.parsedOptions = parsedOptions;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\"    , this.requestType,\n        \"requestStream\"  , this.requestStream,\n        \"responseType\"   , this.responseType,\n        \"responseStream\" , this.responseStream,\n        \"options\"        , this.options,\n        \"comment\"        , keepComments ? this.comment : undefined,\n        \"parsedOptions\"  , this.parsedOptions,\n    ]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n\n    /* istanbul ignore if */\n    if (this.resolved)\n        return this;\n\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n"]},"metadata":{},"sourceType":"script"}