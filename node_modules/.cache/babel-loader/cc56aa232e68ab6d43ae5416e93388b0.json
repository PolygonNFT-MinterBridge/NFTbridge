{"ast":null,"code":"// Packages\nvar retrier = require('retry');\n\nfunction retry(fn, opts) {\n  function run(resolve, reject) {\n    var options = opts || {}; // Default `randomize` to true\n\n    if (!('randomize' in options)) {\n      options.randomize = true;\n    }\n\n    var op = retrier.operation(options); // We allow the user to abort retrying\n    // this makes sense in the cases where\n    // knowledge is obtained that retrying\n    // would be futile (e.g.: auth errors)\n\n    function bail(err) {\n      reject(err || new Error('Aborted'));\n    }\n\n    function onError(err, num) {\n      if (err.bail) {\n        bail(err);\n        return;\n      }\n\n      if (!op.retry(err)) {\n        reject(op.mainError());\n      } else if (options.onRetry) {\n        options.onRetry(err, num);\n      }\n    }\n\n    function runAttempt(num) {\n      var val;\n\n      try {\n        val = fn(bail, num);\n      } catch (err) {\n        onError(err, num);\n        return;\n      }\n\n      Promise.resolve(val).then(resolve).catch(function catchIt(err) {\n        onError(err, num);\n      });\n    }\n\n    op.attempt(runAttempt);\n  }\n\n  return new Promise(run);\n}\n\nmodule.exports = retry;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/async-retry/lib/index.js"],"names":["retrier","require","retry","fn","opts","run","resolve","reject","options","randomize","op","operation","bail","err","Error","onError","num","mainError","onRetry","runAttempt","val","Promise","then","catch","catchIt","attempt","module","exports"],"mappings":"AAAA;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,SAASC,KAAT,CAAeC,EAAf,EAAmBC,IAAnB,EAAyB;AACvB,WAASC,GAAT,CAAaC,OAAb,EAAsBC,MAAtB,EAA8B;AAC5B,QAAIC,OAAO,GAAGJ,IAAI,IAAI,EAAtB,CAD4B,CAG5B;;AACA,QAAI,EAAE,eAAeI,OAAjB,CAAJ,EAA+B;AAC7BA,MAAAA,OAAO,CAACC,SAAR,GAAoB,IAApB;AACD;;AAED,QAAIC,EAAE,GAAGV,OAAO,CAACW,SAAR,CAAkBH,OAAlB,CAAT,CAR4B,CAU5B;AACA;AACA;AACA;;AAEA,aAASI,IAAT,CAAcC,GAAd,EAAmB;AACjBN,MAAAA,MAAM,CAACM,GAAG,IAAI,IAAIC,KAAJ,CAAU,SAAV,CAAR,CAAN;AACD;;AAED,aAASC,OAAT,CAAiBF,GAAjB,EAAsBG,GAAtB,EAA2B;AACzB,UAAIH,GAAG,CAACD,IAAR,EAAc;AACZA,QAAAA,IAAI,CAACC,GAAD,CAAJ;AACA;AACD;;AAED,UAAI,CAACH,EAAE,CAACR,KAAH,CAASW,GAAT,CAAL,EAAoB;AAClBN,QAAAA,MAAM,CAACG,EAAE,CAACO,SAAH,EAAD,CAAN;AACD,OAFD,MAEO,IAAIT,OAAO,CAACU,OAAZ,EAAqB;AAC1BV,QAAAA,OAAO,CAACU,OAAR,CAAgBL,GAAhB,EAAqBG,GAArB;AACD;AACF;;AAED,aAASG,UAAT,CAAoBH,GAApB,EAAyB;AACvB,UAAII,GAAJ;;AAEA,UAAI;AACFA,QAAAA,GAAG,GAAGjB,EAAE,CAACS,IAAD,EAAOI,GAAP,CAAR;AACD,OAFD,CAEE,OAAOH,GAAP,EAAY;AACZE,QAAAA,OAAO,CAACF,GAAD,EAAMG,GAAN,CAAP;AACA;AACD;;AAEDK,MAAAA,OAAO,CAACf,OAAR,CAAgBc,GAAhB,EACGE,IADH,CACQhB,OADR,EAEGiB,KAFH,CAES,SAASC,OAAT,CAAiBX,GAAjB,EAAsB;AAC3BE,QAAAA,OAAO,CAACF,GAAD,EAAMG,GAAN,CAAP;AACD,OAJH;AAKD;;AAEDN,IAAAA,EAAE,CAACe,OAAH,CAAWN,UAAX;AACD;;AAED,SAAO,IAAIE,OAAJ,CAAYhB,GAAZ,CAAP;AACD;;AAEDqB,MAAM,CAACC,OAAP,GAAiBzB,KAAjB","sourcesContent":["// Packages\nvar retrier = require('retry');\n\nfunction retry(fn, opts) {\n  function run(resolve, reject) {\n    var options = opts || {};\n\n    // Default `randomize` to true\n    if (!('randomize' in options)) {\n      options.randomize = true;\n    }\n\n    var op = retrier.operation(options);\n\n    // We allow the user to abort retrying\n    // this makes sense in the cases where\n    // knowledge is obtained that retrying\n    // would be futile (e.g.: auth errors)\n\n    function bail(err) {\n      reject(err || new Error('Aborted'));\n    }\n\n    function onError(err, num) {\n      if (err.bail) {\n        bail(err);\n        return;\n      }\n\n      if (!op.retry(err)) {\n        reject(op.mainError());\n      } else if (options.onRetry) {\n        options.onRetry(err, num);\n      }\n    }\n\n    function runAttempt(num) {\n      var val;\n\n      try {\n        val = fn(bail, num);\n      } catch (err) {\n        onError(err, num);\n        return;\n      }\n\n      Promise.resolve(val)\n        .then(resolve)\n        .catch(function catchIt(err) {\n          onError(err, num);\n        });\n    }\n\n    op.attempt(runAttempt);\n  }\n\n  return new Promise(run);\n}\n\nmodule.exports = retry;\n"]},"metadata":{},"sourceType":"script"}