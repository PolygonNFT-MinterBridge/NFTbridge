{"ast":null,"code":"var _jsxFileName = \"/Users/pulkitmittal/nft-bridge/NFTbridge/src/components/Form/FormMTE.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // material ui\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Button, CircularProgress } from \"@material-ui/core\"; // components\n\nimport ErrorBox from \"../UI/ErrorBox\";\nimport ResultModal from \"../UI/ResultModal\"; // web3\n\nimport CheckMaticConnection from \"./CheckConnection/CheckMaticConnection\";\nimport { useWeb3Context } from \"../../contexts/Web3Context\";\nimport { childChainPrimaryProvider } from \"../../utils/providers\";\nimport { burnERC721 } from \"../../utils/erc721\";\nimport { burnBatchERC1155 } from \"../../utils/erc1155\";\nimport { getMetadata } from \"../../utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FormMTE = props => {\n  _s();\n\n  const classes = useStyles();\n  const [triggerModal, setTriggerModal] = useState(false);\n\n  const openModal = () => {\n    setTriggerModal(true);\n  };\n\n  const {\n    inj_provider,\n    providerChainId,\n    account\n  } = useWeb3Context();\n  const [loading, setLoading] = useState(false);\n  const [previewLoading, setPreviewLoading] = useState(false);\n  const [burnAddr, setBurnAddr] = useState(\"\");\n  const [burnToken, setBurnToken] = useState([]);\n  const [burnTokenAmount, setBurnTokenAmount] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [checkBoxBurn, setCheckBoxBurn] = useState({\n    checkedA: false,\n    checkedB: false\n  });\n  const [previewData, setPreviewData] = useState({\n    token_url: \"\",\n    image: \"\",\n    name: \"\",\n    contract_name: \"\",\n    token_id: \"\",\n    description: \"\"\n  });\n  const [url, setUrl] = useState(\"https://explorer-mumbai.maticvigil.com/tx/\");\n  useEffect(() => {\n    if (providerChainId === 137) {\n      setUrl(\"https://explorer-mainnet.maticvigil.com/tx/\");\n    } else {\n      setUrl(\"https://explorer-mumbai.maticvigil.com/tx/\");\n    }\n  }, [providerChainId]);\n  useEffect(() => {\n    previewData.token_id && props.sendDataToFormSection(previewData);\n  });\n\n  const burn = async e => {\n    e.preventDefault();\n\n    try {\n      setLoading(true); // create pos client insatnce\n      // const acc = await inj_provider.eth.getAccounts();\n\n      const maticPOSClient = await childChainPrimaryProvider(inj_provider);\n      console.log(\"got pos\", maticPOSClient); // filter token id\n\n      let arr = burnToken.split(\",\").map(function (item) {\n        return parseInt(item, 10);\n      });\n      console.log(arr); // burn\n\n      let tx;\n\n      if (checkBoxBurn.checkedA === false) {\n        tx = await burnERC721(maticPOSClient, burnAddr, arr);\n      } else {\n        let amounts = burnTokenAmount.split(\",\").map(function (item) {\n          return parseInt(item, 10);\n        });\n        tx = await burnBatchERC1155(maticPOSClient, burnAddr, arr, amounts);\n      }\n\n      setResult(tx); // Update on Firebase \n\n      let oldData = {\n        txn: [],\n        nft721: [],\n        txnType: [],\n        burnedTxn: []\n      };\n      const snapshot = await props.db.collection('storeHash').doc(account);\n      const data = await snapshot.get();\n      console.log(data.data());\n\n      if (data.data() !== undefined) {\n        oldData = data.data();\n      }\n\n      const docRef = props.db.collection(\"storeHash\").doc(account);\n      await docRef.set({\n        txn: [...oldData.txn, tx],\n        nft721: [...oldData.nft721, !checkBoxBurn.checkedA],\n        txnType: [...oldData.txnType, 'exit'],\n        burnedTxn: [...oldData.burnedTxn, '']\n      });\n      setLoading(false);\n      openModal();\n    } catch (e) {\n      setError(e.toString());\n      if (e.message === \"Cannot read property 'eth' of undefined\") setError(\"Wallet not Connected\");else setError(e.message.substr(0, 70));\n      console.error(e.message);\n      setLoading(false);\n    }\n  };\n\n  const handleChangeBurn = event => {\n    setCheckBoxBurn({ ...checkBoxBurn,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const preview = async e => {\n    e.preventDefault();\n    setPreviewLoading(true);\n\n    try {\n      // filter token id\n      let arr = burnToken.split(\",\").map(function (item) {\n        return parseInt(item, 10);\n      });\n      console.log(arr);\n      const data = await getMetadata(providerChainId, burnAddr, arr[0]);\n\n      if (data.nft_data[0]) {\n        const {\n          contract_name\n        } = data;\n        const {\n          token_url,\n          token_id,\n          external_data\n        } = data.nft_data[0];\n        setPreviewData({\n          token_url,\n          token_id,\n          contract_name,\n          image: external_data === null || external_data === void 0 ? void 0 : external_data.image,\n          name: external_data === null || external_data === void 0 ? void 0 : external_data.name,\n          description: external_data === null || external_data === void 0 ? void 0 : external_data.description\n        });\n      }\n\n      setPreviewLoading(false);\n    } catch (e) {\n      console.error(e.message);\n\n      if (e.message === \"Cannot read property 'nft_data' of undefined\") {\n        setError(\"Data for this NFT not found. Make sure you are on Polygon network.\");\n      } else if (e.message === \"Cannot read property 'image' of null\") {\n        setError(\"\");\n      } else setError(e.message.substr(0, 70));\n\n      setPreviewLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ResultModal, {\n      maticToEth: true,\n      triggerModal: triggerModal,\n      setTriggerModal: setTriggerModal,\n      data: {\n        url: url,\n        address: result,\n        msg: \"Token is successfully burned. Please wait 30-40min to state sync. After that you can call exit from notification.\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CheckMaticConnection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.formContainer,\n      onSubmit: burn,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.inputContainer,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"token-address\",\n              children: \"Token address (on MATIC)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"0xd52a861...\",\n              value: burnAddr,\n              onChange: e => setBurnAddr(e.target.value),\n              required: true,\n              id: \"token-address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.inputContainer,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"token-id\",\n              children: [\"Token Ids \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"(without space with comma)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"string\",\n              placeholder: \"1,2,3\",\n              value: burnToken,\n              onChange: e => setBurnToken(e.target.value),\n              required: true,\n              id: \"token-id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes.label,\n            children: \"NFT Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: checkBoxBurn.checkedA,\n            onChange: handleChangeBurn,\n            name: \"checkedA\",\n            id: \"nft-type-mte\",\n            hidden: true,\n            className: classes.hiddenCheckbox\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nft-type-mte\",\n            className: classes.nftType,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"ERC721\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"ERC1155\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), checkBoxBurn.checkedA && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.inputContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"token-amount\",\n                children: [\"Token Amounts \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"(without space, with comma)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 35\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"string\",\n                placeholder: \"2,1,3\",\n                value: burnTokenAmount,\n                onChange: e => setBurnTokenAmount(e.target.value),\n                id: \"token-amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.btnContainer,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: loading,\n          children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n            className: `${classes.loading} ${classes.purple}`,\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), \"Burn\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: `${classes.btn} ${classes.filled}`,\n          disabled: previewLoading,\n          onClick: preview,\n          children: [previewLoading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n            className: `${classes.loading}`,\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this), \"Preview\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(ErrorBox, {\n        message: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FormMTE, \"RPhez6oQS3Gzrg4eOHIOcscyis8=\", false, function () {\n  return [useStyles, useWeb3Context];\n});\n\n_c = FormMTE;\nconst useStyles = makeStyles(theme => ({ // input and label styling is written in theme.js. Check the overrides object\n  ...theme.overrides.formStyle,\n  ...theme.overrides.modalStyle,\n  purple: {\n    color: \"#7533E2\"\n  }\n}));\nexport default FormMTE;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormMTE\");","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/src/components/Form/FormMTE.jsx"],"names":["React","useState","useEffect","makeStyles","Grid","Button","CircularProgress","ErrorBox","ResultModal","CheckMaticConnection","useWeb3Context","childChainPrimaryProvider","burnERC721","burnBatchERC1155","getMetadata","FormMTE","props","classes","useStyles","triggerModal","setTriggerModal","openModal","inj_provider","providerChainId","account","loading","setLoading","previewLoading","setPreviewLoading","burnAddr","setBurnAddr","burnToken","setBurnToken","burnTokenAmount","setBurnTokenAmount","result","setResult","error","setError","checkBoxBurn","setCheckBoxBurn","checkedA","checkedB","previewData","setPreviewData","token_url","image","name","contract_name","token_id","description","url","setUrl","sendDataToFormSection","burn","e","preventDefault","maticPOSClient","console","log","arr","split","map","item","parseInt","tx","amounts","oldData","txn","nft721","txnType","burnedTxn","snapshot","db","collection","doc","data","get","undefined","docRef","set","toString","message","substr","handleChangeBurn","event","target","checked","preview","nft_data","external_data","address","msg","formContainer","inputContainer","value","label","hiddenCheckbox","nftType","btnContainer","btn","purple","filled","theme","overrides","formStyle","modalStyle","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// material ui\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Button, CircularProgress } from \"@material-ui/core\";\n\n// components\nimport ErrorBox from \"../UI/ErrorBox\";\nimport ResultModal from \"../UI/ResultModal\";\n\n// web3\nimport CheckMaticConnection from \"./CheckConnection/CheckMaticConnection\";\nimport { useWeb3Context } from \"../../contexts/Web3Context\";\nimport { childChainPrimaryProvider } from \"../../utils/providers\";\nimport { burnERC721 } from \"../../utils/erc721\";\nimport { burnBatchERC1155 } from \"../../utils/erc1155\";\nimport { getMetadata } from \"../../utils/helpers\";\n\nconst FormMTE = (props) => {\n  const classes = useStyles();\n  const [triggerModal, setTriggerModal] = useState(false);\n\n  const openModal = () => {\n    setTriggerModal(true);\n  };\n\n  const { inj_provider, providerChainId, account } = useWeb3Context();\n\n  const [loading, setLoading] = useState(false);\n  const [previewLoading, setPreviewLoading] = useState(false);\n\n  const [burnAddr, setBurnAddr] = useState(\"\");\n  const [burnToken, setBurnToken] = useState([]);\n  const [burnTokenAmount, setBurnTokenAmount] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [checkBoxBurn, setCheckBoxBurn] = useState({\n    checkedA: false,\n    checkedB: false,\n  });\n  const [previewData, setPreviewData] = useState({\n    token_url: \"\",\n    image: \"\",\n    name: \"\",\n    contract_name: \"\",\n    token_id: \"\",\n    description: \"\",\n  });\n  \n  const [url, setUrl] = useState(\"https://explorer-mumbai.maticvigil.com/tx/\");\n  useEffect(() => {\n    if (providerChainId === 137) {\n      setUrl(\"https://explorer-mainnet.maticvigil.com/tx/\");\n    } else {\n      setUrl(\"https://explorer-mumbai.maticvigil.com/tx/\");\n    }\n  }, [providerChainId]);\n\n  useEffect(() => {\n    previewData.token_id && props.sendDataToFormSection(previewData);\n  });\n\n  const burn = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      // create pos client insatnce\n      // const acc = await inj_provider.eth.getAccounts();\n      const maticPOSClient = await childChainPrimaryProvider(inj_provider);\n      console.log(\"got pos\", maticPOSClient);\n\n      // filter token id\n      let arr = burnToken.split(\",\").map(function (item) {\n        return parseInt(item, 10);\n      });\n      console.log(arr);\n\n      // burn\n      let tx;\n      if (checkBoxBurn.checkedA === false) {\n        tx = await burnERC721(maticPOSClient, burnAddr, arr);\n      } else {\n        let amounts = burnTokenAmount.split(\",\").map(function (item) {\n          return parseInt(item, 10);\n        });\n        tx = await burnBatchERC1155(maticPOSClient, burnAddr, arr, amounts);\n      }\n      setResult(tx);\n\n      // Update on Firebase \n      let oldData = {\n        txn: [],\n        nft721: [],\n        txnType: [],\n        burnedTxn: []\n      };\n      const snapshot = await props.db.collection('storeHash').doc(account);\n      const data = await snapshot.get();\n      console.log(data.data());\n      if (data.data() !== undefined) {\n        oldData = data.data();\n      }\n      const docRef = props.db.collection(\"storeHash\").doc(account);\n      await docRef.set({\n        txn: [...oldData.txn, tx],\n        nft721: [...oldData.nft721, !checkBoxBurn.checkedA],\n        txnType: [...oldData.txnType, 'exit'],\n        burnedTxn: [...oldData.burnedTxn, '']\n      });\n\n      setLoading(false);\n      openModal();\n    } catch (e) {\n      setError(e.toString());\n      if (e.message === \"Cannot read property 'eth' of undefined\")\n        setError(\"Wallet not Connected\");\n      else setError(e.message.substr(0, 70));\n      console.error(e.message);\n      setLoading(false);\n    }\n  };\n\n  const handleChangeBurn = (event) => {\n    setCheckBoxBurn({\n      ...checkBoxBurn,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  const preview = async (e) => {\n    e.preventDefault();\n    setPreviewLoading(true);\n    try {\n      // filter token id\n      let arr = burnToken.split(\",\").map(function (item) {\n        return parseInt(item, 10);\n      });\n      console.log(arr);\n      const data = await getMetadata(providerChainId, burnAddr, arr[0]);\n      if (data.nft_data[0]) {\n        const { contract_name } = data;\n        const { token_url, token_id, external_data } = data.nft_data[0];\n        setPreviewData({\n          token_url,\n          token_id,\n          contract_name,\n          image: external_data?.image,\n          name: external_data?.name,\n          description: external_data?.description,\n        });\n      }\n      setPreviewLoading(false);\n    } catch (e) {\n      console.error(e.message);\n      if (e.message === \"Cannot read property 'nft_data' of undefined\") {\n        setError(\n          \"Data for this NFT not found. Make sure you are on Polygon network.\"\n        );\n      } else if (e.message === \"Cannot read property 'image' of null\") {\n        setError(\"\");\n      } else setError(e.message.substr(0, 70));\n      setPreviewLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <ResultModal\n        maticToEth\n        triggerModal={triggerModal}\n        setTriggerModal={setTriggerModal}\n        data={{ url: url, address: result, msg: \"Token is successfully burned. Please wait 30-40min to state sync. After that you can call exit from notification.\" }}\n      />\n      <CheckMaticConnection />\n      <form className={classes.formContainer} onSubmit={burn}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <div className={classes.inputContainer}>\n              <label htmlFor=\"token-address\">Token address (on MATIC)</label>\n              <input\n                type=\"text\"\n                placeholder=\"0xd52a861...\"\n                value={burnAddr}\n                onChange={(e) => setBurnAddr(e.target.value)}\n                required\n                id=\"token-address\"\n              />\n            </div>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <div className={classes.inputContainer}>\n              <label htmlFor=\"token-id\">\n                Token Ids <span>(without space with comma)</span>\n              </label>\n              <input\n                type=\"string\"\n                placeholder=\"1,2,3\"\n                value={burnToken}\n                onChange={(e) => setBurnToken(e.target.value)}\n                required\n                id=\"token-id\"\n              />\n            </div>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <p className={classes.label}>NFT Type</p>\n            <input\n              type=\"checkbox\"\n              checked={checkBoxBurn.checkedA}\n              onChange={handleChangeBurn}\n              name=\"checkedA\"\n              id=\"nft-type-mte\"\n              hidden\n              className={classes.hiddenCheckbox}\n            />\n            <label htmlFor=\"nft-type-mte\" className={classes.nftType}>\n              <div>ERC721</div>\n              <div>ERC1155</div>\n            </label>\n          </Grid>\n          {checkBoxBurn.checkedA && (\n            <>\n              <Grid item xs={12} md={6}>\n                <div className={classes.inputContainer}>\n                  <label htmlFor=\"token-amount\">\n                    Token Amounts <span>(without space, with comma)</span>\n                  </label>\n                  <input\n                    type=\"string\"\n                    placeholder=\"2,1,3\"\n                    value={burnTokenAmount}\n                    onChange={(e) => setBurnTokenAmount(e.target.value)}\n                    id=\"token-amount\"\n                  />\n                </div>\n              </Grid>\n            </>\n          )}\n        </Grid>\n\n        <div className={classes.btnContainer}>\n          <Button type=\"submit\" className={classes.btn} disabled={loading}>\n            {loading && (\n              <CircularProgress\n                className={`${classes.loading} ${classes.purple}`}\n                size={24}\n              />\n            )}\n            Burn\n          </Button>\n           <Button\n            className={`${classes.btn} ${classes.filled}`}\n            disabled={previewLoading}\n            onClick={preview}\n          >\n            {previewLoading && (\n              <CircularProgress className={`${classes.loading}`} size={24} />\n            )}\n            Preview\n          </Button> \n        </div>\n        {/* error display */}\n        {error && <ErrorBox message={error} />}\n      </form>\n    </>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  // input and label styling is written in theme.js. Check the overrides object\n  ...theme.overrides.formStyle,\n  ...theme.overrides.modalStyle,\n  purple: {\n    color: \"#7533E2\",\n  },\n}));\n\nexport default FormMTE;\n"]},"metadata":{},"sourceType":"module"}