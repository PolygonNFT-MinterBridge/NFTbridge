{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Notification = void 0;\n\nconst common_1 = require(\"@google-cloud/common\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * The API-formatted resource description of the notification.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Notification#metadata\n * @type {object}\n */\n\n/**\n * A Notification object is created from your {@link Bucket} object using\n * {@link Bucket#notification}. Use it to interact with Cloud Pub/Sub\n * notifications.\n *\n * @see [Cloud Pub/Sub Notifications for Google Cloud Storage]{@link https://cloud.google.com/storage/docs/pubsub-notifications}\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket The bucket instance this notification is attached to.\n * @param {string} id The ID of the notification.\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const myBucket = storage.bucket('my-bucket');\n *\n * const notification = myBucket.notification('1');\n */\n\n\nclass Notification extends common_1.ServiceObject {\n  constructor(bucket, id) {\n    const methods = {\n      /**\n       * Creates a notification subscription for the bucket.\n       *\n       * @see [Notifications: insert]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert}\n       * @method Notification#exists\n       *\n       * @param {Topic|string} topic The Cloud PubSub topic to which this\n       *     subscription publishes. If the project ID is omitted, the current\n       *     project ID will be used.\n       *\n       *     Acceptable formats are:\n       *     - `projects/grape-spaceship-123/topics/my-topic`\n       *\n       *     - `my-topic`\n       * @param {CreateNotificationRequest} [options] Metadata to set for\n       *     the notification.\n       * @param {CreateNotificationCallback} [callback] Callback function.\n       * @returns {Promise<CreateNotificationResponse>}\n       * @throws {Error} If a valid topic is not provided.\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.create(function(err, notification, apiResponse) {\n       *   if (!err) {\n       *     // The notification was created successfully.\n       *   }\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.create().then(function(data) {\n       *   const notification = data[0];\n       *   const apiResponse = data[1];\n       * });\n       */\n      create: true,\n\n      /**\n       * @typedef {array} NotificationExistsResponse\n       * @property {boolean} 0 Whether the notification exists or not.\n       */\n\n      /**\n       * @callback NotificationExistsCallback\n       * @param {?Error} err Request error, if any.\n       * @param {boolean} exists Whether the notification exists or not.\n       */\n\n      /**\n       * Check if the notification exists.\n       *\n       * @method Notification#exists\n       * @param {NotificationExistsCallback} [callback] Callback function.\n       * @returns {Promise<NotificationExistsResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.exists(function(err, exists) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.exists().then(function(data) {\n       *   const exists = data[0];\n       * });\n       */\n      exists: true\n    };\n    super({\n      parent: bucket,\n      baseUrl: '/notificationConfigs',\n      id: id.toString(),\n      createMethod: bucket.createNotification.bind(bucket),\n      methods\n    });\n  }\n  /**\n   * @typedef {array} DeleteNotificationResponse\n   * @property {object} 0 The full API response.\n   */\n\n  /**\n   * Permanently deletes a notification subscription.\n   *\n   * @see [Notifications: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete}\n   *\n   * @param {object} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {DeleteNotificationCallback} [callback] Callback function.\n   * @returns {Promise<DeleteNotificationResponse>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   * const notification = myBucket.notification('1');\n   *\n   * notification.delete(function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * notification.delete().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   *\n   * @example <caption>include:samples/notifications.js</caption>\n   * region_tag:storage_delete_notification\n   * Another example:\n   */\n\n\n  delete(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    this.request({\n      method: 'DELETE',\n      uri: '',\n      qs: options\n    }, callback || common_1.util.noop);\n  }\n  /**\n   * Get a notification and its metadata if it exists.\n   *\n   * @see [Notifications: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get}\n   *\n   * @param {object} [options] Configuration options.\n   *     See {@link Bucket#createNotification} for create options.\n   * @param {boolean} [options.autoCreate] Automatically create the object if\n   *     it does not exist. Default: `false`.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {GetNotificationCallback} [callback] Callback function.\n   * @return {Promise<GetNotificationCallback>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   * const notification = myBucket.notification('1');\n   *\n   * notification.get(function(err, notification, apiResponse) {\n   *   // `notification.metadata` has been populated.\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * notification.get().then(function(data) {\n   *   const notification = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  get(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    const autoCreate = options.autoCreate;\n    delete options.autoCreate;\n\n    const onCreate = (err, notification, apiResponse) => {\n      if (err) {\n        if (err.code === 409) {\n          this.get(options, callback);\n          return;\n        }\n\n        callback(err, null, apiResponse);\n        return;\n      }\n\n      callback(null, notification, apiResponse);\n    };\n\n    this.getMetadata(options, (err, metadata) => {\n      if (err) {\n        if (err.code === 404 && autoCreate) {\n          const args = [];\n\n          if (Object.keys(options).length > 0) {\n            args.push(options);\n          }\n\n          args.push(onCreate); // eslint-disable-next-line\n\n          this.create.apply(this, args);\n          return;\n        }\n\n        callback(err, null, metadata);\n        return;\n      }\n\n      callback(null, this, metadata);\n    });\n  }\n  /**\n   * Get the notification's metadata.\n   *\n   * @see [Notifications: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get}\n   *\n   * @param {object} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {GetNotificationMetadataCallback} [callback] Callback function.\n   * @returns {Promise<GetNotificationMetadataResponse>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   * const notification = myBucket.notification('1');\n   *\n   * notification.getMetadata(function(err, metadata, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * notification.getMetadata().then(function(data) {\n   *   const metadata = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * @example <caption>include:samples/notifications.js</caption>\n   * region_tag:storage_notifications_get_metadata\n   * Another example:\n   */\n\n\n  getMetadata(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    this.request({\n      uri: '',\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      this.metadata = resp;\n      callback(null, this.metadata, resp);\n    });\n  }\n\n}\n\nexports.Notification = Notification;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Notification);","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/storage/build/src/notification.js"],"names":["Object","defineProperty","exports","value","Notification","common_1","require","promisify_1","ServiceObject","constructor","bucket","id","methods","create","exists","parent","baseUrl","toString","createMethod","createNotification","bind","delete","optionsOrCallback","callback","options","request","method","uri","qs","util","noop","get","autoCreate","onCreate","err","notification","apiResponse","code","getMetadata","metadata","args","keys","length","push","apply","resp","promisifyAll"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,yBAAD,CAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,YAAN,SAA2BC,QAAQ,CAACG,aAApC,CAAkD;AAC9CC,EAAAA,WAAW,CAACC,MAAD,EAASC,EAAT,EAAa;AACpB,UAAMC,OAAO,GAAG;AACZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,MAAM,EAAE,IAzCI;;AA0CZ;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,MAAM,EAAE;AAzEI,KAAhB;AA2EA,UAAM;AACFC,MAAAA,MAAM,EAAEL,MADN;AAEFM,MAAAA,OAAO,EAAE,sBAFP;AAGFL,MAAAA,EAAE,EAAEA,EAAE,CAACM,QAAH,EAHF;AAIFC,MAAAA,YAAY,EAAER,MAAM,CAACS,kBAAP,CAA0BC,IAA1B,CAA+BV,MAA/B,CAJZ;AAKFE,MAAAA;AALE,KAAN;AAOH;AACD;AACJ;AACA;AACA;;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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Notification = void 0;\nconst common_1 = require(\"@google-cloud/common\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * The API-formatted resource description of the notification.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Notification#metadata\n * @type {object}\n */\n/**\n * A Notification object is created from your {@link Bucket} object using\n * {@link Bucket#notification}. Use it to interact with Cloud Pub/Sub\n * notifications.\n *\n * @see [Cloud Pub/Sub Notifications for Google Cloud Storage]{@link https://cloud.google.com/storage/docs/pubsub-notifications}\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket The bucket instance this notification is attached to.\n * @param {string} id The ID of the notification.\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const myBucket = storage.bucket('my-bucket');\n *\n * const notification = myBucket.notification('1');\n */\nclass Notification extends common_1.ServiceObject {\n    constructor(bucket, id) {\n        const methods = {\n            /**\n             * Creates a notification subscription for the bucket.\n             *\n             * @see [Notifications: insert]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert}\n             * @method Notification#exists\n             *\n             * @param {Topic|string} topic The Cloud PubSub topic to which this\n             *     subscription publishes. If the project ID is omitted, the current\n             *     project ID will be used.\n             *\n             *     Acceptable formats are:\n             *     - `projects/grape-spaceship-123/topics/my-topic`\n             *\n             *     - `my-topic`\n             * @param {CreateNotificationRequest} [options] Metadata to set for\n             *     the notification.\n             * @param {CreateNotificationCallback} [callback] Callback function.\n             * @returns {Promise<CreateNotificationResponse>}\n             * @throws {Error} If a valid topic is not provided.\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.create(function(err, notification, apiResponse) {\n             *   if (!err) {\n             *     // The notification was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.create().then(function(data) {\n             *   const notification = data[0];\n             *   const apiResponse = data[1];\n             * });\n             */\n            create: true,\n            /**\n             * @typedef {array} NotificationExistsResponse\n             * @property {boolean} 0 Whether the notification exists or not.\n             */\n            /**\n             * @callback NotificationExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the notification exists or not.\n             */\n            /**\n             * Check if the notification exists.\n             *\n             * @method Notification#exists\n             * @param {NotificationExistsCallback} [callback] Callback function.\n             * @returns {Promise<NotificationExistsResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             */\n            exists: true,\n        };\n        super({\n            parent: bucket,\n            baseUrl: '/notificationConfigs',\n            id: id.toString(),\n            createMethod: bucket.createNotification.bind(bucket),\n            methods,\n        });\n    }\n    /**\n     * @typedef {array} DeleteNotificationResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * Permanently deletes a notification subscription.\n     *\n     * @see [Notifications: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete}\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {DeleteNotificationCallback} [callback] Callback function.\n     * @returns {Promise<DeleteNotificationResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     * const notification = myBucket.notification('1');\n     *\n     * notification.delete(function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * notification.delete().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * @example <caption>include:samples/notifications.js</caption>\n     * region_tag:storage_delete_notification\n     * Another example:\n     */\n    delete(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.request({\n            method: 'DELETE',\n            uri: '',\n            qs: options,\n        }, callback || common_1.util.noop);\n    }\n    /**\n     * Get a notification and its metadata if it exists.\n     *\n     * @see [Notifications: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get}\n     *\n     * @param {object} [options] Configuration options.\n     *     See {@link Bucket#createNotification} for create options.\n     * @param {boolean} [options.autoCreate] Automatically create the object if\n     *     it does not exist. Default: `false`.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetNotificationCallback} [callback] Callback function.\n     * @return {Promise<GetNotificationCallback>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     * const notification = myBucket.notification('1');\n     *\n     * notification.get(function(err, notification, apiResponse) {\n     *   // `notification.metadata` has been populated.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * notification.get().then(function(data) {\n     *   const notification = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    get(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const autoCreate = options.autoCreate;\n        delete options.autoCreate;\n        const onCreate = (err, notification, apiResponse) => {\n            if (err) {\n                if (err.code === 409) {\n                    this.get(options, callback);\n                    return;\n                }\n                callback(err, null, apiResponse);\n                return;\n            }\n            callback(null, notification, apiResponse);\n        };\n        this.getMetadata(options, (err, metadata) => {\n            if (err) {\n                if (err.code === 404 && autoCreate) {\n                    const args = [];\n                    if (Object.keys(options).length > 0) {\n                        args.push(options);\n                    }\n                    args.push(onCreate);\n                    // eslint-disable-next-line\n                    this.create.apply(this, args);\n                    return;\n                }\n                callback(err, null, metadata);\n                return;\n            }\n            callback(null, this, metadata);\n        });\n    }\n    /**\n     * Get the notification's metadata.\n     *\n     * @see [Notifications: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get}\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetNotificationMetadataCallback} [callback] Callback function.\n     * @returns {Promise<GetNotificationMetadataResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     * const notification = myBucket.notification('1');\n     *\n     * notification.getMetadata(function(err, metadata, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * notification.getMetadata().then(function(data) {\n     *   const metadata = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/notifications.js</caption>\n     * region_tag:storage_notifications_get_metadata\n     * Another example:\n     */\n    getMetadata(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.request({\n            uri: '',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            this.metadata = resp;\n            callback(null, this.metadata, resp);\n        });\n    }\n}\nexports.Notification = Notification;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Notification);\n//# sourceMappingURL=notification.js.map"]},"metadata":{},"sourceType":"script"}