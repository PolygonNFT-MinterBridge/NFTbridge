{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* global window */\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/firestore_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./firestore_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL\n *  document database that simplifies storing, syncing, and querying data for\n *  your mobile, web, and IoT apps at global scale. Its client libraries provide\n *  live synchronization and offline support, while its security features and\n *  integrations with Firebase and Google Cloud Platform (GCP) accelerate\n *  building truly serverless apps.\n * @class\n * @memberof v1\n */\n\n\nclass FirestoreClient {\n  /**\n   * Construct an instance of FirestoreClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n      partitionQuery: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'partitions'),\n      listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds')\n    }; // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n\n    this.descriptors.stream = {\n      batchGetDocuments: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n      runQuery: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n      write: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n      listen: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING)\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1.Firestore', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.firestoreStub) {\n      return this.firestoreStub;\n    } // Put together the \"service stub\" for\n    // google.firestore.v1.Firestore.\n\n\n    this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.firestore.v1.Firestore') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.firestore.v1.Firestore, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const firestoreStubMethods = ['getDocument', 'listDocuments', 'updateDocument', 'deleteDocument', 'batchGetDocuments', 'beginTransaction', 'commit', 'rollback', 'runQuery', 'partitionQuery', 'write', 'listen', 'listCollectionIds', 'batchWrite', 'createDocument'];\n\n    for (const methodName of firestoreStubMethods) {\n      const callPromise = this.firestoreStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || this.descriptors.stream[methodName] || undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.firestoreStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Gets a single document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The resource name of the Document to get. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If the document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads the document in a transaction.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads the version of the document at the given time.\n   *   This may not be older than 270 seconds.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getDocument(request);\n   */\n\n\n  getDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getDocument(request, options, callback);\n  }\n  /**\n   * Updates or inserts a document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.firestore.v1.Document} request.document\n   *   Required. The updated document.\n   *   Creates the document if it does not already exist.\n   * @param {google.firestore.v1.DocumentMask} request.updateMask\n   *   The fields to update.\n   *   None of the field paths in the mask may contain a reserved name.\n   *\n   *   If the document exists on the server and has fields not referenced in the\n   *   mask, they are left unchanged.\n   *   Fields referenced in the mask, but not present in the input document, are\n   *   deleted from the document on the server.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If the document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {google.firestore.v1.Precondition} request.currentDocument\n   *   An optional precondition on the document.\n   *   The request will fail if this is set and not met by the target document.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.updateDocument(request);\n   */\n\n\n  updateDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'document.name': request.document.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updateDocument(request, options, callback);\n  }\n  /**\n   * Deletes a document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The resource name of the Document to delete. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   * @param {google.firestore.v1.Precondition} request.currentDocument\n   *   An optional precondition on the document.\n   *   The request will fail if this is set and not met by the target document.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.deleteDocument(request);\n   */\n\n\n  deleteDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteDocument(request, options, callback);\n  }\n  /**\n   * Starts a new transaction.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {google.firestore.v1.TransactionOptions} request.options\n   *   The options for the transaction.\n   *   Defaults to a read-write transaction.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [BeginTransactionResponse]{@link google.firestore.v1.BeginTransactionResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.beginTransaction(request);\n   */\n\n\n  beginTransaction(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.beginTransaction(request, options, callback);\n  }\n  /**\n   * Commits a transaction, while optionally updating documents.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {number[]} request.writes\n   *   The writes to apply.\n   *\n   *   Always executed atomically and in order.\n   * @param {Buffer} request.transaction\n   *   If set, applies all writes in this transaction, and commits it.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [CommitResponse]{@link google.firestore.v1.CommitResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.commit(request);\n   */\n\n\n  commit(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.commit(request, options, callback);\n  }\n  /**\n   * Rolls back a transaction.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {Buffer} request.transaction\n   *   Required. The transaction to roll back.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.rollback(request);\n   */\n\n\n  rollback(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.rollback(request, options, callback);\n  }\n  /**\n   * Applies a batch of write operations.\n   *\n   * The BatchWrite method does not apply the write operations atomically\n   * and can apply them out of order. Method does not allow more than one write\n   * per document. Each write succeeds or fails independently. See the\n   * {@link google.firestore.v1.BatchWriteResponse|BatchWriteResponse} for the success status of each write.\n   *\n   * If you require an atomically applied set of writes, use\n   * {@link google.firestore.v1.Firestore.Commit|Commit} instead.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {number[]} request.writes\n   *   The writes to apply.\n   *\n   *   Method does not apply writes atomically and does not guarantee ordering.\n   *   Each write succeeds or fails independently. You cannot write to the same\n   *   document more than once per request.\n   * @param {number[]} request.labels\n   *   Labels associated with this batch write.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [BatchWriteResponse]{@link google.firestore.v1.BatchWriteResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.batchWrite(request);\n   */\n\n\n  batchWrite(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.batchWrite(request, options, callback);\n  }\n  /**\n   * Creates a new document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource. For example:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`\n   * @param {string} request.collectionId\n   *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.\n   * @param {string} request.documentId\n   *   The client-assigned document ID to use for this document.\n   *\n   *   Optional. If not specified, an ID will be assigned by the service.\n   * @param {google.firestore.v1.Document} request.document\n   *   Required. The document to create. `name` must not be set.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If the document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.createDocument(request);\n   */\n\n\n  createDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createDocument(request, options, callback);\n  }\n  /**\n   * Gets multiple documents.\n   *\n   * Documents returned by this method are not guaranteed to be returned in the\n   * same order that they were requested.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.database\n   *   Required. The database name. In the format:\n   *   `projects/{project_id}/databases/{database_id}`.\n   * @param {string[]} request.documents\n   *   The names of the documents to retrieve. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   The request will fail if any of the document is not a child resource of the\n   *   given `database`. Duplicate names will be elided.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If a document has a field that is not present in this mask, that field will\n   *   not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n   *   Starts a new transaction and reads the documents.\n   *   Defaults to a read-only transaction.\n   *   The new transaction ID will be returned as the first response in the\n   *   stream.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 270 seconds.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits [BatchGetDocumentsResponse]{@link google.firestore.v1.BatchGetDocumentsResponse} on 'data' event.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)\n   *   for more details and examples.\n   * @example\n   * const stream = client.batchGetDocuments(request);\n   * stream.on('data', (response) => { ... });\n   * stream.on('end', () => { ... });\n   */\n\n\n  batchGetDocuments(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      database: request.database || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.batchGetDocuments(request, options);\n  }\n  /**\n   * Runs a query.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents` or\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n   *   A structured query.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n   *   Starts a new transaction and reads the documents.\n   *   Defaults to a read-only transaction.\n   *   The new transaction ID will be returned as the first response in the\n   *   stream.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 270 seconds.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits [RunQueryResponse]{@link google.firestore.v1.RunQueryResponse} on 'data' event.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)\n   *   for more details and examples.\n   * @example\n   * const stream = client.runQuery(request);\n   * stream.on('data', (response) => { ... });\n   * stream.on('end', () => { ... });\n   */\n\n\n  runQuery(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.runQuery(request, options);\n  }\n  /**\n   * Streams batches of document updates and deletes, in order.\n   *\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing [WriteRequest]{@link google.firestore.v1.WriteRequest} for write() method, and\n   *   will emit objects representing [WriteResponse]{@link google.firestore.v1.WriteResponse} on 'data' event asynchronously.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)\n   *   for more details and examples.\n   * @example\n   * const stream = client.write();\n   * stream.on('data', (response) => { ... });\n   * stream.on('end', () => { ... });\n   * stream.write(request);\n   * stream.end();\n   */\n\n\n  write(options) {\n    this.initialize();\n    return this.innerApiCalls.write({}, options);\n  }\n  /**\n   * Listens to changes.\n   *\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing [ListenRequest]{@link google.firestore.v1.ListenRequest} for write() method, and\n   *   will emit objects representing [ListenResponse]{@link google.firestore.v1.ListenResponse} on 'data' event asynchronously.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)\n   *   for more details and examples.\n   * @example\n   * const stream = client.listen();\n   * stream.on('data', (response) => { ... });\n   * stream.on('end', () => { ... });\n   * stream.write(request);\n   * stream.end();\n   */\n\n\n  listen(options) {\n    this.initialize();\n    return this.innerApiCalls.listen({}, options);\n  }\n  /**\n   * Lists documents.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents` or\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {string} request.collectionId\n   *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n   *   or `messages`.\n   * @param {number} request.pageSize\n   *   The maximum number of documents to return.\n   * @param {string} request.pageToken\n   *   The `next_page_token` value returned from a previous List request, if any.\n   * @param {string} request.orderBy\n   *   The order to sort results by. For example: `priority desc, name`.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If a document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 270 seconds.\n   * @param {boolean} request.showMissing\n   *   If the list should show missing documents. A missing document is a\n   *   document that does not exist but has sub-documents. These documents will\n   *   be returned with a key but will not have fields, {@link google.firestore.v1.Document.create_time|Document.create_time},\n   *   or {@link google.firestore.v1.Document.update_time|Document.update_time} set.\n   *\n   *   Requests with `show_missing` may not specify `where` or\n   *   `order_by`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Document]{@link google.firestore.v1.Document}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listDocumentsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listDocuments(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listDocuments(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents` or\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {string} request.collectionId\n   *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n   *   or `messages`.\n   * @param {number} request.pageSize\n   *   The maximum number of documents to return.\n   * @param {string} request.pageToken\n   *   The `next_page_token` value returned from a previous List request, if any.\n   * @param {string} request.orderBy\n   *   The order to sort results by. For example: `priority desc, name`.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If a document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 270 seconds.\n   * @param {boolean} request.showMissing\n   *   If the list should show missing documents. A missing document is a\n   *   document that does not exist but has sub-documents. These documents will\n   *   be returned with a key but will not have fields, {@link google.firestore.v1.Document.create_time|Document.create_time},\n   *   or {@link google.firestore.v1.Document.update_time|Document.update_time} set.\n   *\n   *   Requests with `show_missing` may not specify `where` or\n   *   `order_by`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Document]{@link google.firestore.v1.Document} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listDocumentsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listDocumentsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\n  }\n  /**\n   * Equivalent to `listDocuments`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents` or\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents` or\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {string} request.collectionId\n   *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n   *   or `messages`.\n   * @param {number} request.pageSize\n   *   The maximum number of documents to return.\n   * @param {string} request.pageToken\n   *   The `next_page_token` value returned from a previous List request, if any.\n   * @param {string} request.orderBy\n   *   The order to sort results by. For example: `priority desc, name`.\n   * @param {google.firestore.v1.DocumentMask} request.mask\n   *   The fields to return. If not set, returns all fields.\n   *\n   *   If a document has a field that is not present in this mask, that field\n   *   will not be returned in the response.\n   * @param {Buffer} request.transaction\n   *   Reads documents in a transaction.\n   * @param {google.protobuf.Timestamp} request.readTime\n   *   Reads documents as they were at the given time.\n   *   This may not be older than 270 seconds.\n   * @param {boolean} request.showMissing\n   *   If the list should show missing documents. A missing document is a\n   *   document that does not exist but has sub-documents. These documents will\n   *   be returned with a key but will not have fields, {@link google.firestore.v1.Document.create_time|Document.create_time},\n   *   or {@link google.firestore.v1.Document.update_time|Document.update_time} set.\n   *\n   *   Requests with `show_missing` may not specify `where` or\n   *   `order_by`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Document]{@link google.firestore.v1.Document}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listDocumentsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listDocumentsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\n  }\n  /**\n   * Partitions a query by returning partition cursors that can be used to run\n   * the query in parallel. The returned partition cursors are split points that\n   * can be used by RunQuery as starting/end points for the query results.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents`.\n   *   Document resource names are not supported; only database resource names\n   *   can be specified.\n   * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n   *   A structured query.\n   *   Query must specify collection with all descendants and be ordered by name\n   *   ascending. Other filters, order bys, limits, offsets, and start/end\n   *   cursors are not supported.\n   * @param {number} request.partitionCount\n   *   The desired maximum number of partition points.\n   *   The partitions may be returned across multiple pages of results.\n   *   The number must be positive. The actual number of partitions\n   *   returned may be fewer.\n   *\n   *   For example, this may be set to one fewer than the number of parallel\n   *   queries to be run, or in running a data pipeline job, one fewer than the\n   *   number of workers or compute instances available.\n   * @param {string} request.pageToken\n   *   The `next_page_token` value returned from a previous call to\n   *   PartitionQuery that may be used to get an additional set of results.\n   *   There are no ordering guarantees between sets of results. Thus, using\n   *   multiple sets of results will require merging the different result sets.\n   *\n   *   For example, two subsequent calls using a page_token may return:\n   *\n   *    * cursor B, cursor M, cursor Q\n   *    * cursor A, cursor U, cursor W\n   *\n   *   To obtain a complete result set ordered with respect to the results of the\n   *   query supplied to PartitionQuery, the results sets should be merged:\n   *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n   * @param {number} request.pageSize\n   *   The maximum number of partitions to return in this call, subject to\n   *   `partition_count`.\n   *\n   *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n   *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n   *   if more results exist. A second call to PartitionQuery will return up to\n   *   2 partitions, to complete the total of 10 specified in `partition_count`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Cursor]{@link google.firestore.v1.Cursor}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `partitionQueryAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  partitionQuery(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.partitionQuery(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents`.\n   *   Document resource names are not supported; only database resource names\n   *   can be specified.\n   * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n   *   A structured query.\n   *   Query must specify collection with all descendants and be ordered by name\n   *   ascending. Other filters, order bys, limits, offsets, and start/end\n   *   cursors are not supported.\n   * @param {number} request.partitionCount\n   *   The desired maximum number of partition points.\n   *   The partitions may be returned across multiple pages of results.\n   *   The number must be positive. The actual number of partitions\n   *   returned may be fewer.\n   *\n   *   For example, this may be set to one fewer than the number of parallel\n   *   queries to be run, or in running a data pipeline job, one fewer than the\n   *   number of workers or compute instances available.\n   * @param {string} request.pageToken\n   *   The `next_page_token` value returned from a previous call to\n   *   PartitionQuery that may be used to get an additional set of results.\n   *   There are no ordering guarantees between sets of results. Thus, using\n   *   multiple sets of results will require merging the different result sets.\n   *\n   *   For example, two subsequent calls using a page_token may return:\n   *\n   *    * cursor B, cursor M, cursor Q\n   *    * cursor A, cursor U, cursor W\n   *\n   *   To obtain a complete result set ordered with respect to the results of the\n   *   query supplied to PartitionQuery, the results sets should be merged:\n   *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n   * @param {number} request.pageSize\n   *   The maximum number of partitions to return in this call, subject to\n   *   `partition_count`.\n   *\n   *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n   *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n   *   if more results exist. A second call to PartitionQuery will return up to\n   *   2 partitions, to complete the total of 10 specified in `partition_count`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Cursor]{@link google.firestore.v1.Cursor} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `partitionQueryAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  partitionQueryStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);\n  }\n  /**\n   * Equivalent to `partitionQuery`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource name. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents`.\n   *   Document resource names are not supported; only database resource names\n   *   can be specified.\n   * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n   *   A structured query.\n   *   Query must specify collection with all descendants and be ordered by name\n   *   ascending. Other filters, order bys, limits, offsets, and start/end\n   *   cursors are not supported.\n   * @param {number} request.partitionCount\n   *   The desired maximum number of partition points.\n   *   The partitions may be returned across multiple pages of results.\n   *   The number must be positive. The actual number of partitions\n   *   returned may be fewer.\n   *\n   *   For example, this may be set to one fewer than the number of parallel\n   *   queries to be run, or in running a data pipeline job, one fewer than the\n   *   number of workers or compute instances available.\n   * @param {string} request.pageToken\n   *   The `next_page_token` value returned from a previous call to\n   *   PartitionQuery that may be used to get an additional set of results.\n   *   There are no ordering guarantees between sets of results. Thus, using\n   *   multiple sets of results will require merging the different result sets.\n   *\n   *   For example, two subsequent calls using a page_token may return:\n   *\n   *    * cursor B, cursor M, cursor Q\n   *    * cursor A, cursor U, cursor W\n   *\n   *   To obtain a complete result set ordered with respect to the results of the\n   *   query supplied to PartitionQuery, the results sets should be merged:\n   *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n   * @param {number} request.pageSize\n   *   The maximum number of partitions to return in this call, subject to\n   *   `partition_count`.\n   *\n   *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n   *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n   *   if more results exist. A second call to PartitionQuery will return up to\n   *   2 partitions, to complete the total of 10 specified in `partition_count`.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Cursor]{@link google.firestore.v1.Cursor}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.partitionQueryAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  partitionQueryAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls['partitionQuery'], request, callSettings);\n  }\n  /**\n   * Lists all the collection IDs underneath a document.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent document. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {number} request.pageSize\n   *   The maximum number of results to return.\n   * @param {string} request.pageToken\n   *   A page token. Must be a value from\n   *   {@link google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of string.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listCollectionIdsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listCollectionIds(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listCollectionIds(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent document. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {number} request.pageSize\n   *   The maximum number of results to return.\n   * @param {string} request.pageToken\n   *   A page token. Must be a value from\n   *   {@link google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing string on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listCollectionIdsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listCollectionIdsStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\n  }\n  /**\n   * Equivalent to `listCollectionIds`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent document. In the format:\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n   *   For example:\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n   * @param {number} request.pageSize\n   *   The maximum number of results to return.\n   * @param {string} request.pageToken\n   *   A page token. Must be a value from\n   *   {@link google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   string. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listCollectionIdsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listCollectionIdsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.firestoreStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.FirestoreClient = FirestoreClient;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js"],"names":["Object","defineProperty","exports","value","gax","require","path","gapicConfig","version","FirestoreClient","constructor","opts","_a","_b","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","port","clientConfig","fallback","window","fetch","assign","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","_protos","loadProto","listDocuments","PageDescriptor","partitionQuery","listCollectionIds","batchGetDocuments","StreamDescriptor","StreamType","SERVER_STREAMING","runQuery","write","BIDI_STREAMING","listen","_defaults","constructSettings","innerApiCalls","initialize","firestoreStub","createStub","lookupService","google","firestore","v1","Firestore","firestoreStubMethods","methodName","callPromise","then","stub","args","Promise","reject","func","apply","err","descriptor","undefined","apiCall","createApiCall","getProjectId","callback","getDocument","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","name","updateDocument","document","deleteDocument","beginTransaction","database","commit","rollback","batchWrite","createDocument","parent","listDocumentsStream","callSettings","CallSettings","createStream","listDocumentsAsync","asyncIterate","partitionQueryStream","partitionQueryAsync","listCollectionIdsStream","listCollectionIdsAsync","close","resolve"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI0B,EAAAA,oBAAoB,CAACxB,OAAD,EAAUE,OAAV,EAAmB;AACnCF,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAE,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,IAAqB,EAAzC;AACAD,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4BF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAF,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0B,uBAA1B,IAAqD1F,GAAG,CAAC2F,aAAJ,CAAkBC,UAAlB,CAA6B;AAC9EW,MAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAAR,IAAkB;AADoD,KAA7B,CAArD;AAGA,UAAME,YAAY,GAAG,IAAIzG,GAAG,CAAC0G,YAAR,CAAqBlB,OAArB,CAArB;AACA,SAAK5B,UAAL;AACA,WAAO,KAAKjD,WAAL,CAAiBC,IAAjB,CAAsBmC,cAAtB,CAAqC4D,YAArC,CAAkD,KAAKhD,aAAL,CAAmBZ,cAArE,EAAqFuC,OAArF,EAA8FmB,YAA9F,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,mBAAmB,CAACzB,OAAD,EAAUE,OAAV,EAAmB;AAClCF,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAE,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,IAAqB,EAAzC;AACAD,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4BF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAF,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0B,uBAA1B,IAAqD1F,GAAG,CAAC2F,aAAJ,CAAkBC,UAAlB,CAA6B;AAC9EW,MAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAAR,IAAkB;AADoD,KAA7B,CAArD;AAGAf,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAMiB,YAAY,GAAG,IAAIzG,GAAG,CAAC0G,YAAR,CAAqBlB,OAArB,CAArB;AACA,SAAK5B,UAAL;AACA,WAAO,KAAKjD,WAAL,CAAiBC,IAAjB,CAAsBmC,cAAtB,CAAqC8D,YAArC,CAAkD,KAAKlD,aAAL,CAAmB,gBAAnB,CAAlD,EAAwF2B,OAAxF,EAAiGmB,YAAjG,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzD,EAAAA,iBAAiB,CAACsC,OAAD,EAAUC,iBAAV,EAA6BH,QAA7B,EAAuC;AACpDE,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,QAAIE,OAAJ;;AACA,QAAI,OAAOD,iBAAP,KAA6B,UAA7B,IAA2CH,QAAQ,KAAKJ,SAA5D,EAAuE;AACnEI,MAAAA,QAAQ,GAAGG,iBAAX;AACAC,MAAAA,OAAO,GAAG,EAAV;AACH,KAHD,MAIK;AACDA,MAAAA,OAAO,GAAGD,iBAAV;AACH;;AACDC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,IAAqB,EAAzC;AACAD,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4BF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAF,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0B,uBAA1B,IAAqD1F,GAAG,CAAC2F,aAAJ,CAAkBC,UAAlB,CAA6B;AAC9EW,MAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAAR,IAAkB;AADoD,KAA7B,CAArD;AAGA,SAAK3C,UAAL;AACA,WAAO,KAAKD,aAAL,CAAmBX,iBAAnB,CAAqCsC,OAArC,EAA8CE,OAA9C,EAAuDJ,QAAvD,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI4B,EAAAA,uBAAuB,CAAC1B,OAAD,EAAUE,OAAV,EAAmB;AACtCF,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAE,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,IAAqB,EAAzC;AACAD,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4BF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAF,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0B,uBAA1B,IAAqD1F,GAAG,CAAC2F,aAAJ,CAAkBC,UAAlB,CAA6B;AAC9EW,MAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAAR,IAAkB;AADoD,KAA7B,CAArD;AAGA,UAAME,YAAY,GAAG,IAAIzG,GAAG,CAAC0G,YAAR,CAAqBlB,OAArB,CAArB;AACA,SAAK5B,UAAL;AACA,WAAO,KAAKjD,WAAL,CAAiBC,IAAjB,CAAsBoC,iBAAtB,CAAwC2D,YAAxC,CAAqD,KAAKhD,aAAL,CAAmBX,iBAAxE,EAA2FsC,OAA3F,EAAoGmB,YAApG,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,sBAAsB,CAAC3B,OAAD,EAAUE,OAAV,EAAmB;AACrCF,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAE,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,IAAqB,EAAzC;AACAD,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4BF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAF,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0B,uBAA1B,IAAqD1F,GAAG,CAAC2F,aAAJ,CAAkBC,UAAlB,CAA6B;AAC9EW,MAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAAR,IAAkB;AADoD,KAA7B,CAArD;AAGAf,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAMiB,YAAY,GAAG,IAAIzG,GAAG,CAAC0G,YAAR,CAAqBlB,OAArB,CAArB;AACA,SAAK5B,UAAL;AACA,WAAO,KAAKjD,WAAL,CAAiBC,IAAjB,CAAsBoC,iBAAtB,CAAwC6D,YAAxC,CAAqD,KAAKlD,aAAL,CAAmB,mBAAnB,CAArD,EAA8F2B,OAA9F,EAAuGmB,YAAvG,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIS,EAAAA,KAAK,GAAG;AACJ,SAAKtD,UAAL;;AACA,QAAI,CAAC,KAAKlD,WAAV,EAAuB;AACnB,aAAO,KAAKmD,aAAL,CAAmBU,IAAnB,CAAwBC,IAAI,IAAI;AACnC,aAAK9D,WAAL,GAAmB,IAAnB;AACA8D,QAAAA,IAAI,CAAC0C,KAAL;AACH,OAHM,CAAP;AAIH;;AACD,WAAOxC,OAAO,CAACyC,OAAR,EAAP;AACH;;AApxCiB;;AAsxCtBrH,OAAO,CAACO,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* global window */\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/firestore_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./firestore_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL\n *  document database that simplifies storing, syncing, and querying data for\n *  your mobile, web, and IoT apps at global scale. Its client libraries provide\n *  live synchronization and offline support, while its security features and\n *  integrations with Firebase and Google Cloud Platform (GCP) accelerate\n *  building truly serverless apps.\n * @class\n * @memberof v1\n */\nclass FirestoreClient {\n    /**\n     * Construct an instance of FirestoreClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(opts) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback\n            ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n                require('../../protos/protos.json')\n            : nodejsProtoPath);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n            partitionQuery: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'partitions'),\n            listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds'),\n        };\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this.descriptors.stream = {\n            batchGetDocuments: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n            runQuery: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n            write: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n            listen: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1.Firestore', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreStub) {\n            return this.firestoreStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.v1.Firestore.\n        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.v1.Firestore')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.firestore.v1.Firestore, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreStubMethods = [\n            'getDocument',\n            'listDocuments',\n            'updateDocument',\n            'deleteDocument',\n            'batchGetDocuments',\n            'beginTransaction',\n            'commit',\n            'rollback',\n            'runQuery',\n            'partitionQuery',\n            'write',\n            'listen',\n            'listCollectionIds',\n            'batchWrite',\n            'createDocument',\n        ];\n        for (const methodName of firestoreStubMethods) {\n            const callPromise = this.firestoreStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.stream[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.firestoreStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets a single document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to get. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads the document in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads the version of the document at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getDocument(request);\n     */\n    getDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getDocument(request, options, callback);\n    }\n    /**\n     * Updates or inserts a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.firestore.v1.Document} request.document\n     *   Required. The updated document.\n     *   Creates the document if it does not already exist.\n     * @param {google.firestore.v1.DocumentMask} request.updateMask\n     *   The fields to update.\n     *   None of the field paths in the mask may contain a reserved name.\n     *\n     *   If the document exists on the server and has fields not referenced in the\n     *   mask, they are left unchanged.\n     *   Fields referenced in the mask, but not present in the input document, are\n     *   deleted from the document on the server.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {google.firestore.v1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.updateDocument(request);\n     */\n    updateDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            'document.name': request.document.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.updateDocument(request, options, callback);\n    }\n    /**\n     * Deletes a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to delete. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deleteDocument(request);\n     */\n    deleteDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.deleteDocument(request, options, callback);\n    }\n    /**\n     * Starts a new transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {google.firestore.v1.TransactionOptions} request.options\n     *   The options for the transaction.\n     *   Defaults to a read-write transaction.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [BeginTransactionResponse]{@link google.firestore.v1.BeginTransactionResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.beginTransaction(request);\n     */\n    beginTransaction(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.beginTransaction(request, options, callback);\n    }\n    /**\n     * Commits a transaction, while optionally updating documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {number[]} request.writes\n     *   The writes to apply.\n     *\n     *   Always executed atomically and in order.\n     * @param {Buffer} request.transaction\n     *   If set, applies all writes in this transaction, and commits it.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [CommitResponse]{@link google.firestore.v1.CommitResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.commit(request);\n     */\n    commit(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.commit(request, options, callback);\n    }\n    /**\n     * Rolls back a transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {Buffer} request.transaction\n     *   Required. The transaction to roll back.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.rollback(request);\n     */\n    rollback(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.rollback(request, options, callback);\n    }\n    /**\n     * Applies a batch of write operations.\n     *\n     * The BatchWrite method does not apply the write operations atomically\n     * and can apply them out of order. Method does not allow more than one write\n     * per document. Each write succeeds or fails independently. See the\n     * {@link google.firestore.v1.BatchWriteResponse|BatchWriteResponse} for the success status of each write.\n     *\n     * If you require an atomically applied set of writes, use\n     * {@link google.firestore.v1.Firestore.Commit|Commit} instead.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {number[]} request.writes\n     *   The writes to apply.\n     *\n     *   Method does not apply writes atomically and does not guarantee ordering.\n     *   Each write succeeds or fails independently. You cannot write to the same\n     *   document more than once per request.\n     * @param {number[]} request.labels\n     *   Labels associated with this batch write.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [BatchWriteResponse]{@link google.firestore.v1.BatchWriteResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.batchWrite(request);\n     */\n    batchWrite(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.batchWrite(request, options, callback);\n    }\n    /**\n     * Creates a new document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource. For example:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.\n     * @param {string} request.documentId\n     *   The client-assigned document ID to use for this document.\n     *\n     *   Optional. If not specified, an ID will be assigned by the service.\n     * @param {google.firestore.v1.Document} request.document\n     *   Required. The document to create. `name` must not be set.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1.Document}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.createDocument(request);\n     */\n    createDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.createDocument(request, options, callback);\n    }\n    /**\n     * Gets multiple documents.\n     *\n     * Documents returned by this method are not guaranteed to be returned in the\n     * same order that they were requested.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.documents\n     *   The names of the documents to retrieve. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   The request will fail if any of the document is not a child resource of the\n     *   given `database`. Duplicate names will be elided.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field will\n     *   not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [BatchGetDocumentsResponse]{@link google.firestore.v1.BatchGetDocumentsResponse} on 'data' event.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)\n     *   for more details and examples.\n     * @example\n     * const stream = client.batchGetDocuments(request);\n     * stream.on('data', (response) => { ... });\n     * stream.on('end', () => { ... });\n     */\n    batchGetDocuments(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            database: request.database || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.batchGetDocuments(request, options);\n    }\n    /**\n     * Runs a query.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [RunQueryResponse]{@link google.firestore.v1.RunQueryResponse} on 'data' event.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)\n     *   for more details and examples.\n     * @example\n     * const stream = client.runQuery(request);\n     * stream.on('data', (response) => { ... });\n     * stream.on('end', () => { ... });\n     */\n    runQuery(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.runQuery(request, options);\n    }\n    /**\n     * Streams batches of document updates and deletes, in order.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [WriteRequest]{@link google.firestore.v1.WriteRequest} for write() method, and\n     *   will emit objects representing [WriteResponse]{@link google.firestore.v1.WriteResponse} on 'data' event asynchronously.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)\n     *   for more details and examples.\n     * @example\n     * const stream = client.write();\n     * stream.on('data', (response) => { ... });\n     * stream.on('end', () => { ... });\n     * stream.write(request);\n     * stream.end();\n     */\n    write(options) {\n        this.initialize();\n        return this.innerApiCalls.write({}, options);\n    }\n    /**\n     * Listens to changes.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [ListenRequest]{@link google.firestore.v1.ListenRequest} for write() method, and\n     *   will emit objects representing [ListenResponse]{@link google.firestore.v1.ListenResponse} on 'data' event asynchronously.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)\n     *   for more details and examples.\n     * @example\n     * const stream = client.listen();\n     * stream.on('data', (response) => { ... });\n     * stream.on('end', () => { ... });\n     * stream.write(request);\n     * stream.end();\n     */\n    listen(options) {\n        this.initialize();\n        return this.innerApiCalls.listen({}, options);\n    }\n    /**\n     * Lists documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Document]{@link google.firestore.v1.Document}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listDocumentsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listDocuments(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listDocuments(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Document]{@link google.firestore.v1.Document} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listDocumentsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listDocumentsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\n    }\n    /**\n     * Equivalent to `listDocuments`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Document]{@link google.firestore.v1.Document}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listDocumentsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listDocumentsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\n    }\n    /**\n     * Partitions a query by returning partition cursors that can be used to run\n     * the query in parallel. The returned partition cursors are split points that\n     * can be used by RunQuery as starting/end points for the query results.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Cursor]{@link google.firestore.v1.Cursor}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `partitionQueryAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    partitionQuery(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.partitionQuery(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Cursor]{@link google.firestore.v1.Cursor} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `partitionQueryAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    partitionQueryStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);\n    }\n    /**\n     * Equivalent to `partitionQuery`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Cursor]{@link google.firestore.v1.Cursor}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.partitionQueryAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    partitionQueryAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls['partitionQuery'], request, callSettings);\n    }\n    /**\n     * Lists all the collection IDs underneath a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of string.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listCollectionIdsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listCollectionIds(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listCollectionIds(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing string on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listCollectionIdsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listCollectionIdsStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\n    }\n    /**\n     * Equivalent to `listCollectionIds`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   string. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listCollectionIdsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listCollectionIdsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.firestoreStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreClient = FirestoreClient;\n//# sourceMappingURL=firestore_client.js.map"]},"metadata":{},"sourceType":"script"}