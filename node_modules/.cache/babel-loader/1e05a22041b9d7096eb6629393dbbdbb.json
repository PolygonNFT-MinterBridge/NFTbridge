{"ast":null,"code":"\"use strict\";\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\n\nvar converter = exports;\n\nvar Enum = require(\"./enum\"),\n    util = require(\"./util\");\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\n\n\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) {\n      gen(\"switch(d%s){\", prop);\n\n      for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n        if (field.repeated && values[keys[i]] === field.typeDefault) gen(\"default:\");\n        gen(\"case%j:\", keys[i])(\"case %i:\", values[keys[i]])(\"m%s=%j\", prop, values[keys[i]])(\"break\");\n      }\n\n      gen(\"}\");\n    } else gen(\"if(typeof d%s!==\\\"object\\\")\", prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n  } else {\n    var isUnsigned = false;\n\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        gen(\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n\n        break;\n\n      case \"uint32\":\n      case \"fixed32\":\n        gen(\"m%s=d%s>>>0\", prop, prop);\n        break;\n\n      case \"int32\":\n      case \"sint32\":\n      case \"sfixed32\":\n        gen(\"m%s=d%s|0\", prop, prop);\n        break;\n\n      case \"uint64\":\n        isUnsigned = true;\n      // eslint-disable-line no-fallthrough\n\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(util.Long)\")(\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)(\"else if(typeof d%s===\\\"string\\\")\", prop)(\"m%s=parseInt(d%s,10)\", prop, prop)(\"else if(typeof d%s===\\\"number\\\")\", prop)(\"m%s=d%s\", prop, prop)(\"else if(typeof d%s===\\\"object\\\")\", prop)(\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n        break;\n\n      case \"bytes\":\n        gen(\"if(typeof d%s===\\\"string\\\")\", prop)(\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)(\"else if(d%s.length)\", prop)(\"m%s=d%s\", prop, prop);\n        break;\n\n      case \"string\":\n        gen(\"m%s=String(d%s)\", prop, prop);\n        break;\n\n      case \"bool\":\n        gen(\"m%s=Boolean(d%s)\", prop, prop);\n        break;\n\n      /* default: gen\n          (\"m%s=d%s\", prop, prop);\n          break; */\n    }\n  }\n\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\n\n\nconverter.fromObject = function fromObject(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray;\n  var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")(\"if(d instanceof this.ctor)\")(\"return d\");\n  if (!fields.length) return gen(\"return new this.ctor\");\n  gen(\"var m=new this.ctor\");\n\n  for (var i = 0; i < fields.length; ++i) {\n    var field = fields[i].resolve(),\n        prop = util.safeProp(field.name); // Map fields\n\n    if (field.map) {\n      gen(\"if(d%s){\", prop)(\"if(typeof d%s!==\\\"object\\\")\", prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s={}\", prop)(\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n      genValuePartial_fromObject(gen, field,\n      /* not sorted */\n      i, prop + \"[ks[i]]\")(\"}\")(\"}\"); // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(d%s){\", prop)(\"if(!Array.isArray(d%s))\", prop)(\"throw TypeError(%j)\", field.fullName + \": array expected\")(\"m%s=[]\", prop)(\"for(var i=0;i<d%s.length;++i){\", prop);\n      genValuePartial_fromObject(gen, field,\n      /* not sorted */\n      i, prop + \"[i]\")(\"}\")(\"}\"); // Non-repeated fields\n    } else {\n      if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n      (\"if(d%s!=null){\", prop); // !== undefined && !== null\n\n      genValuePartial_fromObject(gen, field,\n      /* not sorted */\n      i, prop);\n      if (!(field.resolvedType instanceof Enum)) gen(\"}\");\n    }\n  }\n\n  return gen(\"return m\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\n\n\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);else gen(\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n  } else {\n    var isUnsigned = false;\n\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        gen(\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n        break;\n\n      case \"uint64\":\n        isUnsigned = true;\n      // eslint-disable-line no-fallthrough\n\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(typeof m%s===\\\"number\\\")\", prop)(\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)(\"else\") // Long-like\n        (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\" : \"\", prop);\n        break;\n\n      case \"bytes\":\n        gen(\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n        break;\n\n      default:\n        gen(\"d%s=m%s\", prop, prop);\n        break;\n    }\n  }\n\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\n\n\nconverter.toObject = function toObject(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n  if (!fields.length) return util.codegen()(\"return {}\");\n  var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")(\"if(!o)\")(\"o={}\")(\"var d={}\");\n  var repeatedFields = [],\n      mapFields = [],\n      normalFields = [],\n      i = 0;\n\n  for (; i < fields.length; ++i) if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);\n\n  if (repeatedFields.length) {\n    gen(\"if(o.arrays||o.defaults){\");\n\n    for (i = 0; i < repeatedFields.length; ++i) gen(\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n\n    gen(\"}\");\n  }\n\n  if (mapFields.length) {\n    gen(\"if(o.objects||o.defaults){\");\n\n    for (i = 0; i < mapFields.length; ++i) gen(\"d%s={}\", util.safeProp(mapFields[i].name));\n\n    gen(\"}\");\n  }\n\n  if (normalFields.length) {\n    gen(\"if(o.defaults){\");\n\n    for (i = 0; i < normalFields.length; ++i) {\n      var field = normalFields[i],\n          prop = util.safeProp(field.name);\n      if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);else if (field.long) gen(\"if(util.Long){\")(\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)(\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)(\"}else\")(\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());else if (field.bytes) {\n        var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n        gen(\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))(\"else{\")(\"d%s=%s\", prop, arrayDefault)(\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)(\"}\");\n      } else gen(\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n    }\n\n    gen(\"}\");\n  }\n\n  var hasKs2 = false;\n\n  for (i = 0; i < fields.length; ++i) {\n    var field = fields[i],\n        index = mtype._fieldsArray.indexOf(field),\n        prop = util.safeProp(field.name);\n\n    if (field.map) {\n      if (!hasKs2) {\n        hasKs2 = true;\n        gen(\"var ks2\");\n      }\n\n      gen(\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)(\"d%s={}\", prop)(\"for(var j=0;j<ks2.length;++j){\");\n      genValuePartial_toObject(gen, field,\n      /* sorted */\n      index, prop + \"[ks2[j]]\")(\"}\");\n    } else if (field.repeated) {\n      gen(\"if(m%s&&m%s.length){\", prop, prop)(\"d%s=[]\", prop)(\"for(var j=0;j<m%s.length;++j){\", prop);\n      genValuePartial_toObject(gen, field,\n      /* sorted */\n      index, prop + \"[j]\")(\"}\");\n    } else {\n      gen(\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n\n      genValuePartial_toObject(gen, field,\n      /* sorted */\n      index, prop);\n      if (field.partOf) gen(\"if(o.oneofs)\")(\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n    }\n\n    gen(\"}\");\n  }\n\n  return gen(\"return d\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/protobufjs/src/converter.js"],"names":["converter","exports","Enum","require","util","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","values","keys","Object","i","length","repeated","typeDefault","fullName","isUnsigned","type","fromObject","mtype","fields","fieldsArray","codegen","name","resolve","safeProp","map","genValuePartial_toObject","toObject","slice","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","push","valuesById","long","low","high","unsigned","toString","toNumber","bytes","arrayDefault","Array","prototype","call","join","String","fromCharCode","apply","hasKs2","index","_fieldsArray","indexOf"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\n\nvar Enum = require(\"./enum\"),\n    util = require(\"./util\");\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(d%s){\", prop);\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\n                (\"default:\");\n                gen\n                (\"case%j:\", keys[i])\n                (\"case %i:\", values[keys[i]])\n                    (\"m%s=%j\", prop, values[keys[i]])\n                    (\"break\");\n            } gen\n            (\"}\");\n        } else gen\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\": gen\n                (\"m%s=d%s>>>0\", prop, prop);\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\": gen\n                (\"m%s=d%s|0\", prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(util.Long)\")\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\n                    (\"m%s=d%s\", prop, prop)\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n                break;\n            case \"bytes\": gen\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\n                (\"else if(d%s.length)\", prop)\n                    (\"m%s=d%s\", prop, prop);\n                break;\n            case \"string\": gen\n                (\"m%s=String(d%s)\", prop, prop);\n                break;\n            case \"bool\": gen\n                (\"m%s=Boolean(d%s)\", prop, prop);\n                break;\n            /* default: gen\n                (\"m%s=d%s\", prop, prop);\n                break; */\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray;\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\n    (\"if(d instanceof this.ctor)\")\n        (\"return d\");\n    if (!fields.length) return gen\n    (\"return new this.ctor\");\n    gen\n    (\"var m=new this.ctor\");\n    for (var i = 0; i < fields.length; ++i) {\n        var field  = fields[i].resolve(),\n            prop   = util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) { gen\n    (\"if(d%s){\", prop)\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n        (\"m%s={}\", prop)\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\n        (\"}\")\n    (\"}\");\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(d%s){\", prop)\n        (\"if(!Array.isArray(d%s))\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\n        (\"m%s=[]\", prop)\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\n        (\"}\")\n    (\"}\");\n\n        // Non-repeated fields\n        } else {\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n            if (!(field.resolvedType instanceof Enum)) gen\n    (\"}\");\n        }\n    } return gen\n    (\"return m\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) gen\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\n        else gen\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\n            (\"else\") // Long-like\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\n                break;\n            case \"bytes\": gen\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n                break;\n            default: gen\n            (\"d%s=m%s\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    if (!fields.length)\n        return util.codegen()(\"return {}\");\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\n    (\"if(!o)\")\n        (\"o={}\")\n    (\"var d={}\");\n\n    var repeatedFields = [],\n        mapFields = [],\n        normalFields = [],\n        i = 0;\n    for (; i < fields.length; ++i)\n        if (!fields[i].partOf)\n            ( fields[i].resolve().repeated ? repeatedFields\n            : fields[i].map ? mapFields\n            : normalFields).push(fields[i]);\n\n    if (repeatedFields.length) { gen\n    (\"if(o.arrays||o.defaults){\");\n        for (i = 0; i < repeatedFields.length; ++i) gen\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (mapFields.length) { gen\n    (\"if(o.objects||o.defaults){\");\n        for (i = 0; i < mapFields.length; ++i) gen\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (normalFields.length) { gen\n    (\"if(o.defaults){\");\n        for (i = 0; i < normalFields.length; ++i) {\n            var field = normalFields[i],\n                prop  = util.safeProp(field.name);\n            if (field.resolvedType instanceof Enum) gen\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\n            else if (field.long) gen\n        (\"if(util.Long){\")\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\n        (\"}else\")\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\n            else if (field.bytes) {\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n                gen\n        (\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))\n        (\"else{\")\n            (\"d%s=%s\", prop, arrayDefault)\n            (\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)\n        (\"}\");\n            } else gen\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n        } gen\n    (\"}\");\n    }\n    var hasKs2 = false;\n    for (i = 0; i < fields.length; ++i) {\n        var field = fields[i],\n            index = mtype._fieldsArray.indexOf(field),\n            prop  = util.safeProp(field.name);\n        if (field.map) {\n            if (!hasKs2) { hasKs2 = true; gen\n    (\"var ks2\");\n            } gen\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\n        (\"d%s={}\", prop)\n        (\"for(var j=0;j<ks2.length;++j){\");\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\n        (\"}\");\n        } else if (field.repeated) { gen\n    (\"if(m%s&&m%s.length){\", prop, prop)\n        (\"d%s=[]\", prop)\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\n        (\"}\");\n        } else { gen\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n        if (field.partOf) gen\n        (\"if(o.oneofs)\")\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n        }\n        gen\n    (\"}\");\n    }\n    return gen\n    (\"return d\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n"]},"metadata":{},"sourceType":"script"}