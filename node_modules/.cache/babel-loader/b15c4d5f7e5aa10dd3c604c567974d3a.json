{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Task = exports.deepCopyForResponse = void 0;\n\nconst status_1 = require(\"../status\");\n\nconst googleError_1 = require(\"../googleError\");\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\n\n\nfunction deepCopyForResponse( // eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj, subresponseInfo) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let result;\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (obj === undefined) {\n    return undefined;\n  }\n\n  if (Array.isArray(obj)) {\n    result = [];\n    obj.forEach(element => {\n      result.push(deepCopyForResponse(element, null));\n    });\n    return result;\n  } // Some objects (such as ByteBuffer) have copy method.\n\n\n  if (obj.copy !== undefined) {\n    return obj.copy();\n  } // ArrayBuffer should be copied through slice().\n\n\n  if (obj instanceof ArrayBuffer) {\n    return obj.slice(0);\n  }\n\n  if (typeof obj === 'object') {\n    result = {};\n    Object.keys(obj).forEach(key => {\n      if (subresponseInfo && key === subresponseInfo.field && Array.isArray(obj[key])) {\n        // Note that subresponses are not deep-copied. This is safe because\n        // those subresponses are not shared among callbacks.\n        result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\n      } else {\n        result[key] = deepCopyForResponse(obj[key], null);\n      }\n    });\n    return result;\n  }\n\n  return obj;\n}\n\nexports.deepCopyForResponse = deepCopyForResponse;\n\nclass Task {\n  /**\n   * A task coordinates the execution of a single bundle.\n   *\n   * @param {function} apiCall - The function to conduct calling API.\n   * @param {Object} bundlingRequest - The base request object to be used\n   *   for the actual API call.\n   * @param {string} bundledField - The name of the field in bundlingRequest\n   *   to be bundled.\n   * @param {string=} subresponseField - The name of the field in the response\n   *   to be passed to the callback.\n   * @constructor\n   * @private\n   */\n  constructor(apiCall, bundlingRequest, bundledField, subresponseField) {\n    this._apiCall = apiCall;\n    this._request = bundlingRequest;\n    this._bundledField = bundledField;\n    this._subresponseField = subresponseField;\n    this._data = [];\n  }\n  /**\n   * Returns the number of elements in a task.\n   * @return {number} The number of elements.\n   */\n\n\n  getElementCount() {\n    let count = 0;\n\n    for (let i = 0; i < this._data.length; ++i) {\n      count += this._data[i].elements.length;\n    }\n\n    return count;\n  }\n  /**\n   * Returns the total byte size of the elements in a task.\n   * @return {number} The byte size.\n   */\n\n\n  getRequestByteSize() {\n    let size = 0;\n\n    for (let i = 0; i < this._data.length; ++i) {\n      size += this._data[i].bytes;\n    }\n\n    return size;\n  }\n  /**\n   * Invokes the actual API call with current elements.\n   * @return {string[]} - the list of ids for invocations to be run.\n   */\n\n\n  run() {\n    if (this._data.length === 0) {\n      return [];\n    }\n\n    const request = this._request;\n    const elements = [];\n    const ids = [];\n\n    for (let i = 0; i < this._data.length; ++i) {\n      elements.push(...this._data[i].elements);\n      ids.push(this._data[i].callback.id);\n    }\n\n    request[this._bundledField] = elements; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n    const self = this;\n    this.callCanceller = this._apiCall(request, (err, response) => {\n      const responses = [];\n\n      if (err) {\n        self._data.forEach(() => {\n          responses.push(undefined);\n        });\n      } else {\n        let subresponseInfo = null;\n\n        if (self._subresponseField) {\n          subresponseInfo = {\n            field: self._subresponseField,\n            start: 0\n          };\n        }\n\n        self._data.forEach(data => {\n          if (subresponseInfo) {\n            subresponseInfo.end = subresponseInfo.start + data.elements.length;\n          }\n\n          responses.push(deepCopyForResponse(response, subresponseInfo));\n\n          if (subresponseInfo) {\n            subresponseInfo.start = subresponseInfo.end;\n          }\n        });\n      }\n\n      for (let i = 0; i < self._data.length; ++i) {\n        if (self._data[i].cancelled) {\n          const error = new googleError_1.GoogleError('cancelled');\n          error.code = status_1.Status.CANCELLED;\n\n          self._data[i].callback(error);\n        } else {\n          self._data[i].callback(err, responses[i]);\n        }\n      }\n    });\n    return ids;\n  }\n  /**\n   * Appends the list of elements into the task.\n   * @param {Object[]} elements - the new list of elements.\n   * @param {number} bytes - the byte size required to encode elements in the API.\n   * @param {APICallback} callback - the callback of the method call.\n   */\n\n\n  extend(elements, bytes, callback) {\n    this._data.push({\n      elements,\n      bytes,\n      callback\n    });\n  }\n  /**\n   * Cancels a part of elements.\n   * @param {string} id - The identifier of the part of elements.\n   * @return {boolean} Whether the entire task will be canceled or not.\n   */\n\n\n  cancel(id) {\n    if (this.callCanceller) {\n      let allCancelled = true;\n\n      this._data.forEach(d => {\n        if (d.callback.id === id) {\n          d.cancelled = true;\n        }\n\n        if (!d.cancelled) {\n          allCancelled = false;\n        }\n      });\n\n      if (allCancelled) {\n        this.callCanceller.cancel();\n      }\n\n      return allCancelled;\n    }\n\n    for (let i = 0; i < this._data.length; ++i) {\n      if (this._data[i].callback.id === id) {\n        const error = new googleError_1.GoogleError('cancelled');\n        error.code = status_1.Status.CANCELLED;\n\n        this._data[i].callback(error);\n\n        this._data.splice(i, 1);\n\n        break;\n      }\n    }\n\n    return this._data.length === 0;\n  }\n\n}\n\nexports.Task = Task;","map":{"version":3,"sources":["../../../src/bundlingCalls/task.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Task = exports.deepCopyForResponse = void 0;\nconst status_1 = require(\"../status\");\nconst googleError_1 = require(\"../googleError\");\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nfunction deepCopyForResponse(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj, subresponseInfo) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let result;\n    if (obj === null) {\n        return null;\n    }\n    if (obj === undefined) {\n        return undefined;\n    }\n    if (Array.isArray(obj)) {\n        result = [];\n        obj.forEach(element => {\n            result.push(deepCopyForResponse(element, null));\n        });\n        return result;\n    }\n    // Some objects (such as ByteBuffer) have copy method.\n    if (obj.copy !== undefined) {\n        return obj.copy();\n    }\n    // ArrayBuffer should be copied through slice().\n    if (obj instanceof ArrayBuffer) {\n        return obj.slice(0);\n    }\n    if (typeof obj === 'object') {\n        result = {};\n        Object.keys(obj).forEach(key => {\n            if (subresponseInfo &&\n                key === subresponseInfo.field &&\n                Array.isArray(obj[key])) {\n                // Note that subresponses are not deep-copied. This is safe because\n                // those subresponses are not shared among callbacks.\n                result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\n            }\n            else {\n                result[key] = deepCopyForResponse(obj[key], null);\n            }\n        });\n        return result;\n    }\n    return obj;\n}\nexports.deepCopyForResponse = deepCopyForResponse;\nclass Task {\n    /**\n     * A task coordinates the execution of a single bundle.\n     *\n     * @param {function} apiCall - The function to conduct calling API.\n     * @param {Object} bundlingRequest - The base request object to be used\n     *   for the actual API call.\n     * @param {string} bundledField - The name of the field in bundlingRequest\n     *   to be bundled.\n     * @param {string=} subresponseField - The name of the field in the response\n     *   to be passed to the callback.\n     * @constructor\n     * @private\n     */\n    constructor(apiCall, bundlingRequest, bundledField, subresponseField) {\n        this._apiCall = apiCall;\n        this._request = bundlingRequest;\n        this._bundledField = bundledField;\n        this._subresponseField = subresponseField;\n        this._data = [];\n    }\n    /**\n     * Returns the number of elements in a task.\n     * @return {number} The number of elements.\n     */\n    getElementCount() {\n        let count = 0;\n        for (let i = 0; i < this._data.length; ++i) {\n            count += this._data[i].elements.length;\n        }\n        return count;\n    }\n    /**\n     * Returns the total byte size of the elements in a task.\n     * @return {number} The byte size.\n     */\n    getRequestByteSize() {\n        let size = 0;\n        for (let i = 0; i < this._data.length; ++i) {\n            size += this._data[i].bytes;\n        }\n        return size;\n    }\n    /**\n     * Invokes the actual API call with current elements.\n     * @return {string[]} - the list of ids for invocations to be run.\n     */\n    run() {\n        if (this._data.length === 0) {\n            return [];\n        }\n        const request = this._request;\n        const elements = [];\n        const ids = [];\n        for (let i = 0; i < this._data.length; ++i) {\n            elements.push(...this._data[i].elements);\n            ids.push(this._data[i].callback.id);\n        }\n        request[this._bundledField] = elements;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        this.callCanceller = this._apiCall(request, (err, response) => {\n            const responses = [];\n            if (err) {\n                self._data.forEach(() => {\n                    responses.push(undefined);\n                });\n            }\n            else {\n                let subresponseInfo = null;\n                if (self._subresponseField) {\n                    subresponseInfo = {\n                        field: self._subresponseField,\n                        start: 0,\n                    };\n                }\n                self._data.forEach(data => {\n                    if (subresponseInfo) {\n                        subresponseInfo.end =\n                            subresponseInfo.start + data.elements.length;\n                    }\n                    responses.push(deepCopyForResponse(response, subresponseInfo));\n                    if (subresponseInfo) {\n                        subresponseInfo.start = subresponseInfo.end;\n                    }\n                });\n            }\n            for (let i = 0; i < self._data.length; ++i) {\n                if (self._data[i].cancelled) {\n                    const error = new googleError_1.GoogleError('cancelled');\n                    error.code = status_1.Status.CANCELLED;\n                    self._data[i].callback(error);\n                }\n                else {\n                    self._data[i].callback(err, responses[i]);\n                }\n            }\n        });\n        return ids;\n    }\n    /**\n     * Appends the list of elements into the task.\n     * @param {Object[]} elements - the new list of elements.\n     * @param {number} bytes - the byte size required to encode elements in the API.\n     * @param {APICallback} callback - the callback of the method call.\n     */\n    extend(elements, bytes, callback) {\n        this._data.push({\n            elements,\n            bytes,\n            callback,\n        });\n    }\n    /**\n     * Cancels a part of elements.\n     * @param {string} id - The identifier of the part of elements.\n     * @return {boolean} Whether the entire task will be canceled or not.\n     */\n    cancel(id) {\n        if (this.callCanceller) {\n            let allCancelled = true;\n            this._data.forEach(d => {\n                if (d.callback.id === id) {\n                    d.cancelled = true;\n                }\n                if (!d.cancelled) {\n                    allCancelled = false;\n                }\n            });\n            if (allCancelled) {\n                this.callCanceller.cancel();\n            }\n            return allCancelled;\n        }\n        for (let i = 0; i < this._data.length; ++i) {\n            if (this._data[i].callback.id === id) {\n                const error = new googleError_1.GoogleError('cancelled');\n                error.code = status_1.Status.CANCELLED;\n                this._data[i].callback(error);\n                this._data.splice(i, 1);\n                break;\n            }\n        }\n        return this._data.length === 0;\n    }\n}\nexports.Task = Task;\n//# sourceMappingURL=task.js.map"]},"metadata":{},"sourceType":"script"}