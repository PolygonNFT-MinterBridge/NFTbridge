{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPem = void 0;\n\nconst fs = require(\"fs\");\n\nconst forge = require(\"node-forge\");\n\nconst util_1 = require(\"util\");\n\nconst readFile = util_1.promisify(fs.readFile);\n\nfunction getPem(filename, callback) {\n  if (callback) {\n    getPemAsync(filename).then(pem => callback(null, pem)).catch(err => callback(err, null));\n  } else {\n    return getPemAsync(filename);\n  }\n}\n\nexports.getPem = getPem;\n\nfunction getPemAsync(filename) {\n  return readFile(filename, {\n    encoding: 'base64'\n  }).then(keyp12 => {\n    return convertToPem(keyp12);\n  });\n}\n/**\n * Converts a P12 in base64 encoding to a pem.\n * @param p12base64 String containing base64 encoded p12.\n * @returns a string containing the pem.\n */\n\n\nfunction convertToPem(p12base64) {\n  const p12Der = forge.util.decode64(p12base64);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'notasecret');\n  const bags = p12.getBags({\n    friendlyName: 'privatekey'\n  });\n\n  if (bags.friendlyName) {\n    const privateKey = bags.friendlyName[0].key;\n    const pem = forge.pki.privateKeyToPem(privateKey);\n    return pem.replace(/\\r\\n/g, '\\n');\n  } else {\n    throw new Error('Unable to get friendly name.');\n  }\n}","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/google-p12-pem/build/src/index.js"],"names":["Object","defineProperty","exports","value","getPem","fs","require","forge","util_1","readFile","promisify","filename","callback","getPemAsync","then","pem","catch","err","encoding","keyp12","convertToPem","p12base64","p12Der","util","decode64","p12Asn1","asn1","fromDer","p12","pkcs12","pkcs12FromAsn1","bags","getBags","friendlyName","privateKey","key","pki","privateKeyToPem","replace","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAD,CAArB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMG,QAAQ,GAAGD,MAAM,CAACE,SAAP,CAAiBL,EAAE,CAACI,QAApB,CAAjB;;AACA,SAASL,MAAT,CAAgBO,QAAhB,EAA0BC,QAA1B,EAAoC;AAChC,MAAIA,QAAJ,EAAc;AACVC,IAAAA,WAAW,CAACF,QAAD,CAAX,CACKG,IADL,CACUC,GAAG,IAAIH,QAAQ,CAAC,IAAD,EAAOG,GAAP,CADzB,EAEKC,KAFL,CAEWC,GAAG,IAAIL,QAAQ,CAACK,GAAD,EAAM,IAAN,CAF1B;AAGH,GAJD,MAKK;AACD,WAAOJ,WAAW,CAACF,QAAD,CAAlB;AACH;AACJ;;AACDT,OAAO,CAACE,MAAR,GAAiBA,MAAjB;;AACA,SAASS,WAAT,CAAqBF,QAArB,EAA+B;AAC3B,SAAOF,QAAQ,CAACE,QAAD,EAAW;AAAEO,IAAAA,QAAQ,EAAE;AAAZ,GAAX,CAAR,CAA2CJ,IAA3C,CAAgDK,MAAM,IAAI;AAC7D,WAAOC,YAAY,CAACD,MAAD,CAAnB;AACH,GAFM,CAAP;AAGH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;AAC7B,QAAMC,MAAM,GAAGf,KAAK,CAACgB,IAAN,CAAWC,QAAX,CAAoBH,SAApB,CAAf;AACA,QAAMI,OAAO,GAAGlB,KAAK,CAACmB,IAAN,CAAWC,OAAX,CAAmBL,MAAnB,CAAhB;AACA,QAAMM,GAAG,GAAGrB,KAAK,CAACsB,MAAN,CAAaC,cAAb,CAA4BL,OAA5B,EAAqC,YAArC,CAAZ;AACA,QAAMM,IAAI,GAAGH,GAAG,CAACI,OAAJ,CAAY;AAAEC,IAAAA,YAAY,EAAE;AAAhB,GAAZ,CAAb;;AACA,MAAIF,IAAI,CAACE,YAAT,EAAuB;AACnB,UAAMC,UAAU,GAAGH,IAAI,CAACE,YAAL,CAAkB,CAAlB,EAAqBE,GAAxC;AACA,UAAMpB,GAAG,GAAGR,KAAK,CAAC6B,GAAN,CAAUC,eAAV,CAA0BH,UAA1B,CAAZ;AACA,WAAOnB,GAAG,CAACuB,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAP;AACH,GAJD,MAKK;AACD,UAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACH;AACJ","sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPem = void 0;\nconst fs = require(\"fs\");\nconst forge = require(\"node-forge\");\nconst util_1 = require(\"util\");\nconst readFile = util_1.promisify(fs.readFile);\nfunction getPem(filename, callback) {\n    if (callback) {\n        getPemAsync(filename)\n            .then(pem => callback(null, pem))\n            .catch(err => callback(err, null));\n    }\n    else {\n        return getPemAsync(filename);\n    }\n}\nexports.getPem = getPem;\nfunction getPemAsync(filename) {\n    return readFile(filename, { encoding: 'base64' }).then(keyp12 => {\n        return convertToPem(keyp12);\n    });\n}\n/**\n * Converts a P12 in base64 encoding to a pem.\n * @param p12base64 String containing base64 encoded p12.\n * @returns a string containing the pem.\n */\nfunction convertToPem(p12base64) {\n    const p12Der = forge.util.decode64(p12base64);\n    const p12Asn1 = forge.asn1.fromDer(p12Der);\n    const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'notasecret');\n    const bags = p12.getBags({ friendlyName: 'privatekey' });\n    if (bags.friendlyName) {\n        const privateKey = bags.friendlyName[0].key;\n        const pem = forge.pki.privateKeyToPem(privateKey);\n        return pem.replace(/\\r\\n/g, '\\n');\n    }\n    else {\n        throw new Error('Unable to get friendly name.');\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}