{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamProxy = exports.StreamType = void 0; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\nconst duplexify = require('duplexify'); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\n\n\nvar StreamType;\n\n(function (StreamType) {\n  /** Client sends a single request, server streams responses. */\n  StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n  /** Client streams requests, server returns a single response. */\n\n  StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n  /** Both client and server stream objects. */\n\n  StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType = exports.StreamType || (exports.StreamType = {}));\n\nclass StreamProxy extends duplexify {\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  constructor(type, callback) {\n    super(undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING\n    });\n    this.type = type;\n    this._callback = callback;\n    this._isCancelCalled = false;\n  }\n\n  cancel() {\n    if (this.stream) {\n      this.stream.cancel();\n    } else {\n      this._isCancelCalled = true;\n    }\n  }\n  /**\n   * Forward events from an API request stream to the user's stream.\n   * @param {Stream} stream - The API request stream.\n   */\n\n\n  forwardEvents(stream) {\n    const eventsToForward = ['metadata', 'response', 'status'];\n    eventsToForward.forEach(event => {\n      stream.on(event, this.emit.bind(this, event));\n    }); // We also want to supply the status data as 'response' event to support\n    // the behavior of google-cloud-node expects.\n    // see:\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n\n    stream.on('metadata', metadata => {\n      // Create a response object with succeeds.\n      // TODO: unify this logic with the decoration of gRPC response when it's\n      // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n      stream.emit('response', {\n        code: 200,\n        details: '',\n        message: 'OK',\n        metadata\n      });\n    });\n  }\n  /**\n   * Specifies the target stream.\n   * @param {ApiCall} apiCall - the API function to be called.\n   * @param {Object} argument - the argument to be passed to the apiCall.\n   */\n\n\n  setStream(apiCall, argument, retryRequestOptions = {}) {\n    if (this.type === StreamType.SERVER_STREAMING) {\n      const retryStream = retryRequest(null, {\n        objectMode: true,\n        request: () => {\n          if (this._isCancelCalled) {\n            if (this.stream) {\n              this.stream.cancel();\n            }\n\n            return;\n          }\n\n          const stream = apiCall(argument, this._callback);\n          this.stream = stream;\n          this.forwardEvents(stream);\n          return stream;\n        },\n        retries: retryRequestOptions.retries,\n        currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n        noResponseRetries: retryRequestOptions.noResponseRetries,\n        shouldRetryFn: retryRequestOptions.shouldRetryFn\n      });\n      this.setReadable(retryStream);\n      return;\n    }\n\n    const stream = apiCall(argument, this._callback);\n    this.stream = stream;\n    this.forwardEvents(stream);\n\n    if (this.type === StreamType.CLIENT_STREAMING) {\n      this.setWritable(stream);\n    }\n\n    if (this.type === StreamType.BIDI_STREAMING) {\n      this.setReadable(stream);\n      this.setWritable(stream);\n    }\n\n    if (this._isCancelCalled && this.stream) {\n      this.stream.cancel();\n    }\n  }\n\n}\n\nexports.StreamProxy = StreamProxy;","map":{"version":3,"sources":["../../../src/streamingCalls/streaming.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamProxy = exports.StreamType = void 0;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst duplexify = require('duplexify');\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nvar StreamType;\n(function (StreamType) {\n    /** Client sends a single request, server streams responses. */\n    StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n    /** Client streams requests, server returns a single response. */\n    StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n    /** Both client and server stream objects. */\n    StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType = exports.StreamType || (exports.StreamType = {}));\nclass StreamProxy extends duplexify {\n    /**\n     * StreamProxy is a proxy to gRPC-streaming method.\n     *\n     * @private\n     * @constructor\n     * @param {StreamType} type - the type of gRPC stream.\n     * @param {ApiCallback} callback - the callback for further API call.\n     */\n    constructor(type, callback) {\n        super(undefined, undefined, {\n            objectMode: true,\n            readable: type !== StreamType.CLIENT_STREAMING,\n            writable: type !== StreamType.SERVER_STREAMING,\n        });\n        this.type = type;\n        this._callback = callback;\n        this._isCancelCalled = false;\n    }\n    cancel() {\n        if (this.stream) {\n            this.stream.cancel();\n        }\n        else {\n            this._isCancelCalled = true;\n        }\n    }\n    /**\n     * Forward events from an API request stream to the user's stream.\n     * @param {Stream} stream - The API request stream.\n     */\n    forwardEvents(stream) {\n        const eventsToForward = ['metadata', 'response', 'status'];\n        eventsToForward.forEach(event => {\n            stream.on(event, this.emit.bind(this, event));\n        });\n        // We also want to supply the status data as 'response' event to support\n        // the behavior of google-cloud-node expects.\n        // see:\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n        stream.on('metadata', metadata => {\n            // Create a response object with succeeds.\n            // TODO: unify this logic with the decoration of gRPC response when it's\n            // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n            stream.emit('response', {\n                code: 200,\n                details: '',\n                message: 'OK',\n                metadata,\n            });\n        });\n    }\n    /**\n     * Specifies the target stream.\n     * @param {ApiCall} apiCall - the API function to be called.\n     * @param {Object} argument - the argument to be passed to the apiCall.\n     */\n    setStream(apiCall, argument, retryRequestOptions = {}) {\n        if (this.type === StreamType.SERVER_STREAMING) {\n            const retryStream = retryRequest(null, {\n                objectMode: true,\n                request: () => {\n                    if (this._isCancelCalled) {\n                        if (this.stream) {\n                            this.stream.cancel();\n                        }\n                        return;\n                    }\n                    const stream = apiCall(argument, this._callback);\n                    this.stream = stream;\n                    this.forwardEvents(stream);\n                    return stream;\n                },\n                retries: retryRequestOptions.retries,\n                currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n                noResponseRetries: retryRequestOptions.noResponseRetries,\n                shouldRetryFn: retryRequestOptions.shouldRetryFn,\n            });\n            this.setReadable(retryStream);\n            return;\n        }\n        const stream = apiCall(argument, this._callback);\n        this.stream = stream;\n        this.forwardEvents(stream);\n        if (this.type === StreamType.CLIENT_STREAMING) {\n            this.setWritable(stream);\n        }\n        if (this.type === StreamType.BIDI_STREAMING) {\n            this.setReadable(stream);\n            this.setWritable(stream);\n        }\n        if (this._isCancelCalled && this.stream) {\n            this.stream.cancel();\n        }\n    }\n}\nexports.StreamProxy = StreamProxy;\n//# sourceMappingURL=streaming.js.map"]},"metadata":{},"sourceType":"script"}