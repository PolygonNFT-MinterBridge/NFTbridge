{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAgent = exports.pool = void 0;\n\nconst http_1 = require(\"http\");\n\nconst https_1 = require(\"https\"); // eslint-disable-next-line node/no-deprecated-api\n\n\nconst url_1 = require(\"url\");\n\nexports.pool = new Map();\n/**\n * Returns a custom request Agent if one is found, otherwise returns undefined\n * which will result in the global http(s) Agent being used.\n * @private\n * @param {string} uri The request uri\n * @param {Options} reqOpts The request options\n * @returns {HttpAnyAgent|undefined}\n */\n\nfunction getAgent(uri, reqOpts) {\n  const isHttp = uri.startsWith('http://');\n  const proxy = reqOpts.proxy || process.env.HTTP_PROXY || process.env.http_proxy || process.env.HTTPS_PROXY || process.env.https_proxy;\n  const poolOptions = Object.assign({}, reqOpts.pool);\n\n  if (proxy) {\n    // tslint:disable-next-line variable-name\n    const Agent = isHttp ? require('http-proxy-agent') : require('https-proxy-agent');\n    const proxyOpts = { ...url_1.parse(proxy),\n      ...poolOptions\n    };\n    return new Agent(proxyOpts);\n  }\n\n  let key = isHttp ? 'http' : 'https';\n\n  if (reqOpts.forever) {\n    key += ':forever';\n\n    if (!exports.pool.has(key)) {\n      // tslint:disable-next-line variable-name\n      const Agent = isHttp ? http_1.Agent : https_1.Agent;\n      exports.pool.set(key, new Agent({ ...poolOptions,\n        keepAlive: true\n      }));\n    }\n  }\n\n  return exports.pool.get(key);\n}\n\nexports.getAgent = getAgent;","map":{"version":3,"sources":["../../src/agents.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAEH,MAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA,C,CACA;;;AACA,MAAA,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AAGa,OAAA,CAAA,IAAA,GAAO,IAAI,GAAJ,EAAP;AAIb;;;;;;;AAOG;;AACH,SAAgB,QAAhB,CACE,GADF,EAEE,OAFF,EAEkB;AAEhB,QAAM,MAAM,GAAG,GAAG,CAAC,UAAJ,CAAe,SAAf,CAAf;AACA,QAAM,KAAK,GACT,OAAO,CAAC,KAAR,IACA,OAAO,CAAC,GAAR,CAAY,UADZ,IAEA,OAAO,CAAC,GAAR,CAAY,UAFZ,IAGA,OAAO,CAAC,GAAR,CAAY,WAHZ,IAIA,OAAO,CAAC,GAAR,CAAY,WALd;AAOA,QAAM,WAAW,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,OAAO,CAAC,IAA1B,CAApB;;AAEA,MAAI,KAAJ,EAAW;AACT;AACA,UAAM,KAAK,GAAG,MAAM,GAChB,OAAO,CAAC,kBAAD,CADS,GAEhB,OAAO,CAAC,mBAAD,CAFX;AAIA,UAAM,SAAS,GAAG,EAAC,GAAG,KAAA,CAAA,KAAA,CAAM,KAAN,CAAJ;AAAkB,SAAG;AAArB,KAAlB;AACA,WAAO,IAAI,KAAJ,CAAU,SAAV,CAAP;AACD;;AAED,MAAI,GAAG,GAAG,MAAM,GAAG,MAAH,GAAY,OAA5B;;AAEA,MAAI,OAAO,CAAC,OAAZ,EAAqB;AACnB,IAAA,GAAG,IAAI,UAAP;;AAEA,QAAI,CAAC,OAAA,CAAA,IAAA,CAAK,GAAL,CAAS,GAAT,CAAL,EAAoB;AAClB;AACA,YAAM,KAAK,GAAG,MAAM,GAAG,MAAA,CAAA,KAAH,GAAe,OAAA,CAAA,KAAnC;AACA,MAAA,OAAA,CAAA,IAAA,CAAK,GAAL,CAAS,GAAT,EAAc,IAAI,KAAJ,CAAU,EAAC,GAAG,WAAJ;AAAiB,QAAA,SAAS,EAAE;AAA5B,OAAV,CAAd;AACD;AACF;;AAED,SAAO,OAAA,CAAA,IAAA,CAAK,GAAL,CAAS,GAAT,CAAP;AACD;;AArCD,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAgent = exports.pool = void 0;\nconst http_1 = require(\"http\");\nconst https_1 = require(\"https\");\n// eslint-disable-next-line node/no-deprecated-api\nconst url_1 = require(\"url\");\nexports.pool = new Map();\n/**\n * Returns a custom request Agent if one is found, otherwise returns undefined\n * which will result in the global http(s) Agent being used.\n * @private\n * @param {string} uri The request uri\n * @param {Options} reqOpts The request options\n * @returns {HttpAnyAgent|undefined}\n */\nfunction getAgent(uri, reqOpts) {\n    const isHttp = uri.startsWith('http://');\n    const proxy = reqOpts.proxy ||\n        process.env.HTTP_PROXY ||\n        process.env.http_proxy ||\n        process.env.HTTPS_PROXY ||\n        process.env.https_proxy;\n    const poolOptions = Object.assign({}, reqOpts.pool);\n    if (proxy) {\n        // tslint:disable-next-line variable-name\n        const Agent = isHttp\n            ? require('http-proxy-agent')\n            : require('https-proxy-agent');\n        const proxyOpts = { ...url_1.parse(proxy), ...poolOptions };\n        return new Agent(proxyOpts);\n    }\n    let key = isHttp ? 'http' : 'https';\n    if (reqOpts.forever) {\n        key += ':forever';\n        if (!exports.pool.has(key)) {\n            // tslint:disable-next-line variable-name\n            const Agent = isHttp ? http_1.Agent : https_1.Agent;\n            exports.pool.set(key, new Agent({ ...poolOptions, keepAlive: true }));\n        }\n    }\n    return exports.pool.get(key);\n}\nexports.getAgent = getAgent;\n//# sourceMappingURL=agents.js.map"]},"metadata":{},"sourceType":"script"}