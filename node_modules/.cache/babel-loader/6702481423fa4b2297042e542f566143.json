{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HmacKey = void 0;\n\nconst common_1 = require(\"@google-cloud/common\");\n/**\n * The API-formatted resource description of the HMAC key.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name HmacKey#metadata\n * @type {object}\n */\n\n/**\n * An HmacKey object contains metadata of an HMAC key created from a\n * service account through the {@link Storage} client using\n * {@link Storage#createHmacKey}.\n *\n * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\n *\n * @class\n */\n\n\nclass HmacKey extends common_1.ServiceObject {\n  /**\n   * @typedef {object} HmacKeyOptions\n   * @property {string} [projectId] The project ID of the project that owns\n   *     the service account of the requested HMAC key. If not provided,\n   *     the project ID used to instantiate the Storage client will be used.\n   */\n\n  /**\n   * Constructs an HmacKey object.\n   *\n   * Note: this only create a local reference to an HMAC key, to create\n   * an HMAC key, use {@link Storage#createHmacKey}.\n   *\n   * @param {Storage} storage The Storage instance this HMAC key is\n   *     attached to.\n   * @param {string} accessId The unique accessId for this HMAC key.\n   * @param {HmacKeyOptions} options Constructor configurations.\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const hmacKey = storage.hmacKey('access-id');\n   */\n  constructor(storage, accessId, options) {\n    const methods = {\n      /**\n       * @typedef {object} DeleteHmacKeyOptions\n       * @property {string} [userProject] This parameter is currently ignored.\n       */\n\n      /**\n       * @typedef {array} DeleteHmacKeyResponse\n       * @property {object} 0 The full API response.\n       */\n\n      /**\n       * @callback DeleteHmacKeyCallback\n       * @param {?Error} err Request error, if any.\n       * @param {object} apiResponse The full API response.\n       */\n\n      /**\n       * Deletes an HMAC key.\n       * Key state must be set to `INACTIVE` prior to deletion.\n       * Caution: HMAC keys cannot be recovered once you delete them.\n       *\n       * The authenticated user must have `storage.hmacKeys.delete` permission for the project in which the key exists.\n       *\n       * @method HmacKey#delete\n       * @param {DeleteHmacKeyOptions} [options] Configuration options.\n       * @param {DeleteHmacKeyCallback} [callback] Callback function.\n       * @returns {Promise<DeleteHmacKeyResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       *\n       * //-\n       * // Delete HMAC key after making the key inactive.\n       * //-\n       * const hmacKey = storage.hmacKey('ACCESS_ID');\n       * hmacKey.setMetadata({state: 'INACTIVE'}, (err, hmacKeyMetadata) => {\n       *     if (err) {\n       *       // The request was an error.\n       *       console.error(err);\n       *       return;\n       *     }\n       *     hmacKey.delete((err) => {\n       *       if (err) {\n       *         console.error(err);\n       *         return;\n       *       }\n       *       // The HMAC key is deleted.\n       *     });\n       *   });\n       *\n       * //-\n       * // If the callback is omitted, a promise is returned.\n       * //-\n       * const hmacKey = storage.hmacKey('ACCESS_ID');\n       * hmacKey\n       *   .setMetadata({state: 'INACTIVE'})\n       *   .then(() => {\n       *     return hmacKey.delete();\n       *   });\n       */\n      delete: true,\n\n      /**\n       * @callback GetHmacKeyCallback\n       * @param {?Error} err Request error, if any.\n       * @param {HmacKey} hmacKey this {@link HmacKey} instance.\n       * @param {object} apiResponse The full API response.\n       */\n\n      /**\n       * @typedef {array} GetHmacKeyResponse\n       * @property {HmacKey} 0 This {@link HmacKey} instance.\n       * @property {object} 1 The full API response.\n       */\n\n      /**\n       * @typedef {object} GetHmacKeyOptions\n       * @property {string} [userProject] This parameter is currently ignored.\n       */\n\n      /**\n       * Retrieves and populate an HMAC key's metadata, and return\n       * this {@link HmacKey} instance.\n       *\n       * HmacKey.get() does not give the HMAC key secret, as\n       * it is only returned on creation.\n       *\n       * The authenticated user must have `storage.hmacKeys.get` permission\n       * for the project in which the key exists.\n       *\n       * @method HmacKey#get\n       * @param {GetHmacKeyOptions} [options] Configuration options.\n       * @param {GetHmacKeyCallback} [callback] Callback function.\n       * @returns {Promise<GetHmacKeyResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       *\n       * //-\n       * // Get the HmacKey's Metadata.\n       * //-\n       * storage.hmacKey('ACCESS_ID')\n       *   .get((err, hmacKey) => {\n       *     if (err) {\n       *       // The request was an error.\n       *       console.error(err);\n       *       return;\n       *     }\n       *     // do something with the returned HmacKey object.\n       *   });\n       *\n       * //-\n       * // If the callback is omitted, a promise is returned.\n       * //-\n       * storage.hmacKey('ACCESS_ID')\n       *   .get()\n       *   .then((data) => {\n       *     const hmacKey = data[0];\n       *   });\n       */\n      get: true,\n\n      /**\n       * @typedef {object} GetHmacKeyMetadataOptions\n       * @property {string} [userProject] This parameter is currently ignored.\n       */\n\n      /**\n       * Retrieves and populate an HMAC key's metadata, and return\n       * the HMAC key's metadata as an object.\n       *\n       * HmacKey.getMetadata() does not give the HMAC key secret, as\n       * it is only returned on creation.\n       *\n       * The authenticated user must have `storage.hmacKeys.get` permission\n       * for the project in which the key exists.\n       *\n       * @method HmacKey#getMetadata\n       * @param {GetHmacKeyMetadataOptions} [options] Configuration options.\n       * @param {HmacKeyMetadataCallback} [callback] Callback function.\n       * @returns {Promise<HmacKeyMetadataResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       *\n       * //-\n       * // Get the HmacKey's metadata and populate to the metadata property.\n       * //-\n       * storage.hmacKey('ACCESS_ID')\n       *   .getMetadata((err, hmacKeyMetadata) => {\n       *     if (err) {\n       *       // The request was an error.\n       *       console.error(err);\n       *       return;\n       *     }\n       *     console.log(hmacKeyMetadata);\n       *   });\n       *\n       * //-\n       * // If the callback is omitted, a promise is returned.\n       * //-\n       * storage.hmacKey('ACCESS_ID')\n       *   .getMetadata()\n       *   .then((data) => {\n       *     const hmacKeyMetadata = data[0];\n       *     console.log(hmacKeyMetadata);\n       *   });\n       */\n      getMetadata: true,\n\n      /**\n       * @typedef {object} SetHmacKeyMetadata Subset of {@link HmacKeyMetadata} to update.\n       * @property {string} state New state of the HmacKey. Either 'ACTIVE' or 'INACTIVE'.\n       * @property {string} [etag] Include an etag from a previous get HMAC key request\n       *    to perform safe read-modify-write.\n       */\n\n      /**\n       * @typedef {object} SetHmacKeyMetadataOptions\n       * @property {string} [userProject] This parameter is currently ignored.\n       */\n\n      /**\n       * @callback HmacKeyMetadataCallback\n       * @param {?Error} err Request error, if any.\n       * @param {HmacKeyMetadata} metadata The updated {@link HmacKeyMetadata} object.\n       * @param {object} apiResponse The full API response.\n       */\n\n      /**\n       * @typedef {array} HmacKeyMetadataResponse\n       * @property {HmacKeyMetadata} 0 The updated {@link HmacKeyMetadata} object.\n       * @property {object} 1 The full API response.\n       */\n\n      /**\n       * Updates the state of an HMAC key. See {@link SetHmacKeyMetadata} for\n       * valid states.\n       *\n       * @method HmacKey#setMetadata\n       * @param {SetHmacKeyMetadata} metadata The new metadata.\n       * @param {SetHmacKeyMetadataOptions} [options] Configuration options.\n       * @param {HmacKeyMetadataCallback} [callback] Callback function.\n       * @returns {Promise<HmacKeyMetadataResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       *\n       * const metadata = {\n       *   state: 'INACTIVE',\n       * };\n       *\n       * storage.hmacKey('ACCESS_ID')\n       *   .setMetadata(metadata, (err, hmacKeyMetadata) => {\n       *     if (err) {\n       *       // The request was an error.\n       *       console.error(err);\n       *       return;\n       *     }\n       *     console.log(hmacKeyMetadata);\n       *   });\n       *\n       * //-\n       * // If the callback is omitted, a promise is returned.\n       * //-\n       * storage.hmacKey('ACCESS_ID')\n       *   .setMetadata(metadata)\n       *   .then((data) => {\n       *     const hmacKeyMetadata = data[0];\n       *     console.log(hmacKeyMetadata);\n       *   });\n       */\n      setMetadata: {\n        reqOpts: {\n          method: 'PUT'\n        }\n      }\n    };\n    const projectId = options && options.projectId || storage.projectId;\n    super({\n      parent: storage,\n      id: accessId,\n      baseUrl: `/projects/${projectId}/hmacKeys`,\n      methods\n    });\n  }\n\n}\n\nexports.HmacKey = HmacKey;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/storage/build/src/hmacKey.js"],"names":["Object","defineProperty","exports","value","HmacKey","common_1","require","ServiceObject","constructor","storage","accessId","options","methods","delete","get","getMetadata","setMetadata","reqOpts","method","projectId","parent","id","baseUrl"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,OAAN,SAAsBC,QAAQ,CAACE,aAA/B,CAA6C;AACzC;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoBC,OAApB,EAA6B;AACpC,UAAMC,OAAO,GAAG;AACZ;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,MAAM,EAAE,IA3DI;;AA4DZ;AACZ;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,GAAG,EAAE,IApHO;;AAqHZ;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,WAAW,EAAE,IAnKD;;AAoKZ;AACZ;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,WAAW,EAAE;AACTC,QAAAA,OAAO,EAAE;AACLC,UAAAA,MAAM,EAAE;AADH;AADA;AA/ND,KAAhB;AAqOA,UAAMC,SAAS,GAAIR,OAAO,IAAIA,OAAO,CAACQ,SAApB,IAAkCV,OAAO,CAACU,SAA5D;AACA,UAAM;AACFC,MAAAA,MAAM,EAAEX,OADN;AAEFY,MAAAA,EAAE,EAAEX,QAFF;AAGFY,MAAAA,OAAO,EAAG,aAAYH,SAAU,WAH9B;AAIFP,MAAAA;AAJE,KAAN;AAMH;;AAnQwC;;AAqQ7CV,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HmacKey = void 0;\nconst common_1 = require(\"@google-cloud/common\");\n/**\n * The API-formatted resource description of the HMAC key.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name HmacKey#metadata\n * @type {object}\n */\n/**\n * An HmacKey object contains metadata of an HMAC key created from a\n * service account through the {@link Storage} client using\n * {@link Storage#createHmacKey}.\n *\n * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\n *\n * @class\n */\nclass HmacKey extends common_1.ServiceObject {\n    /**\n     * @typedef {object} HmacKeyOptions\n     * @property {string} [projectId] The project ID of the project that owns\n     *     the service account of the requested HMAC key. If not provided,\n     *     the project ID used to instantiate the Storage client will be used.\n     */\n    /**\n     * Constructs an HmacKey object.\n     *\n     * Note: this only create a local reference to an HMAC key, to create\n     * an HMAC key, use {@link Storage#createHmacKey}.\n     *\n     * @param {Storage} storage The Storage instance this HMAC key is\n     *     attached to.\n     * @param {string} accessId The unique accessId for this HMAC key.\n     * @param {HmacKeyOptions} options Constructor configurations.\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const hmacKey = storage.hmacKey('access-id');\n     */\n    constructor(storage, accessId, options) {\n        const methods = {\n            /**\n             * @typedef {object} DeleteHmacKeyOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * @typedef {array} DeleteHmacKeyResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * @callback DeleteHmacKeyCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Deletes an HMAC key.\n             * Key state must be set to `INACTIVE` prior to deletion.\n             * Caution: HMAC keys cannot be recovered once you delete them.\n             *\n             * The authenticated user must have `storage.hmacKeys.delete` permission for the project in which the key exists.\n             *\n             * @method HmacKey#delete\n             * @param {DeleteHmacKeyOptions} [options] Configuration options.\n             * @param {DeleteHmacKeyCallback} [callback] Callback function.\n             * @returns {Promise<DeleteHmacKeyResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * //-\n             * // Delete HMAC key after making the key inactive.\n             * //-\n             * const hmacKey = storage.hmacKey('ACCESS_ID');\n             * hmacKey.setMetadata({state: 'INACTIVE'}, (err, hmacKeyMetadata) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     hmacKey.delete((err) => {\n             *       if (err) {\n             *         console.error(err);\n             *         return;\n             *       }\n             *       // The HMAC key is deleted.\n             *     });\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * const hmacKey = storage.hmacKey('ACCESS_ID');\n             * hmacKey\n             *   .setMetadata({state: 'INACTIVE'})\n             *   .then(() => {\n             *     return hmacKey.delete();\n             *   });\n             */\n            delete: true,\n            /**\n             * @callback GetHmacKeyCallback\n             * @param {?Error} err Request error, if any.\n             * @param {HmacKey} hmacKey this {@link HmacKey} instance.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} GetHmacKeyResponse\n             * @property {HmacKey} 0 This {@link HmacKey} instance.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @typedef {object} GetHmacKeyOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * Retrieves and populate an HMAC key's metadata, and return\n             * this {@link HmacKey} instance.\n             *\n             * HmacKey.get() does not give the HMAC key secret, as\n             * it is only returned on creation.\n             *\n             * The authenticated user must have `storage.hmacKeys.get` permission\n             * for the project in which the key exists.\n             *\n             * @method HmacKey#get\n             * @param {GetHmacKeyOptions} [options] Configuration options.\n             * @param {GetHmacKeyCallback} [callback] Callback function.\n             * @returns {Promise<GetHmacKeyResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * //-\n             * // Get the HmacKey's Metadata.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .get((err, hmacKey) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     // do something with the returned HmacKey object.\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .get()\n             *   .then((data) => {\n             *     const hmacKey = data[0];\n             *   });\n             */\n            get: true,\n            /**\n             * @typedef {object} GetHmacKeyMetadataOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * Retrieves and populate an HMAC key's metadata, and return\n             * the HMAC key's metadata as an object.\n             *\n             * HmacKey.getMetadata() does not give the HMAC key secret, as\n             * it is only returned on creation.\n             *\n             * The authenticated user must have `storage.hmacKeys.get` permission\n             * for the project in which the key exists.\n             *\n             * @method HmacKey#getMetadata\n             * @param {GetHmacKeyMetadataOptions} [options] Configuration options.\n             * @param {HmacKeyMetadataCallback} [callback] Callback function.\n             * @returns {Promise<HmacKeyMetadataResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * //-\n             * // Get the HmacKey's metadata and populate to the metadata property.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .getMetadata((err, hmacKeyMetadata) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     console.log(hmacKeyMetadata);\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .getMetadata()\n             *   .then((data) => {\n             *     const hmacKeyMetadata = data[0];\n             *     console.log(hmacKeyMetadata);\n             *   });\n             */\n            getMetadata: true,\n            /**\n             * @typedef {object} SetHmacKeyMetadata Subset of {@link HmacKeyMetadata} to update.\n             * @property {string} state New state of the HmacKey. Either 'ACTIVE' or 'INACTIVE'.\n             * @property {string} [etag] Include an etag from a previous get HMAC key request\n             *    to perform safe read-modify-write.\n             */\n            /**\n             * @typedef {object} SetHmacKeyMetadataOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * @callback HmacKeyMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {HmacKeyMetadata} metadata The updated {@link HmacKeyMetadata} object.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} HmacKeyMetadataResponse\n             * @property {HmacKeyMetadata} 0 The updated {@link HmacKeyMetadata} object.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * Updates the state of an HMAC key. See {@link SetHmacKeyMetadata} for\n             * valid states.\n             *\n             * @method HmacKey#setMetadata\n             * @param {SetHmacKeyMetadata} metadata The new metadata.\n             * @param {SetHmacKeyMetadataOptions} [options] Configuration options.\n             * @param {HmacKeyMetadataCallback} [callback] Callback function.\n             * @returns {Promise<HmacKeyMetadataResponse>}\n             *\n             * @example\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * const metadata = {\n             *   state: 'INACTIVE',\n             * };\n             *\n             * storage.hmacKey('ACCESS_ID')\n             *   .setMetadata(metadata, (err, hmacKeyMetadata) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     console.log(hmacKeyMetadata);\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .setMetadata(metadata)\n             *   .then((data) => {\n             *     const hmacKeyMetadata = data[0];\n             *     console.log(hmacKeyMetadata);\n             *   });\n             */\n            setMetadata: {\n                reqOpts: {\n                    method: 'PUT',\n                },\n            },\n        };\n        const projectId = (options && options.projectId) || storage.projectId;\n        super({\n            parent: storage,\n            id: accessId,\n            baseUrl: `/projects/${projectId}/hmacKeys`,\n            methods,\n        });\n    }\n}\nexports.HmacKey = HmacKey;\n//# sourceMappingURL=hmacKey.js.map"]},"metadata":{},"sourceType":"script"}