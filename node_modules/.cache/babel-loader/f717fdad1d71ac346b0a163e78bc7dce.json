{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.teenyRequest = exports.RequestError = void 0;\n\nconst node_fetch_1 = require(\"node-fetch\");\n\nconst stream_1 = require(\"stream\");\n\nconst uuid = require(\"uuid\");\n\nconst agents_1 = require(\"./agents\");\n\nconst TeenyStatistics_1 = require(\"./TeenyStatistics\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst streamEvents = require('stream-events');\n\nclass RequestError extends Error {}\n\nexports.RequestError = RequestError;\n/**\n * Convert options from Request to Fetch format\n * @private\n * @param reqOpts Request options\n */\n\nfunction requestToFetchOptions(reqOpts) {\n  const options = {\n    method: reqOpts.method || 'GET',\n    ...(reqOpts.timeout && {\n      timeout: reqOpts.timeout\n    }),\n    ...(typeof reqOpts.gzip === 'boolean' && {\n      compress: reqOpts.gzip\n    })\n  };\n\n  if (typeof reqOpts.json === 'object') {\n    // Add Content-type: application/json header\n    reqOpts.headers = reqOpts.headers || {};\n    reqOpts.headers['Content-Type'] = 'application/json'; // Set body to JSON representation of value\n\n    options.body = JSON.stringify(reqOpts.json);\n  } else {\n    if (typeof reqOpts.body !== 'string') {\n      options.body = JSON.stringify(reqOpts.body);\n    } else {\n      options.body = reqOpts.body;\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  options.headers = reqOpts.headers;\n  let uri = reqOpts.uri || reqOpts.url;\n\n  if (reqOpts.useQuerystring === true || typeof reqOpts.qs === 'object') {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const qs = require('querystring');\n\n    const params = qs.stringify(reqOpts.qs);\n    uri = uri + '?' + params;\n  }\n\n  options.agent = agents_1.getAgent(uri, reqOpts);\n  return {\n    uri,\n    options\n  };\n}\n/**\n * Convert a response from `fetch` to `request` format.\n * @private\n * @param opts The `request` options used to create the request.\n * @param res The Fetch response\n * @returns A `request` response object\n */\n\n\nfunction fetchToRequestResponse(opts, res) {\n  const request = {};\n  request.agent = opts.agent || false;\n  request.headers = opts.headers || {};\n  request.href = res.url; // headers need to be converted from a map to an obj\n\n  const resHeaders = {};\n  res.headers.forEach((value, key) => resHeaders[key] = value);\n  const response = Object.assign(res.body, {\n    statusCode: res.status,\n    statusMessage: res.statusText,\n    request,\n    body: res.body,\n    headers: resHeaders,\n    toJSON: () => ({\n      headers: resHeaders\n    })\n  });\n  return response;\n}\n/**\n * Create POST body from two parts as multipart/related content-type\n * @private\n * @param boundary\n * @param multipart\n */\n\n\nfunction createMultipartStream(boundary, multipart) {\n  const finale = `--${boundary}--`;\n  const stream = new stream_1.PassThrough();\n\n  for (const part of multipart) {\n    const preamble = `--${boundary}\\r\\nContent-Type: ${part['Content-Type']}\\r\\n\\r\\n`;\n    stream.write(preamble);\n\n    if (typeof part.body === 'string') {\n      stream.write(part.body);\n      stream.write('\\r\\n');\n    } else {\n      part.body.pipe(stream, {\n        end: false\n      });\n      part.body.on('end', () => {\n        stream.write('\\r\\n');\n        stream.write(finale);\n        stream.end();\n      });\n    }\n  }\n\n  return stream;\n}\n\nfunction teenyRequest(reqOpts, callback) {\n  const {\n    uri,\n    options\n  } = requestToFetchOptions(reqOpts);\n  const multipart = reqOpts.multipart;\n\n  if (reqOpts.multipart && multipart.length === 2) {\n    if (!callback) {\n      // TODO: add support for multipart uploads through streaming\n      throw new Error('Multipart without callback is not implemented.');\n    }\n\n    const boundary = uuid.v4();\n    options.headers['Content-Type'] = `multipart/related; boundary=${boundary}`;\n    options.body = createMultipartStream(boundary, multipart); // Multipart upload\n\n    teenyRequest.stats.requestStarting();\n    node_fetch_1.default(uri, options).then(res => {\n      teenyRequest.stats.requestFinished();\n      const header = res.headers.get('content-type');\n      const response = fetchToRequestResponse(options, res);\n      const body = response.body;\n\n      if (header === 'application/json' || header === 'application/json; charset=utf-8') {\n        res.json().then(json => {\n          response.body = json;\n          callback(null, response, json);\n        }, err => {\n          callback(err, response, body);\n        });\n        return;\n      }\n\n      res.text().then(text => {\n        response.body = text;\n        callback(null, response, text);\n      }, err => {\n        callback(err, response, body);\n      });\n    }, err => {\n      teenyRequest.stats.requestFinished();\n      callback(err, null, null);\n    });\n    return;\n  }\n\n  if (callback === undefined) {\n    // Stream mode\n    const requestStream = streamEvents(new stream_1.PassThrough()); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    let responseStream;\n    requestStream.once('reading', () => {\n      if (responseStream) {\n        responseStream.pipe(requestStream);\n      } else {\n        requestStream.once('response', () => {\n          responseStream.pipe(requestStream);\n        });\n      }\n    });\n    options.compress = false;\n    teenyRequest.stats.requestStarting();\n    node_fetch_1.default(uri, options).then(res => {\n      teenyRequest.stats.requestFinished();\n      responseStream = res.body;\n      responseStream.on('error', err => {\n        requestStream.emit('error', err);\n      });\n      const response = fetchToRequestResponse(options, res);\n      requestStream.emit('response', response);\n    }, err => {\n      teenyRequest.stats.requestFinished();\n      requestStream.emit('error', err);\n    }); // fetch doesn't supply the raw HTTP stream, instead it\n    // returns a PassThrough piped from the HTTP response\n    // stream.\n\n    return requestStream;\n  } // GET or POST with callback\n\n\n  teenyRequest.stats.requestStarting();\n  node_fetch_1.default(uri, options).then(res => {\n    teenyRequest.stats.requestFinished();\n    const header = res.headers.get('content-type');\n    const response = fetchToRequestResponse(options, res);\n    const body = response.body;\n\n    if (header === 'application/json' || header === 'application/json; charset=utf-8') {\n      if (response.statusCode === 204) {\n        // Probably a DELETE\n        callback(null, response, body);\n        return;\n      }\n\n      res.json().then(json => {\n        response.body = json;\n        callback(null, response, json);\n      }, err => {\n        callback(err, response, body);\n      });\n      return;\n    }\n\n    res.text().then(text => {\n      const response = fetchToRequestResponse(options, res);\n      response.body = text;\n      callback(null, response, text);\n    }, err => {\n      callback(err, response, body);\n    });\n  }, err => {\n    teenyRequest.stats.requestFinished();\n    callback(err, null, null);\n  });\n  return;\n}\n\nexports.teenyRequest = teenyRequest;\n\nteenyRequest.defaults = defaults => {\n  return (reqOpts, callback) => {\n    const opts = { ...defaults,\n      ...reqOpts\n    };\n\n    if (callback === undefined) {\n      return teenyRequest(opts);\n    }\n\n    teenyRequest(opts, callback);\n  };\n};\n/**\n * Single instance of an interface for keeping track of things.\n */\n\n\nteenyRequest.stats = new TeenyStatistics_1.TeenyStatistics();\n\nteenyRequest.resetStats = () => {\n  teenyRequest.stats = new TeenyStatistics_1.TeenyStatistics(teenyRequest.stats.getOptions());\n};","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.teenyRequest = exports.RequestError = void 0;\nconst node_fetch_1 = require(\"node-fetch\");\nconst stream_1 = require(\"stream\");\nconst uuid = require(\"uuid\");\nconst agents_1 = require(\"./agents\");\nconst TeenyStatistics_1 = require(\"./TeenyStatistics\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst streamEvents = require('stream-events');\nclass RequestError extends Error {\n}\nexports.RequestError = RequestError;\n/**\n * Convert options from Request to Fetch format\n * @private\n * @param reqOpts Request options\n */\nfunction requestToFetchOptions(reqOpts) {\n    const options = {\n        method: reqOpts.method || 'GET',\n        ...(reqOpts.timeout && { timeout: reqOpts.timeout }),\n        ...(typeof reqOpts.gzip === 'boolean' && { compress: reqOpts.gzip }),\n    };\n    if (typeof reqOpts.json === 'object') {\n        // Add Content-type: application/json header\n        reqOpts.headers = reqOpts.headers || {};\n        reqOpts.headers['Content-Type'] = 'application/json';\n        // Set body to JSON representation of value\n        options.body = JSON.stringify(reqOpts.json);\n    }\n    else {\n        if (typeof reqOpts.body !== 'string') {\n            options.body = JSON.stringify(reqOpts.body);\n        }\n        else {\n            options.body = reqOpts.body;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options.headers = reqOpts.headers;\n    let uri = (reqOpts.uri ||\n        reqOpts.url);\n    if (reqOpts.useQuerystring === true || typeof reqOpts.qs === 'object') {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const qs = require('querystring');\n        const params = qs.stringify(reqOpts.qs);\n        uri = uri + '?' + params;\n    }\n    options.agent = agents_1.getAgent(uri, reqOpts);\n    return { uri, options };\n}\n/**\n * Convert a response from `fetch` to `request` format.\n * @private\n * @param opts The `request` options used to create the request.\n * @param res The Fetch response\n * @returns A `request` response object\n */\nfunction fetchToRequestResponse(opts, res) {\n    const request = {};\n    request.agent = opts.agent || false;\n    request.headers = (opts.headers || {});\n    request.href = res.url;\n    // headers need to be converted from a map to an obj\n    const resHeaders = {};\n    res.headers.forEach((value, key) => (resHeaders[key] = value));\n    const response = Object.assign(res.body, {\n        statusCode: res.status,\n        statusMessage: res.statusText,\n        request,\n        body: res.body,\n        headers: resHeaders,\n        toJSON: () => ({ headers: resHeaders }),\n    });\n    return response;\n}\n/**\n * Create POST body from two parts as multipart/related content-type\n * @private\n * @param boundary\n * @param multipart\n */\nfunction createMultipartStream(boundary, multipart) {\n    const finale = `--${boundary}--`;\n    const stream = new stream_1.PassThrough();\n    for (const part of multipart) {\n        const preamble = `--${boundary}\\r\\nContent-Type: ${part['Content-Type']}\\r\\n\\r\\n`;\n        stream.write(preamble);\n        if (typeof part.body === 'string') {\n            stream.write(part.body);\n            stream.write('\\r\\n');\n        }\n        else {\n            part.body.pipe(stream, { end: false });\n            part.body.on('end', () => {\n                stream.write('\\r\\n');\n                stream.write(finale);\n                stream.end();\n            });\n        }\n    }\n    return stream;\n}\nfunction teenyRequest(reqOpts, callback) {\n    const { uri, options } = requestToFetchOptions(reqOpts);\n    const multipart = reqOpts.multipart;\n    if (reqOpts.multipart && multipart.length === 2) {\n        if (!callback) {\n            // TODO: add support for multipart uploads through streaming\n            throw new Error('Multipart without callback is not implemented.');\n        }\n        const boundary = uuid.v4();\n        options.headers['Content-Type'] = `multipart/related; boundary=${boundary}`;\n        options.body = createMultipartStream(boundary, multipart);\n        // Multipart upload\n        teenyRequest.stats.requestStarting();\n        node_fetch_1.default(uri, options).then(res => {\n            teenyRequest.stats.requestFinished();\n            const header = res.headers.get('content-type');\n            const response = fetchToRequestResponse(options, res);\n            const body = response.body;\n            if (header === 'application/json' ||\n                header === 'application/json; charset=utf-8') {\n                res.json().then(json => {\n                    response.body = json;\n                    callback(null, response, json);\n                }, (err) => {\n                    callback(err, response, body);\n                });\n                return;\n            }\n            res.text().then(text => {\n                response.body = text;\n                callback(null, response, text);\n            }, err => {\n                callback(err, response, body);\n            });\n        }, err => {\n            teenyRequest.stats.requestFinished();\n            callback(err, null, null);\n        });\n        return;\n    }\n    if (callback === undefined) {\n        // Stream mode\n        const requestStream = streamEvents(new stream_1.PassThrough());\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let responseStream;\n        requestStream.once('reading', () => {\n            if (responseStream) {\n                responseStream.pipe(requestStream);\n            }\n            else {\n                requestStream.once('response', () => {\n                    responseStream.pipe(requestStream);\n                });\n            }\n        });\n        options.compress = false;\n        teenyRequest.stats.requestStarting();\n        node_fetch_1.default(uri, options).then(res => {\n            teenyRequest.stats.requestFinished();\n            responseStream = res.body;\n            responseStream.on('error', (err) => {\n                requestStream.emit('error', err);\n            });\n            const response = fetchToRequestResponse(options, res);\n            requestStream.emit('response', response);\n        }, err => {\n            teenyRequest.stats.requestFinished();\n            requestStream.emit('error', err);\n        });\n        // fetch doesn't supply the raw HTTP stream, instead it\n        // returns a PassThrough piped from the HTTP response\n        // stream.\n        return requestStream;\n    }\n    // GET or POST with callback\n    teenyRequest.stats.requestStarting();\n    node_fetch_1.default(uri, options).then(res => {\n        teenyRequest.stats.requestFinished();\n        const header = res.headers.get('content-type');\n        const response = fetchToRequestResponse(options, res);\n        const body = response.body;\n        if (header === 'application/json' ||\n            header === 'application/json; charset=utf-8') {\n            if (response.statusCode === 204) {\n                // Probably a DELETE\n                callback(null, response, body);\n                return;\n            }\n            res.json().then(json => {\n                response.body = json;\n                callback(null, response, json);\n            }, err => {\n                callback(err, response, body);\n            });\n            return;\n        }\n        res.text().then(text => {\n            const response = fetchToRequestResponse(options, res);\n            response.body = text;\n            callback(null, response, text);\n        }, err => {\n            callback(err, response, body);\n        });\n    }, err => {\n        teenyRequest.stats.requestFinished();\n        callback(err, null, null);\n    });\n    return;\n}\nexports.teenyRequest = teenyRequest;\nteenyRequest.defaults = (defaults) => {\n    return (reqOpts, callback) => {\n        const opts = { ...defaults, ...reqOpts };\n        if (callback === undefined) {\n            return teenyRequest(opts);\n        }\n        teenyRequest(opts, callback);\n    };\n};\n/**\n * Single instance of an interface for keeping track of things.\n */\nteenyRequest.stats = new TeenyStatistics_1.TeenyStatistics();\nteenyRequest.resetStats = () => {\n    teenyRequest.stats = new TeenyStatistics_1.TeenyStatistics(teenyRequest.stats.getOptions());\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}