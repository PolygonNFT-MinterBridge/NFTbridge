{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"./util\");\n\nconst validate_1 = require(\"./validate\");\n/*!\n * The default database ID for this Firestore client. We do not yet expose the\n * ability to use different databases.\n */\n\n\nexports.DEFAULT_DATABASE_ID = '(default)';\n/*!\n * A regular expression to verify an absolute Resource Path in Firestore. It\n * extracts the project ID, the database name and the relative resource path\n * if available.\n *\n * @type {RegExp}\n */\n\nconst RESOURCE_PATH_RE = // Note: [\\s\\S] matches all characters including newlines.\n/^projects\\/([^/]*)\\/databases\\/([^/]*)(?:\\/documents\\/)?([\\s\\S]*)$/;\n/*!\n * A regular expression to verify whether a field name can be passed to the\n * backend without escaping.\n *\n * @type {RegExp}\n */\n\nconst UNESCAPED_FIELD_NAME_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/*!\n * A regular expression to verify field paths that are passed to the API as\n * strings. Field paths that do not match this expression have to be provided\n * as a [FieldPath]{@link FieldPath} object.\n *\n * @type {RegExp}\n */\n\nconst FIELD_PATH_RE = /^[^*~/[\\]]+$/;\n/**\n * An abstract class representing a Firestore path.\n *\n * Subclasses have to implement `split()` and `canonicalString()`.\n *\n * @private\n * @class\n */\n\nclass Path {\n  /**\n   * Creates a new Path with the given segments.\n   *\n   * @private\n   * @hideconstructor\n   * @param segments Sequence of parts of a path.\n   */\n  constructor(segments) {\n    this.segments = segments;\n  }\n  /**\n   * Returns the number of segments of this field path.\n   *\n   * @private\n   */\n\n\n  get size() {\n    return this.segments.length;\n  }\n  /**\n   * Create a child path beneath the current level.\n   *\n   * @private\n   * @param relativePath Relative path to append to the current path.\n   * @returns The new path.\n   */\n\n\n  append(relativePath) {\n    if (relativePath instanceof Path) {\n      return this.construct(this.segments.concat(relativePath.segments));\n    }\n\n    return this.construct(this.segments.concat(this.split(relativePath)));\n  }\n  /**\n   * Returns the path of the parent node.\n   *\n   * @private\n   * @returns The new path or null if we are already at the root.\n   */\n\n\n  parent() {\n    if (this.segments.length === 0) {\n      return null;\n    }\n\n    return this.construct(this.segments.slice(0, this.segments.length - 1));\n  }\n  /**\n   * Checks whether the current path is a prefix of the specified path.\n   *\n   * @private\n   * @param other The path to check against.\n   * @returns 'true' iff the current path is a prefix match with 'other'.\n   */\n\n\n  isPrefixOf(other) {\n    if (other.segments.length < this.segments.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.segments.length; i++) {\n      if (this.segments[i] !== other.segments[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Compare the current path against another Path object.\n   *\n   * @private\n   * @param other The path to compare to.\n   * @returns -1 if current < other, 1 if current > other, 0 if equal\n   */\n\n\n  compareTo(other) {\n    const len = Math.min(this.segments.length, other.segments.length);\n\n    for (let i = 0; i < len; i++) {\n      if (this.segments[i] < other.segments[i]) {\n        return -1;\n      }\n\n      if (this.segments[i] > other.segments[i]) {\n        return 1;\n      }\n    }\n\n    if (this.segments.length < other.segments.length) {\n      return -1;\n    }\n\n    if (this.segments.length > other.segments.length) {\n      return 1;\n    }\n\n    return 0;\n  }\n  /**\n   * Returns a copy of the underlying segments.\n   *\n   * @private\n   * @returns A copy of the segments that make up this path.\n   */\n\n\n  toArray() {\n    return this.segments.slice();\n  }\n  /**\n   * Pops the last segment from this `Path` and returns a newly constructed\n   * `Path`.\n   *\n   * @private\n   * @returns The newly created Path.\n   */\n\n\n  popLast() {\n    this.segments.pop();\n    return this.construct(this.segments);\n  }\n  /**\n   * Returns true if this `Path` is equal to the provided value.\n   *\n   * @private\n   * @param other The value to compare against.\n   * @return true if this `Path` is equal to the provided value.\n   */\n\n\n  isEqual(other) {\n    return this === other || this.compareTo(other) === 0;\n  }\n\n}\n/**\n * A slash-separated path for navigating resources within the current Firestore\n * instance.\n *\n * @private\n */\n\n\nclass ResourcePath extends Path {\n  /**\n   * Constructs a ResourcePath.\n   *\n   * @private\n   * @param segments Sequence of names of the parts of the path.\n   */\n  constructor(...segments) {\n    super(segments);\n  }\n  /**\n   * Indicates whether this path points to a document.\n   * @private\n   */\n\n\n  get isDocument() {\n    return this.segments.length > 0 && this.segments.length % 2 === 0;\n  }\n  /**\n   * Indicates whether this path points to a collection.\n   * @private\n   */\n\n\n  get isCollection() {\n    return this.segments.length % 2 === 1;\n  }\n  /**\n   * The last component of the path.\n   * @private\n   */\n\n\n  get id() {\n    if (this.segments.length > 0) {\n      return this.segments[this.segments.length - 1];\n    }\n\n    return null;\n  }\n  /**\n   * Returns the location of this path relative to the root of the project's\n   * database.\n   * @private\n   */\n\n\n  get relativeName() {\n    return this.segments.join('/');\n  }\n  /**\n   * Constructs a new instance of ResourcePath.\n   *\n   * @private\n   * @param segments Sequence of parts of the path.\n   * @returns The newly created ResourcePath.\n   */\n\n\n  construct(segments) {\n    return new ResourcePath(...segments);\n  }\n  /**\n   * Splits a string into path segments, using slashes as separators.\n   *\n   * @private\n   * @param relativePath The path to split.\n   * @returns The split path segments.\n   */\n\n\n  split(relativePath) {\n    // We may have an empty segment at the beginning or end if they had a\n    // leading or trailing slash (which we allow).\n    return relativePath.split('/').filter(segment => segment.length > 0);\n  }\n  /**\n   * Converts this path to a fully qualified ResourcePath.\n   *\n   * @private\n   * @param projectIdIfMissing The project ID of the current Firestore project.\n   * The project ID is only used if it's not provided as part of this\n   * ResourcePath.\n   * @return A fully-qualified resource path pointing to the same element.\n   */\n\n\n  toQualifiedResourcePath(projectIdIfMissing) {\n    return new QualifiedResourcePath(projectIdIfMissing, exports.DEFAULT_DATABASE_ID, ...this.segments);\n  }\n\n}\n\nexports.ResourcePath = ResourcePath;\n/**\n * A default instance pointing to the root collection.\n * @private\n */\n\nResourcePath.EMPTY = new ResourcePath();\n/**\n * A slash-separated path that includes a project and database ID for referring\n * to resources in any Firestore project.\n *\n * @private\n */\n\nclass QualifiedResourcePath extends ResourcePath {\n  /**\n   * Constructs a Firestore Resource Path.\n   *\n   * @private\n   * @param projectId The Firestore project id.\n   * @param databaseId The Firestore database id.\n   * @param segments Sequence of names of the parts of the path.\n   */\n  constructor(projectId, databaseId, ...segments) {\n    super(...segments);\n    this.projectId = projectId;\n    this.databaseId = databaseId;\n  }\n  /**\n   * String representation of the path relative to the database root.\n   * @private\n   */\n\n\n  get relativeName() {\n    return this.segments.join('/');\n  }\n  /**\n   * Creates a resource path from an absolute Firestore path.\n   *\n   * @private\n   * @param absolutePath A string representation of a Resource Path.\n   * @returns The new ResourcePath.\n   */\n\n\n  static fromSlashSeparatedString(absolutePath) {\n    const elements = RESOURCE_PATH_RE.exec(absolutePath);\n\n    if (elements) {\n      const project = elements[1];\n      const database = elements[2];\n      const path = elements[3];\n      return new QualifiedResourcePath(project, database).append(path);\n    }\n\n    throw new Error(`Resource name '${absolutePath}' is not valid.`);\n  }\n  /**\n   * Create a child path beneath the current level.\n   *\n   * @private\n   * @param relativePath Relative path to append to the current path.\n   * @returns The new path.\n   */\n\n\n  append(relativePath) {\n    // `super.append()` calls `QualifiedResourcePath.construct()` when invoked\n    // from here and returns a QualifiedResourcePath.\n    return super.append(relativePath);\n  }\n  /**\n   * Create a child path beneath the current level.\n   *\n   * @private\n   * @returns The new path.\n   */\n\n\n  parent() {\n    return super.parent();\n  }\n  /**\n   * String representation of a ResourcePath as expected by the API.\n   *\n   * @private\n   * @returns The representation as expected by the API.\n   */\n\n\n  get formattedName() {\n    const components = ['projects', this.projectId, 'databases', this.databaseId, 'documents', ...this.segments];\n    return components.join('/');\n  }\n  /**\n   * Constructs a new instance of ResourcePath. We need this instead of using\n   * the normal constructor because polymorphic 'this' doesn't work on static\n   * methods.\n   *\n   * @private\n   * @param segments Sequence of names of the parts of the path.\n   * @returns The newly created QualifiedResourcePath.\n   */\n\n\n  construct(segments) {\n    return new QualifiedResourcePath(this.projectId, this.databaseId, ...segments);\n  }\n  /**\n   * Convenience method to match the ResourcePath API. This method always\n   * returns the current instance.\n   *\n   * @private\n   */\n\n\n  toQualifiedResourcePath() {\n    return this;\n  }\n  /**\n   * Compare the current path against another ResourcePath object.\n   *\n   * @private\n   * @param other The path to compare to.\n   * @returns -1 if current < other, 1 if current > other, 0 if equal\n   */\n\n\n  compareTo(other) {\n    if (other instanceof QualifiedResourcePath) {\n      if (this.projectId < other.projectId) {\n        return -1;\n      }\n\n      if (this.projectId > other.projectId) {\n        return 1;\n      }\n\n      if (this.databaseId < other.databaseId) {\n        return -1;\n      }\n\n      if (this.databaseId > other.databaseId) {\n        return 1;\n      }\n    }\n\n    return super.compareTo(other);\n  }\n  /**\n   * Converts this ResourcePath to the Firestore Proto representation.\n   * @private\n   */\n\n\n  toProto() {\n    return {\n      referenceValue: this.formattedName\n    };\n  }\n\n}\n\nexports.QualifiedResourcePath = QualifiedResourcePath;\n/**\n * Validates that the given string can be used as a relative or absolute\n * resource path.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param resourcePath The path to validate.\n * @throws if the string can't be used as a resource path.\n */\n\nfunction validateResourcePath(arg, resourcePath) {\n  if (typeof resourcePath !== 'string' || resourcePath === '') {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'resource path')} Path must be a non-empty string.`);\n  }\n\n  if (resourcePath.indexOf('//') >= 0) {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'resource path')} Paths must not contain //.`);\n  }\n}\n\nexports.validateResourcePath = validateResourcePath;\n/**\n * A dot-separated path for navigating sub-objects (e.g. nested maps) within a document.\n *\n * @class\n */\n\nclass FieldPath extends Path {\n  /**\n   * Constructs a Firestore Field Path.\n   *\n   * @param {...string} segments Sequence of field names that form this path.\n   *\n   * @example\n   * let query = firestore.collection('col');\n   * let fieldPath = new FieldPath('f.o.o', 'bar');\n   *\n   * query.where(fieldPath, '==', 42).get().then(snapshot => {\n   *   snapshot.forEach(document => {\n   *     console.log(`Document contains {'f.o.o' : {'bar' : 42}}`);\n   *   });\n   * });\n   */\n  constructor(...segments) {\n    if (Array.isArray(segments[0])) {\n      throw new Error('The FieldPath constructor no longer supports an array as its first argument. ' + 'Please unpack your array and call FieldPath() with individual arguments.');\n    }\n\n    validate_1.validateMinNumberOfArguments('FieldPath', segments, 1);\n\n    for (let i = 0; i < segments.length; ++i) {\n      validate_1.validateString(i, segments[i]);\n\n      if (segments[i].length === 0) {\n        throw new Error(`Element at index ${i} should not be an empty string.`);\n      }\n    }\n\n    super(segments);\n  }\n  /**\n   * A special FieldPath value to refer to the ID of a document. It can be used\n   * in queries to sort or filter by the document ID.\n   *\n   * @returns {FieldPath}\n   */\n\n\n  static documentId() {\n    return FieldPath._DOCUMENT_ID;\n  }\n  /**\n   * Turns a field path argument into a [FieldPath]{@link FieldPath}.\n   * Supports FieldPaths as input (which are passed through) and dot-separated\n   * strings.\n   *\n   * @private\n   * @param {string|FieldPath} fieldPath The FieldPath to create.\n   * @returns {FieldPath} A field path representation.\n   */\n\n\n  static fromArgument(fieldPath) {\n    // validateFieldPath() is used in all public API entry points to validate\n    // that fromArgument() is only called with a Field Path or a string.\n    return fieldPath instanceof FieldPath ? fieldPath : new FieldPath(...fieldPath.split('.'));\n  }\n  /**\n   * String representation of a FieldPath as expected by the API.\n   *\n   * @private\n   * @override\n   * @returns {string} The representation as expected by the API.\n   */\n\n\n  get formattedName() {\n    return this.segments.map(str => {\n      return UNESCAPED_FIELD_NAME_RE.test(str) ? str : '`' + str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`') + '`';\n    }).join('.');\n  }\n  /**\n   * Returns a string representation of this path.\n   *\n   * @private\n   * @returns A string representing this path.\n   */\n\n\n  toString() {\n    return this.formattedName;\n  }\n  /**\n   * Splits a string into path segments, using dots as separators.\n   *\n   * @private\n   * @override\n   * @param {string} fieldPath The path to split.\n   * @returns {Array.<string>} - The split path segments.\n   */\n\n\n  split(fieldPath) {\n    return fieldPath.split('.');\n  }\n  /**\n   * Constructs a new instance of FieldPath. We need this instead of using\n   * the normal constructor because polymorphic 'this' doesn't work on static\n   * methods.\n   *\n   * @private\n   * @override\n   * @param segments Sequence of field names.\n   * @returns The newly created FieldPath.\n   */\n\n\n  construct(segments) {\n    return new FieldPath(...segments);\n  }\n  /**\n   * Returns true if this `FieldPath` is equal to the provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return {boolean} true if this `FieldPath` is equal to the provided value.\n   */\n\n\n  isEqual(other) {\n    return super.isEqual(other);\n  }\n\n}\n\nexports.FieldPath = FieldPath;\n/**\n * A special sentinel value to refer to the ID of a document.\n *\n * @private\n */\n\nFieldPath._DOCUMENT_ID = new FieldPath('__name__');\n/**\n * Validates that the provided value can be used as a field path argument.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param fieldPath The value to verify.\n * @throws if the string can't be used as a field path.\n */\n\nfunction validateFieldPath(arg, fieldPath) {\n  if (fieldPath instanceof FieldPath) {\n    return;\n  }\n\n  if (fieldPath === undefined) {\n    throw new Error(validate_1.invalidArgumentMessage(arg, 'field path') + ' The path cannot be omitted.');\n  }\n\n  if (util_1.isObject(fieldPath) && fieldPath.constructor.name === 'FieldPath') {\n    throw new Error(validate_1.customObjectMessage(arg, fieldPath));\n  }\n\n  if (typeof fieldPath !== 'string') {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths can only be specified as strings or via a FieldPath object.`);\n  }\n\n  if (fieldPath.indexOf('..') >= 0) {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths must not contain \"..\" in them.`);\n  }\n\n  if (fieldPath.startsWith('.') || fieldPath.endsWith('.')) {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths must not start or end with \".\".`);\n  }\n\n  if (!FIELD_PATH_RE.test(fieldPath)) {\n    throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths can't be empty and must not contain\n    \"*~/[]\".`);\n  }\n}\n\nexports.validateFieldPath = validateFieldPath;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/@google-cloud/firestore/build/src/path.js"],"names":["Object","defineProperty","exports","value","util_1","require","validate_1","DEFAULT_DATABASE_ID","RESOURCE_PATH_RE","UNESCAPED_FIELD_NAME_RE","FIELD_PATH_RE","Path","constructor","segments","size","length","append","relativePath","construct","concat","split","parent","slice","isPrefixOf","other","i","compareTo","len","Math","min","toArray","popLast","pop","isEqual","ResourcePath","isDocument","isCollection","id","relativeName","join","filter","segment","toQualifiedResourcePath","projectIdIfMissing","QualifiedResourcePath","EMPTY","projectId","databaseId","fromSlashSeparatedString","absolutePath","elements","exec","project","database","path","Error","formattedName","components","toProto","referenceValue","validateResourcePath","arg","resourcePath","invalidArgumentMessage","indexOf","FieldPath","Array","isArray","validateMinNumberOfArguments","validateString","documentId","_DOCUMENT_ID","fromArgument","fieldPath","map","str","test","replace","toString","validateFieldPath","undefined","isObject","name","customObjectMessage","startsWith","endsWith"],"mappings":"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","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/*!\n * The default database ID for this Firestore client. We do not yet expose the\n * ability to use different databases.\n */\nexports.DEFAULT_DATABASE_ID = '(default)';\n/*!\n * A regular expression to verify an absolute Resource Path in Firestore. It\n * extracts the project ID, the database name and the relative resource path\n * if available.\n *\n * @type {RegExp}\n */\nconst RESOURCE_PATH_RE = \n// Note: [\\s\\S] matches all characters including newlines.\n/^projects\\/([^/]*)\\/databases\\/([^/]*)(?:\\/documents\\/)?([\\s\\S]*)$/;\n/*!\n * A regular expression to verify whether a field name can be passed to the\n * backend without escaping.\n *\n * @type {RegExp}\n */\nconst UNESCAPED_FIELD_NAME_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/*!\n * A regular expression to verify field paths that are passed to the API as\n * strings. Field paths that do not match this expression have to be provided\n * as a [FieldPath]{@link FieldPath} object.\n *\n * @type {RegExp}\n */\nconst FIELD_PATH_RE = /^[^*~/[\\]]+$/;\n/**\n * An abstract class representing a Firestore path.\n *\n * Subclasses have to implement `split()` and `canonicalString()`.\n *\n * @private\n * @class\n */\nclass Path {\n    /**\n     * Creates a new Path with the given segments.\n     *\n     * @private\n     * @hideconstructor\n     * @param segments Sequence of parts of a path.\n     */\n    constructor(segments) {\n        this.segments = segments;\n    }\n    /**\n     * Returns the number of segments of this field path.\n     *\n     * @private\n     */\n    get size() {\n        return this.segments.length;\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @param relativePath Relative path to append to the current path.\n     * @returns The new path.\n     */\n    append(relativePath) {\n        if (relativePath instanceof Path) {\n            return this.construct(this.segments.concat(relativePath.segments));\n        }\n        return this.construct(this.segments.concat(this.split(relativePath)));\n    }\n    /**\n     * Returns the path of the parent node.\n     *\n     * @private\n     * @returns The new path or null if we are already at the root.\n     */\n    parent() {\n        if (this.segments.length === 0) {\n            return null;\n        }\n        return this.construct(this.segments.slice(0, this.segments.length - 1));\n    }\n    /**\n     * Checks whether the current path is a prefix of the specified path.\n     *\n     * @private\n     * @param other The path to check against.\n     * @returns 'true' iff the current path is a prefix match with 'other'.\n     */\n    isPrefixOf(other) {\n        if (other.segments.length < this.segments.length) {\n            return false;\n        }\n        for (let i = 0; i < this.segments.length; i++) {\n            if (this.segments[i] !== other.segments[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Compare the current path against another Path object.\n     *\n     * @private\n     * @param other The path to compare to.\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\n     */\n    compareTo(other) {\n        const len = Math.min(this.segments.length, other.segments.length);\n        for (let i = 0; i < len; i++) {\n            if (this.segments[i] < other.segments[i]) {\n                return -1;\n            }\n            if (this.segments[i] > other.segments[i]) {\n                return 1;\n            }\n        }\n        if (this.segments.length < other.segments.length) {\n            return -1;\n        }\n        if (this.segments.length > other.segments.length) {\n            return 1;\n        }\n        return 0;\n    }\n    /**\n     * Returns a copy of the underlying segments.\n     *\n     * @private\n     * @returns A copy of the segments that make up this path.\n     */\n    toArray() {\n        return this.segments.slice();\n    }\n    /**\n     * Pops the last segment from this `Path` and returns a newly constructed\n     * `Path`.\n     *\n     * @private\n     * @returns The newly created Path.\n     */\n    popLast() {\n        this.segments.pop();\n        return this.construct(this.segments);\n    }\n    /**\n     * Returns true if this `Path` is equal to the provided value.\n     *\n     * @private\n     * @param other The value to compare against.\n     * @return true if this `Path` is equal to the provided value.\n     */\n    isEqual(other) {\n        return this === other || this.compareTo(other) === 0;\n    }\n}\n/**\n * A slash-separated path for navigating resources within the current Firestore\n * instance.\n *\n * @private\n */\nclass ResourcePath extends Path {\n    /**\n     * Constructs a ResourcePath.\n     *\n     * @private\n     * @param segments Sequence of names of the parts of the path.\n     */\n    constructor(...segments) {\n        super(segments);\n    }\n    /**\n     * Indicates whether this path points to a document.\n     * @private\n     */\n    get isDocument() {\n        return this.segments.length > 0 && this.segments.length % 2 === 0;\n    }\n    /**\n     * Indicates whether this path points to a collection.\n     * @private\n     */\n    get isCollection() {\n        return this.segments.length % 2 === 1;\n    }\n    /**\n     * The last component of the path.\n     * @private\n     */\n    get id() {\n        if (this.segments.length > 0) {\n            return this.segments[this.segments.length - 1];\n        }\n        return null;\n    }\n    /**\n     * Returns the location of this path relative to the root of the project's\n     * database.\n     * @private\n     */\n    get relativeName() {\n        return this.segments.join('/');\n    }\n    /**\n     * Constructs a new instance of ResourcePath.\n     *\n     * @private\n     * @param segments Sequence of parts of the path.\n     * @returns The newly created ResourcePath.\n     */\n    construct(segments) {\n        return new ResourcePath(...segments);\n    }\n    /**\n     * Splits a string into path segments, using slashes as separators.\n     *\n     * @private\n     * @param relativePath The path to split.\n     * @returns The split path segments.\n     */\n    split(relativePath) {\n        // We may have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        return relativePath.split('/').filter(segment => segment.length > 0);\n    }\n    /**\n     * Converts this path to a fully qualified ResourcePath.\n     *\n     * @private\n     * @param projectIdIfMissing The project ID of the current Firestore project.\n     * The project ID is only used if it's not provided as part of this\n     * ResourcePath.\n     * @return A fully-qualified resource path pointing to the same element.\n     */\n    toQualifiedResourcePath(projectIdIfMissing) {\n        return new QualifiedResourcePath(projectIdIfMissing, exports.DEFAULT_DATABASE_ID, ...this.segments);\n    }\n}\nexports.ResourcePath = ResourcePath;\n/**\n * A default instance pointing to the root collection.\n * @private\n */\nResourcePath.EMPTY = new ResourcePath();\n/**\n * A slash-separated path that includes a project and database ID for referring\n * to resources in any Firestore project.\n *\n * @private\n */\nclass QualifiedResourcePath extends ResourcePath {\n    /**\n     * Constructs a Firestore Resource Path.\n     *\n     * @private\n     * @param projectId The Firestore project id.\n     * @param databaseId The Firestore database id.\n     * @param segments Sequence of names of the parts of the path.\n     */\n    constructor(projectId, databaseId, ...segments) {\n        super(...segments);\n        this.projectId = projectId;\n        this.databaseId = databaseId;\n    }\n    /**\n     * String representation of the path relative to the database root.\n     * @private\n     */\n    get relativeName() {\n        return this.segments.join('/');\n    }\n    /**\n     * Creates a resource path from an absolute Firestore path.\n     *\n     * @private\n     * @param absolutePath A string representation of a Resource Path.\n     * @returns The new ResourcePath.\n     */\n    static fromSlashSeparatedString(absolutePath) {\n        const elements = RESOURCE_PATH_RE.exec(absolutePath);\n        if (elements) {\n            const project = elements[1];\n            const database = elements[2];\n            const path = elements[3];\n            return new QualifiedResourcePath(project, database).append(path);\n        }\n        throw new Error(`Resource name '${absolutePath}' is not valid.`);\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @param relativePath Relative path to append to the current path.\n     * @returns The new path.\n     */\n    append(relativePath) {\n        // `super.append()` calls `QualifiedResourcePath.construct()` when invoked\n        // from here and returns a QualifiedResourcePath.\n        return super.append(relativePath);\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @returns The new path.\n     */\n    parent() {\n        return super.parent();\n    }\n    /**\n     * String representation of a ResourcePath as expected by the API.\n     *\n     * @private\n     * @returns The representation as expected by the API.\n     */\n    get formattedName() {\n        const components = [\n            'projects',\n            this.projectId,\n            'databases',\n            this.databaseId,\n            'documents',\n            ...this.segments,\n        ];\n        return components.join('/');\n    }\n    /**\n     * Constructs a new instance of ResourcePath. We need this instead of using\n     * the normal constructor because polymorphic 'this' doesn't work on static\n     * methods.\n     *\n     * @private\n     * @param segments Sequence of names of the parts of the path.\n     * @returns The newly created QualifiedResourcePath.\n     */\n    construct(segments) {\n        return new QualifiedResourcePath(this.projectId, this.databaseId, ...segments);\n    }\n    /**\n     * Convenience method to match the ResourcePath API. This method always\n     * returns the current instance.\n     *\n     * @private\n     */\n    toQualifiedResourcePath() {\n        return this;\n    }\n    /**\n     * Compare the current path against another ResourcePath object.\n     *\n     * @private\n     * @param other The path to compare to.\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\n     */\n    compareTo(other) {\n        if (other instanceof QualifiedResourcePath) {\n            if (this.projectId < other.projectId) {\n                return -1;\n            }\n            if (this.projectId > other.projectId) {\n                return 1;\n            }\n            if (this.databaseId < other.databaseId) {\n                return -1;\n            }\n            if (this.databaseId > other.databaseId) {\n                return 1;\n            }\n        }\n        return super.compareTo(other);\n    }\n    /**\n     * Converts this ResourcePath to the Firestore Proto representation.\n     * @private\n     */\n    toProto() {\n        return {\n            referenceValue: this.formattedName,\n        };\n    }\n}\nexports.QualifiedResourcePath = QualifiedResourcePath;\n/**\n * Validates that the given string can be used as a relative or absolute\n * resource path.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param resourcePath The path to validate.\n * @throws if the string can't be used as a resource path.\n */\nfunction validateResourcePath(arg, resourcePath) {\n    if (typeof resourcePath !== 'string' || resourcePath === '') {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'resource path')} Path must be a non-empty string.`);\n    }\n    if (resourcePath.indexOf('//') >= 0) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'resource path')} Paths must not contain //.`);\n    }\n}\nexports.validateResourcePath = validateResourcePath;\n/**\n * A dot-separated path for navigating sub-objects (e.g. nested maps) within a document.\n *\n * @class\n */\nclass FieldPath extends Path {\n    /**\n     * Constructs a Firestore Field Path.\n     *\n     * @param {...string} segments Sequence of field names that form this path.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     * let fieldPath = new FieldPath('f.o.o', 'bar');\n     *\n     * query.where(fieldPath, '==', 42).get().then(snapshot => {\n     *   snapshot.forEach(document => {\n     *     console.log(`Document contains {'f.o.o' : {'bar' : 42}}`);\n     *   });\n     * });\n     */\n    constructor(...segments) {\n        if (Array.isArray(segments[0])) {\n            throw new Error('The FieldPath constructor no longer supports an array as its first argument. ' +\n                'Please unpack your array and call FieldPath() with individual arguments.');\n        }\n        validate_1.validateMinNumberOfArguments('FieldPath', segments, 1);\n        for (let i = 0; i < segments.length; ++i) {\n            validate_1.validateString(i, segments[i]);\n            if (segments[i].length === 0) {\n                throw new Error(`Element at index ${i} should not be an empty string.`);\n            }\n        }\n        super(segments);\n    }\n    /**\n     * A special FieldPath value to refer to the ID of a document. It can be used\n     * in queries to sort or filter by the document ID.\n     *\n     * @returns {FieldPath}\n     */\n    static documentId() {\n        return FieldPath._DOCUMENT_ID;\n    }\n    /**\n     * Turns a field path argument into a [FieldPath]{@link FieldPath}.\n     * Supports FieldPaths as input (which are passed through) and dot-separated\n     * strings.\n     *\n     * @private\n     * @param {string|FieldPath} fieldPath The FieldPath to create.\n     * @returns {FieldPath} A field path representation.\n     */\n    static fromArgument(fieldPath) {\n        // validateFieldPath() is used in all public API entry points to validate\n        // that fromArgument() is only called with a Field Path or a string.\n        return fieldPath instanceof FieldPath\n            ? fieldPath\n            : new FieldPath(...fieldPath.split('.'));\n    }\n    /**\n     * String representation of a FieldPath as expected by the API.\n     *\n     * @private\n     * @override\n     * @returns {string} The representation as expected by the API.\n     */\n    get formattedName() {\n        return this.segments\n            .map(str => {\n            return UNESCAPED_FIELD_NAME_RE.test(str)\n                ? str\n                : '`' + str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`') + '`';\n        })\n            .join('.');\n    }\n    /**\n     * Returns a string representation of this path.\n     *\n     * @private\n     * @returns A string representing this path.\n     */\n    toString() {\n        return this.formattedName;\n    }\n    /**\n     * Splits a string into path segments, using dots as separators.\n     *\n     * @private\n     * @override\n     * @param {string} fieldPath The path to split.\n     * @returns {Array.<string>} - The split path segments.\n     */\n    split(fieldPath) {\n        return fieldPath.split('.');\n    }\n    /**\n     * Constructs a new instance of FieldPath. We need this instead of using\n     * the normal constructor because polymorphic 'this' doesn't work on static\n     * methods.\n     *\n     * @private\n     * @override\n     * @param segments Sequence of field names.\n     * @returns The newly created FieldPath.\n     */\n    construct(segments) {\n        return new FieldPath(...segments);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldPath` is equal to the provided value.\n     */\n    isEqual(other) {\n        return super.isEqual(other);\n    }\n}\nexports.FieldPath = FieldPath;\n/**\n * A special sentinel value to refer to the ID of a document.\n *\n * @private\n */\nFieldPath._DOCUMENT_ID = new FieldPath('__name__');\n/**\n * Validates that the provided value can be used as a field path argument.\n *\n * @private\n * @param arg The argument name or argument index (for varargs methods).\n * @param fieldPath The value to verify.\n * @throws if the string can't be used as a field path.\n */\nfunction validateFieldPath(arg, fieldPath) {\n    if (fieldPath instanceof FieldPath) {\n        return;\n    }\n    if (fieldPath === undefined) {\n        throw new Error(validate_1.invalidArgumentMessage(arg, 'field path') + ' The path cannot be omitted.');\n    }\n    if (util_1.isObject(fieldPath) && fieldPath.constructor.name === 'FieldPath') {\n        throw new Error(validate_1.customObjectMessage(arg, fieldPath));\n    }\n    if (typeof fieldPath !== 'string') {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths can only be specified as strings or via a FieldPath object.`);\n    }\n    if (fieldPath.indexOf('..') >= 0) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths must not contain \"..\" in them.`);\n    }\n    if (fieldPath.startsWith('.') || fieldPath.endsWith('.')) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths must not start or end with \".\".`);\n    }\n    if (!FIELD_PATH_RE.test(fieldPath)) {\n        throw new Error(`${validate_1.invalidArgumentMessage(arg, 'field path')} Paths can't be empty and must not contain\n    \"*~/[]\".`);\n    }\n}\nexports.validateFieldPath = validateFieldPath;\n//# sourceMappingURL=path.js.map"]},"metadata":{},"sourceType":"script"}