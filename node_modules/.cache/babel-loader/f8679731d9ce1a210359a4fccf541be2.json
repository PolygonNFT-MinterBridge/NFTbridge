{"ast":null,"code":"/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Storage = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar credential_internal_1 = require(\"../credential/credential-internal\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n/**\n * The default `Storage` service if no\n * app is provided or the `Storage` service associated with the provided\n * app.\n */\n\n\nvar Storage =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app for this Storage service.\n   * @constructor\n   * @internal\n   */\n  function Storage(app) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseError({\n        code: 'storage/invalid-argument',\n        message: 'First argument passed to admin.storage() must be a valid Firebase app instance.'\n      });\n    }\n\n    var storage;\n\n    try {\n      storage = require('@google-cloud/storage').Storage;\n    } catch (err) {\n      throw new error_1.FirebaseError({\n        code: 'storage/missing-dependencies',\n        message: 'Failed to import the Cloud Storage client library for Node.js. ' + 'Make sure to install the \"@google-cloud/storage\" npm package. ' + (\"Original error: \" + err)\n      });\n    }\n\n    var projectId = utils.getExplicitProjectId(app);\n    var credential = app.options.credential;\n\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n      this.storageClient = new storage({\n        // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n        // guaranteed to be available.\n        projectId: projectId,\n        credentials: {\n          private_key: credential.privateKey,\n          client_email: credential.clientEmail\n        }\n      });\n    } else if (credential_internal_1.isApplicationDefault(app.options.credential)) {\n      // Try to use the Google application default credentials.\n      this.storageClient = new storage();\n    } else {\n      throw new error_1.FirebaseError({\n        code: 'storage/invalid-credential',\n        message: 'Failed to initialize Google Cloud Storage client with the available credential. ' + 'Must initialize the SDK with a certificate credential or application default credentials ' + 'to use Cloud Storage API.'\n      });\n    }\n\n    this.appInternal = app;\n  }\n  /**\n   * @param name Optional name of the bucket to be retrieved. If name is not specified,\n   * retrieves a reference to the default bucket.\n   * @returns A [Bucket](https://cloud.google.com/nodejs/docs/reference/storage/latest/Bucket)\n   * instance as defined in the `@google-cloud/storage` package.\n   */\n\n\n  Storage.prototype.bucket = function (name) {\n    var bucketName = typeof name !== 'undefined' ? name : this.appInternal.options.storageBucket;\n\n    if (validator.isNonEmptyString(bucketName)) {\n      return this.storageClient.bucket(bucketName);\n    }\n\n    throw new error_1.FirebaseError({\n      code: 'storage/invalid-argument',\n      message: 'Bucket name not specified or invalid. Specify a valid bucket name via the ' + 'storageBucket option when initializing the app, or specify the bucket name ' + 'explicitly when calling the getBucket() method.'\n    });\n  };\n\n  Object.defineProperty(Storage.prototype, \"app\", {\n    /**\n     * @return The app associated with this Storage instance.\n     */\n    get: function () {\n      return this.appInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Storage;\n}();\n\nexports.Storage = Storage;","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/firebase-admin/lib/storage/storage.js"],"names":["Object","defineProperty","exports","value","Storage","error_1","require","credential_internal_1","utils","validator","app","isNonNullObject","FirebaseError","code","message","storage","err","projectId","getExplicitProjectId","credential","options","ServiceAccountCredential","storageClient","credentials","private_key","privateKey","client_email","clientEmail","isApplicationDefault","appInternal","prototype","bucket","name","bucketName","storageBucket","isNonEmptyString","get","enumerable","configurable"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.6.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Storage = void 0;\nvar error_1 = require(\"../utils/error\");\nvar credential_internal_1 = require(\"../credential/credential-internal\");\nvar utils = require(\"../utils/index\");\nvar validator = require(\"../utils/validator\");\n/**\n * The default `Storage` service if no\n * app is provided or the `Storage` service associated with the provided\n * app.\n */\nvar Storage = /** @class */ (function () {\n    /**\n     * @param {FirebaseApp} app The app for this Storage service.\n     * @constructor\n     * @internal\n     */\n    function Storage(app) {\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseError({\n                code: 'storage/invalid-argument',\n                message: 'First argument passed to admin.storage() must be a valid Firebase app instance.',\n            });\n        }\n        var storage;\n        try {\n            storage = require('@google-cloud/storage').Storage;\n        }\n        catch (err) {\n            throw new error_1.FirebaseError({\n                code: 'storage/missing-dependencies',\n                message: 'Failed to import the Cloud Storage client library for Node.js. '\n                    + 'Make sure to install the \"@google-cloud/storage\" npm package. '\n                    + (\"Original error: \" + err),\n            });\n        }\n        var projectId = utils.getExplicitProjectId(app);\n        var credential = app.options.credential;\n        if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n            this.storageClient = new storage({\n                // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n                // guaranteed to be available.\n                projectId: projectId,\n                credentials: {\n                    private_key: credential.privateKey,\n                    client_email: credential.clientEmail,\n                },\n            });\n        }\n        else if (credential_internal_1.isApplicationDefault(app.options.credential)) {\n            // Try to use the Google application default credentials.\n            this.storageClient = new storage();\n        }\n        else {\n            throw new error_1.FirebaseError({\n                code: 'storage/invalid-credential',\n                message: 'Failed to initialize Google Cloud Storage client with the available credential. ' +\n                    'Must initialize the SDK with a certificate credential or application default credentials ' +\n                    'to use Cloud Storage API.',\n            });\n        }\n        this.appInternal = app;\n    }\n    /**\n     * @param name Optional name of the bucket to be retrieved. If name is not specified,\n     * retrieves a reference to the default bucket.\n     * @returns A [Bucket](https://cloud.google.com/nodejs/docs/reference/storage/latest/Bucket)\n     * instance as defined in the `@google-cloud/storage` package.\n     */\n    Storage.prototype.bucket = function (name) {\n        var bucketName = (typeof name !== 'undefined')\n            ? name : this.appInternal.options.storageBucket;\n        if (validator.isNonEmptyString(bucketName)) {\n            return this.storageClient.bucket(bucketName);\n        }\n        throw new error_1.FirebaseError({\n            code: 'storage/invalid-argument',\n            message: 'Bucket name not specified or invalid. Specify a valid bucket name via the ' +\n                'storageBucket option when initializing the app, or specify the bucket name ' +\n                'explicitly when calling the getBucket() method.',\n        });\n    };\n    Object.defineProperty(Storage.prototype, \"app\", {\n        /**\n         * @return The app associated with this Storage instance.\n         */\n        get: function () {\n            return this.appInternal;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Storage;\n}());\nexports.Storage = Storage;\n"]},"metadata":{},"sourceType":"script"}