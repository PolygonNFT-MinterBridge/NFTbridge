{"ast":null,"code":"/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function () {\n  var cache; // Call this function without `new` to use the cached object (good for\n  // single-threaded environments), or with `new` to create a new object.\n  //\n  // @param {string} key A UTF-16 or ASCII string\n  // @param {number} seed An optional positive integer\n  // @return {object} A MurmurHash3 object for incremental hashing\n\n  function MurmurHash3(key, seed) {\n    var m = this instanceof MurmurHash3 ? this : cache;\n    m.reset(seed);\n\n    if (typeof key === 'string' && key.length > 0) {\n      m.hash(key);\n    }\n\n    if (m !== this) {\n      return m;\n    }\n  }\n\n  ; // Incrementally add a string to this hash\n  //\n  // @param {string} key A UTF-16 or ASCII string\n  // @return {object} this\n\n  MurmurHash3.prototype.hash = function (key) {\n    var h1, k1, i, top, len;\n    len = key.length;\n    this.len += len;\n    k1 = this.k1;\n    i = 0;\n\n    switch (this.rem) {\n      case 0:\n        k1 ^= len > i ? key.charCodeAt(i++) & 0xffff : 0;\n\n      case 1:\n        k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n\n      case 2:\n        k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n\n      case 3:\n        k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n        k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n    }\n\n    this.rem = len + this.rem & 3; // & 3 is same as % 4\n\n    len -= this.rem;\n\n    if (len > 0) {\n      h1 = this.h1;\n\n      while (1) {\n        k1 = k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000 & 0xffffffff;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000 & 0xffffffff;\n        h1 ^= k1;\n        h1 = h1 << 13 | h1 >>> 19;\n        h1 = h1 * 5 + 0xe6546b64 & 0xffffffff;\n\n        if (i >= len) {\n          break;\n        }\n\n        k1 = key.charCodeAt(i++) & 0xffff ^ (key.charCodeAt(i++) & 0xffff) << 8 ^ (key.charCodeAt(i++) & 0xffff) << 16;\n        top = key.charCodeAt(i++);\n        k1 ^= (top & 0xff) << 24 ^ (top & 0xff00) >> 8;\n      }\n\n      k1 = 0;\n\n      switch (this.rem) {\n        case 3:\n          k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n\n        case 2:\n          k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n\n        case 1:\n          k1 ^= key.charCodeAt(i) & 0xffff;\n      }\n\n      this.h1 = h1;\n    }\n\n    this.k1 = k1;\n    return this;\n  }; // Get the result of this hash\n  //\n  // @return {number} The 32-bit hash\n\n\n  MurmurHash3.prototype.result = function () {\n    var k1, h1;\n    k1 = this.k1;\n    h1 = this.h1;\n\n    if (k1 > 0) {\n      k1 = k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000 & 0xffffffff;\n      k1 = k1 << 15 | k1 >>> 17;\n      k1 = k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000 & 0xffffffff;\n      h1 ^= k1;\n    }\n\n    h1 ^= this.len;\n    h1 ^= h1 >>> 16;\n    h1 = h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000 & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000 & 0xffffffff;\n    h1 ^= h1 >>> 16;\n    return h1 >>> 0;\n  }; // Reset the hash object for reuse\n  //\n  // @param {number} seed An optional positive integer\n\n\n  MurmurHash3.prototype.reset = function (seed) {\n    this.h1 = typeof seed === 'number' ? seed : 0;\n    this.rem = this.k1 = this.len = 0;\n    return this;\n  }; // A cached object to use. This can be safely used if you're in a single-\n  // threaded environment, otherwise you need to create new hashes to use.\n\n\n  cache = new MurmurHash3();\n\n  if (typeof module != 'undefined') {\n    module.exports = MurmurHash3;\n  } else {\n    this.MurmurHash3 = MurmurHash3;\n  }\n})();","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/node_modules/imurmurhash/imurmurhash.js"],"names":["cache","MurmurHash3","key","seed","m","reset","length","hash","prototype","h1","k1","i","top","len","rem","charCodeAt","result","module","exports"],"mappings":"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","sourcesContent":["/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function(){\n    var cache;\n\n    // Call this function without `new` to use the cached object (good for\n    // single-threaded environments), or with `new` to create a new object.\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @param {number} seed An optional positive integer\n    // @return {object} A MurmurHash3 object for incremental hashing\n    function MurmurHash3(key, seed) {\n        var m = this instanceof MurmurHash3 ? this : cache;\n        m.reset(seed)\n        if (typeof key === 'string' && key.length > 0) {\n            m.hash(key);\n        }\n\n        if (m !== this) {\n            return m;\n        }\n    };\n\n    // Incrementally add a string to this hash\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @return {object} this\n    MurmurHash3.prototype.hash = function(key) {\n        var h1, k1, i, top, len;\n\n        len = key.length;\n        this.len += len;\n\n        k1 = this.k1;\n        i = 0;\n        switch (this.rem) {\n            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;\n            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n            case 3:\n                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n        }\n\n        this.rem = (len + this.rem) & 3; // & 3 is same as % 4\n        len -= this.rem;\n        if (len > 0) {\n            h1 = this.h1;\n            while (1) {\n                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n                k1 = (k1 << 15) | (k1 >>> 17);\n                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n\n                h1 ^= k1;\n                h1 = (h1 << 13) | (h1 >>> 19);\n                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;\n\n                if (i >= len) {\n                    break;\n                }\n\n                k1 = ((key.charCodeAt(i++) & 0xffff)) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 8) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 16);\n                top = key.charCodeAt(i++);\n                k1 ^= ((top & 0xff) << 24) ^\n                      ((top & 0xff00) >> 8);\n            }\n\n            k1 = 0;\n            switch (this.rem) {\n                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);\n            }\n\n            this.h1 = h1;\n        }\n\n        this.k1 = k1;\n        return this;\n    };\n\n    // Get the result of this hash\n    //\n    // @return {number} The 32-bit hash\n    MurmurHash3.prototype.result = function() {\n        var k1, h1;\n        \n        k1 = this.k1;\n        h1 = this.h1;\n\n        if (k1 > 0) {\n            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n            h1 ^= k1;\n        }\n\n        h1 ^= this.len;\n\n        h1 ^= h1 >>> 16;\n        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;\n        h1 ^= h1 >>> 13;\n        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;\n        h1 ^= h1 >>> 16;\n\n        return h1 >>> 0;\n    };\n\n    // Reset the hash object for reuse\n    //\n    // @param {number} seed An optional positive integer\n    MurmurHash3.prototype.reset = function(seed) {\n        this.h1 = typeof seed === 'number' ? seed : 0;\n        this.rem = this.k1 = this.len = 0;\n        return this;\n    };\n\n    // A cached object to use. This can be safely used if you're in a single-\n    // threaded environment, otherwise you need to create new hashes to use.\n    cache = new MurmurHash3();\n\n    if (typeof(module) != 'undefined') {\n        module.exports = MurmurHash3;\n    } else {\n        this.MurmurHash3 = MurmurHash3;\n    }\n}());\n"]},"metadata":{},"sourceType":"script"}