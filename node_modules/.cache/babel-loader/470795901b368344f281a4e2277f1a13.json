{"ast":null,"code":"const POSClient = require(\"@maticnetwork/maticjs\");\n\nconst Network = require(\"@maticnetwork/meta/network\");\n\nconst Web3 = require(\"web3\");\n\nconst config = require(\"./config\");\n\nconst rootChainManager = require(\"./abi/rootChainManager\");\n\nconst network_testnet = new Network(\"testnet\", \"mumbai\");\nconst network_mainnet = new Network(\"mainnet\", \"v1\"); // will change http to wss (in config.json) if waiting for checkpoint is required in UI\n\nconst ethreum_provider_testnet = new Web3.providers.HttpProvider(config.GOERLI_RPC);\nconst ethreum_provider_mainnet = new Web3.providers.HttpProvider(config.ETH_RPC);\nconst matic_provider_testnet = new Web3.providers.HttpProvider(network_testnet.Matic.RPC);\nconst matic_provider_mainnet = new Web3.providers.HttpProvider(network_mainnet.Matic.RPC);\n/**\n * use rootChainPrimaryProvider when primary (i.e provider injected by browser is connected\n * to eth/goerli)\n * \n * returns matic's POS client instance used while calling maticjs functions\n */\n\nexport const rootChainPrimaryProvider = async (injected_provider, tokenAddr = null) => {\n  let network_, version_, provider_, posRootChainManager_, posERC721Predicate_, posERC1155Predicate_;\n  let web3, contract, isMintable;\n  const chainId = await injected_provider.eth.net.getId();\n\n  if (chainId === 1) {\n    network_ = \"mainnet\";\n    version_ = \"v1\";\n    provider_ = matic_provider_mainnet;\n    posRootChainManager_ = network_mainnet.Main.POSContracts.RootChainManagerProxy;\n    web3 = await new Web3(new Web3.providers.HttpProvider(config.ETH_RPC));\n    contract = await new web3.eth.Contract(rootChainManager, config.ROOTCHAIN_MANAGER_PROXY_MAINNET);\n\n    if (tokenAddr) {\n      isMintable = await contract.methods.tokenToType(tokenAddr).call().then(value => {\n        if (value === \"0xd4392723c111fcb98b073fe55873efb447bcd23cd3e49ec9ea2581930cd01ddc\" || value === \"0xb62883a28321b19a93c6657bfb8ea4cec51ed05c3ab26ecec680fa0c7efb31b9\") {\n          console.log(value);\n          return true;\n        } else {\n          console.log(value);\n          return false;\n        }\n      });\n    }\n\n    if (isMintable) {\n      posERC721Predicate_ = network_mainnet.Main.POSContracts.MintableERC721PredicateProxy;\n      posERC1155Predicate_ = network_mainnet.Main.POSContracts.MintableERC1155PredicateProxy;\n    } else {\n      posERC721Predicate_ = network_mainnet.Main.POSContracts.ERC721PredicateProxy;\n      posERC1155Predicate_ = network_mainnet.Main.POSContracts.ERC1155PredicateProxy;\n    }\n  } else {\n    // chainId === 5\n    network_ = \"tesntet\";\n    version_ = \"mumbai\";\n    provider_ = matic_provider_testnet;\n    posRootChainManager_ = network_testnet.Main.POSContracts.RootChainManagerProxy;\n    web3 = await new Web3(new Web3.providers.HttpProvider(config.GOERLI_RPC));\n    contract = await new web3.eth.Contract(rootChainManager, config.ROOTCHAIN_MANAGER_PROXY_GOERLI);\n\n    if (tokenAddr) {\n      isMintable = await contract.methods.tokenToType(tokenAddr).call().then(value => {\n        if (value === \"0xd4392723c111fcb98b073fe55873efb447bcd23cd3e49ec9ea2581930cd01ddc\" || value === \"0xb62883a28321b19a93c6657bfb8ea4cec51ed05c3ab26ecec680fa0c7efb31b9\") {\n          console.log(value);\n          return true;\n        } else {\n          console.log(value);\n          return false;\n        }\n      });\n    }\n\n    console.log(isMintable);\n\n    if (isMintable) {\n      posERC721Predicate_ = network_testnet.Main.POSContracts.MintableERC721PredicateProxy;\n      posERC1155Predicate_ = network_testnet.Main.POSContracts.MintableERC1155PredicateProxy;\n    } else {\n      posERC721Predicate_ = network_testnet.Main.POSContracts.ERC721PredicateProxy;\n      posERC1155Predicate_ = network_testnet.Main.POSContracts.ERC1155PredicateProxy;\n    }\n  }\n\n  const account = await injected_provider.eth.getAccounts(); // console.log(account)\n\n  console.log(injected_provider);\n  console.log(network_, version_, provider_, posRootChainManager_, posERC721Predicate_, posERC1155Predicate_);\n\n  try {\n    const posClient = new POSClient();\n    await posClient.init({\n      network: \"testnet\",\n      version: \"mumbai\",\n      // maticProvider: provider_,// injected_provider,\n      // parentProvider: injected_provider,// provider_,\n      // posRootChainManager: posRootChainManager_,\n      // posERC721Predicate: posERC721Predicate_,\n      // posERC1155Predicate: posERC1155Predicate_,\n      // parentDefaultOptions: { from: account[0] },\n      // maticDefaultOptions: { from: account[0] },\n      parent: {\n        provider: injected_provider,\n        defaultConfig: {\n          from: account[0]\n        }\n      },\n      child: {\n        provider: provider_,\n        defaultConfig: {\n          from: account[0]\n        }\n      }\n    });\n    return posClient;\n  } catch (e) {\n    console.error(e); // handle error\n  }\n};\n/**\n * use childChainPrimaryProvider when primary (i.e provider injected by browser is connected\n * to mumbai/matic)\n * \n * returns matic's POS client instance used while calling maticjs functions\n */\n\nexport const childChainPrimaryProvider = async injected_provider => {\n  let network_, version_, provider_, posRootChainManager_, posERC721Predicate_, posERC1155Predicate_;\n  const chainId = await injected_provider.eth.net.getId();\n  console.log(chainId);\n\n  if (chainId === 137) {\n    network_ = \"mainnet\";\n    version_ = \"v1\";\n    provider_ = ethreum_provider_mainnet;\n    posRootChainManager_ = network_mainnet.Main.POSContracts.RootChainManagerProxy;\n    posERC721Predicate_ = network_mainnet.Main.POSContracts.ERC721PredicateProxy;\n    posERC1155Predicate_ = network_mainnet.Main.POSContracts.ERC1155PredicateProxy;\n  } else {\n    // chainId === 80001\n    network_ = \"testnet\";\n    version_ = \"mumbai\";\n    provider_ = ethreum_provider_testnet;\n    posRootChainManager_ = network_testnet.Main.POSContracts.RootChainManagerProxy;\n    posERC721Predicate_ = network_testnet.Main.POSContracts.ERC721PredicateProxy;\n    posERC1155Predicate_ = network_testnet.Main.POSContracts.ERC1155PredicateProxy;\n  }\n\n  const account = await injected_provider.eth.getAccounts(); // console.log(account)\n\n  console.log(injected_provider);\n  console.log(network_, version_, provider_, posRootChainManager_, posERC721Predicate_, posERC1155Predicate_); // try {\n\n  const posClient = new POSClient();\n  const POSclient = await posClient.init({\n    network: network_,\n    version: version_,\n    parent: {\n      provider: provider_,\n      defaultConfig: {\n        from: account[0]\n      }\n    },\n    child: {\n      provider: injected_provider,\n      defaultConfig: {\n        from: account[0]\n      }\n    }\n  });\n  return POSclient; // const POSClient = new POSClient({\n  //     network: network_,\n  //     version: version_,\n  //     maticProvider: injected_provider,\n  //     parentProvider: provider_,\n  //     posRootChainManager: posRootChainManager_,\n  //     posERC721Predicate: posERC721Predicate_,\n  //     posERC1155Predicate: posERC1155Predicate_,\n  //     parentDefaultOptions: { from: account[0] },\n  //     maticDefaultOptions: { from: account[0] },\n  // })\n  // return POSClient\n  // } catch (e) {\n  //     console.error(\"Unable to create maticPOSClient\", e)\n  // }\n};","map":{"version":3,"sources":["/Users/pulkitmittal/nft-bridge/NFTbridge/src/utils/providers.js"],"names":["POSClient","require","Network","Web3","config","rootChainManager","network_testnet","network_mainnet","ethreum_provider_testnet","providers","HttpProvider","GOERLI_RPC","ethreum_provider_mainnet","ETH_RPC","matic_provider_testnet","Matic","RPC","matic_provider_mainnet","rootChainPrimaryProvider","injected_provider","tokenAddr","network_","version_","provider_","posRootChainManager_","posERC721Predicate_","posERC1155Predicate_","web3","contract","isMintable","chainId","eth","net","getId","Main","POSContracts","RootChainManagerProxy","Contract","ROOTCHAIN_MANAGER_PROXY_MAINNET","methods","tokenToType","call","then","value","console","log","MintableERC721PredicateProxy","MintableERC1155PredicateProxy","ERC721PredicateProxy","ERC1155PredicateProxy","ROOTCHAIN_MANAGER_PROXY_GOERLI","account","getAccounts","posClient","init","network","version","parent","provider","defaultConfig","from","child","e","error","childChainPrimaryProvider","POSclient"],"mappings":"AAAA,MAAMA,SAAS,GAAEC,OAAO,CAAC,uBAAD,CAAxB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,4BAAD,CAAvB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,wBAAD,CAAhC;;AAEA,MAAMK,eAAe,GAAG,IAAIJ,OAAJ,CAAY,SAAZ,EAAuB,QAAvB,CAAxB;AACA,MAAMK,eAAe,GAAG,IAAIL,OAAJ,CAAY,SAAZ,EAAuB,IAAvB,CAAxB,C,CAEA;;AAEA,MAAMM,wBAAwB,GAAG,IAAIL,IAAI,CAACM,SAAL,CAAeC,YAAnB,CAAgCN,MAAM,CAACO,UAAvC,CAAjC;AACA,MAAMC,wBAAwB,GAAG,IAAIT,IAAI,CAACM,SAAL,CAAeC,YAAnB,CAAgCN,MAAM,CAACS,OAAvC,CAAjC;AAEA,MAAMC,sBAAsB,GAAG,IAAIX,IAAI,CAACM,SAAL,CAAeC,YAAnB,CAAgCJ,eAAe,CAACS,KAAhB,CAAsBC,GAAtD,CAA/B;AACA,MAAMC,sBAAsB,GAAG,IAAId,IAAI,CAACM,SAAL,CAAeC,YAAnB,CAAgCH,eAAe,CAACQ,KAAhB,CAAsBC,GAAtD,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,wBAAwB,GAAG,OAAOC,iBAAP,EAA0BC,SAAS,GAAC,IAApC,KAA6C;AACjF,MAAIC,QAAJ,EAAcC,QAAd,EAAwBC,SAAxB,EAAmCC,oBAAnC,EAAyDC,mBAAzD,EAA8EC,oBAA9E;AACA,MAAIC,IAAJ,EAAUC,QAAV,EAAoBC,UAApB;AAEA,QAAMC,OAAO,GAAG,MAAMX,iBAAiB,CAACY,GAAlB,CAAsBC,GAAtB,CAA0BC,KAA1B,EAAtB;;AAEA,MAAIH,OAAO,KAAK,CAAhB,EAAmB;AACfT,IAAAA,QAAQ,GAAG,SAAX;AACAC,IAAAA,QAAQ,GAAG,IAAX;AACAC,IAAAA,SAAS,GAAGN,sBAAZ;AACAO,IAAAA,oBAAoB,GAAGjB,eAAe,CAAC2B,IAAhB,CAAqBC,YAArB,CAAkCC,qBAAzD;AAEAT,IAAAA,IAAI,GAAG,MAAM,IAAIxB,IAAJ,CAAS,IAAIA,IAAI,CAACM,SAAL,CAAeC,YAAnB,CAAgCN,MAAM,CAACS,OAAvC,CAAT,CAAb;AAEAe,IAAAA,QAAQ,GAAG,MAAM,IAAID,IAAI,CAACI,GAAL,CAASM,QAAb,CACbhC,gBADa,EAEbD,MAAM,CAACkC,+BAFM,CAAjB;;AAKA,QAAGlB,SAAH,EAAa;AACTS,MAAAA,UAAU,GAAG,MAAMD,QAAQ,CAACW,OAAT,CAAiBC,WAAjB,CAA6BpB,SAA7B,EAAwCqB,IAAxC,GAA+CC,IAA/C,CACdC,KAAD,IAAW;AACP,YAAIA,KAAK,KAAK,oEAAV,IACGA,KAAK,KAAK,oEADjB,EAEE;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,iBAAO,IAAP;AACH,SALD,MAMK;AACDC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,iBAAO,KAAP;AACH;AACJ,OAZc,CAAnB;AAcH;;AAED,QAAId,UAAJ,EAAgB;AACZJ,MAAAA,mBAAmB,GAAGlB,eAAe,CAAC2B,IAAhB,CAAqBC,YAArB,CAAkCW,4BAAxD;AACApB,MAAAA,oBAAoB,GAAGnB,eAAe,CAAC2B,IAAhB,CAAqBC,YAArB,CAAkCY,6BAAzD;AACH,KAHD,MAIK;AACDtB,MAAAA,mBAAmB,GAAGlB,eAAe,CAAC2B,IAAhB,CAAqBC,YAArB,CAAkCa,oBAAxD;AACAtB,MAAAA,oBAAoB,GAAGnB,eAAe,CAAC2B,IAAhB,CAAqBC,YAArB,CAAkCc,qBAAzD;AACH;AACJ,GAtCD,MAuCK;AAAE;AACH5B,IAAAA,QAAQ,GAAG,SAAX;AACAC,IAAAA,QAAQ,GAAG,QAAX;AACAC,IAAAA,SAAS,GAAGT,sBAAZ;AACAU,IAAAA,oBAAoB,GAAGlB,eAAe,CAAC4B,IAAhB,CAAqBC,YAArB,CAAkCC,qBAAzD;AAEAT,IAAAA,IAAI,GAAG,MAAM,IAAIxB,IAAJ,CAAS,IAAIA,IAAI,CAACM,SAAL,CAAeC,YAAnB,CAAgCN,MAAM,CAACO,UAAvC,CAAT,CAAb;AAEAiB,IAAAA,QAAQ,GAAG,MAAM,IAAID,IAAI,CAACI,GAAL,CAASM,QAAb,CACbhC,gBADa,EAEbD,MAAM,CAAC8C,8BAFM,CAAjB;;AAKA,QAAG9B,SAAH,EAAa;AACTS,MAAAA,UAAU,GAAG,MAAMD,QAAQ,CAACW,OAAT,CAAiBC,WAAjB,CAA6BpB,SAA7B,EAAwCqB,IAAxC,GAA+CC,IAA/C,CACdC,KAAD,IAAW;AACP,YAAIA,KAAK,KAAK,oEAAV,IACGA,KAAK,KAAK,oEADjB,EAEE;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,iBAAO,IAAP;AACH,SALD,MAMK;AACDC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,iBAAO,KAAP;AACH;AACJ,OAZc,CAAnB;AAcH;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAYhB,UAAZ;;AAEA,QAAIA,UAAJ,EAAgB;AACZJ,MAAAA,mBAAmB,GAAGnB,eAAe,CAAC4B,IAAhB,CAAqBC,YAArB,CAAkCW,4BAAxD;AACApB,MAAAA,oBAAoB,GAAGpB,eAAe,CAAC4B,IAAhB,CAAqBC,YAArB,CAAkCY,6BAAzD;AACH,KAHD,MAIK;AACDtB,MAAAA,mBAAmB,GAAGnB,eAAe,CAAC4B,IAAhB,CAAqBC,YAArB,CAAkCa,oBAAxD;AACAtB,MAAAA,oBAAoB,GAAGpB,eAAe,CAAC4B,IAAhB,CAAqBC,YAArB,CAAkCc,qBAAzD;AACH;AAEJ;;AAED,QAAME,OAAO,GAAG,MAAMhC,iBAAiB,CAACY,GAAlB,CAAsBqB,WAAtB,EAAtB,CAxFiF,CAyFjF;;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY1B,iBAAZ;AACAyB,EAAAA,OAAO,CAACC,GAAR,CAAYxB,QAAZ,EAAsBC,QAAtB,EAAgCC,SAAhC,EAA2CC,oBAA3C,EAAiEC,mBAAjE,EAAsFC,oBAAtF;;AAEA,MAAI;AACA,UAAM2B,SAAS,GAAG,IAAIrD,SAAJ,EAAlB;AACC,UAAMqD,SAAS,CAACC,IAAV,CAAe;AAClBC,MAAAA,OAAO,EAAE,SADS;AAElBC,MAAAA,OAAO,EAAE,QAFS;AAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAEvC,iBADN;AAEJwC,QAAAA,aAAa,EAAE;AACVC,UAAAA,IAAI,EAAET,OAAO,CAAC,CAAD;AADH;AAFX,OAVU;AAgBhBU,MAAAA,KAAK,EAAE;AACLH,QAAAA,QAAQ,EAAEnC,SADL;AAELoC,QAAAA,aAAa,EAAE;AACXC,UAAAA,IAAI,EAAET,OAAO,CAAC,CAAD;AADF;AAFV;AAhBS,KAAf,CAAN;AAwBD,WAAOE,SAAP;AAEH,GA5BD,CA4BE,OAAOS,CAAP,EAAU;AACRlB,IAAAA,OAAO,CAACmB,KAAR,CAAcD,CAAd,EADQ,CAER;AACH;AACJ,CA7HM;AA+HP;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,yBAAyB,GAAG,MAAO7C,iBAAP,IAA6B;AAClE,MAAIE,QAAJ,EAAcC,QAAd,EAAwBC,SAAxB,EAAmCC,oBAAnC,EAAyDC,mBAAzD,EAA8EC,oBAA9E;AAEA,QAAMI,OAAO,GAAG,MAAMX,iBAAiB,CAACY,GAAlB,CAAsBC,GAAtB,CAA0BC,KAA1B,EAAtB;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYf,OAAZ;;AACA,MAAIA,OAAO,KAAK,GAAhB,EAAqB;AACjBT,IAAAA,QAAQ,GAAG,SAAX;AACAC,IAAAA,QAAQ,GAAG,IAAX;AACAC,IAAAA,SAAS,GAAGX,wBAAZ;AACAY,IAAAA,oBAAoB,GAAGjB,eAAe,CAAC2B,IAAhB,CAAqBC,YAArB,CAAkCC,qBAAzD;AACAX,IAAAA,mBAAmB,GAAGlB,eAAe,CAAC2B,IAAhB,CAAqBC,YAArB,CAAkCa,oBAAxD;AACAtB,IAAAA,oBAAoB,GAAGnB,eAAe,CAAC2B,IAAhB,CAAqBC,YAArB,CAAkCc,qBAAzD;AACH,GAPD,MAQK;AAAE;AACH5B,IAAAA,QAAQ,GAAG,SAAX;AACAC,IAAAA,QAAQ,GAAG,QAAX;AACAC,IAAAA,SAAS,GAAGf,wBAAZ;AACAgB,IAAAA,oBAAoB,GAAGlB,eAAe,CAAC4B,IAAhB,CAAqBC,YAArB,CAAkCC,qBAAzD;AACAX,IAAAA,mBAAmB,GAAGnB,eAAe,CAAC4B,IAAhB,CAAqBC,YAArB,CAAkCa,oBAAxD;AACAtB,IAAAA,oBAAoB,GAAGpB,eAAe,CAAC4B,IAAhB,CAAqBC,YAArB,CAAkCc,qBAAzD;AACH;;AAED,QAAME,OAAO,GAAG,MAAMhC,iBAAiB,CAACY,GAAlB,CAAsBqB,WAAtB,EAAtB,CAtBkE,CAuBlE;;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY1B,iBAAZ;AACAyB,EAAAA,OAAO,CAACC,GAAR,CAAYxB,QAAZ,EAAsBC,QAAtB,EAAgCC,SAAhC,EAA2CC,oBAA3C,EAAiEC,mBAAjE,EAAsFC,oBAAtF,EAzBkE,CA0BlE;;AACI,QAAM2B,SAAS,GAAG,IAAIrD,SAAJ,EAAlB;AACA,QAAMiE,SAAS,GAAG,MAAMZ,SAAS,CAACC,IAAV,CAAe;AACnCC,IAAAA,OAAO,EAAElC,QAD0B;AAEnCmC,IAAAA,OAAO,EAAElC,QAF0B;AAGnCmC,IAAAA,MAAM,EAAE;AACJC,MAAAA,QAAQ,EAAEnC,SADN;AAEJoC,MAAAA,aAAa,EAAE;AACVC,QAAAA,IAAI,EAAET,OAAO,CAAC,CAAD;AADH;AAFX,KAH2B;AASjCU,IAAAA,KAAK,EAAE;AACLH,MAAAA,QAAQ,EAAEvC,iBADL;AAELwC,MAAAA,aAAa,EAAE;AACXC,QAAAA,IAAI,EAAET,OAAO,CAAC,CAAD;AADF;AAFV;AAT0B,GAAf,CAAxB;AAiBA,SAAOc,SAAP,CA7C8D,CAgDlE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACH,CAjEM","sourcesContent":["const POSClient= require(\"@maticnetwork/maticjs\")\nconst Network = require(\"@maticnetwork/meta/network\")\nconst Web3 = require(\"web3\")\n\nconst config = require(\"./config\")\nconst rootChainManager = require(\"./abi/rootChainManager\")\n\nconst network_testnet = new Network(\"testnet\", \"mumbai\")\nconst network_mainnet = new Network(\"mainnet\", \"v1\")\n\n// will change http to wss (in config.json) if waiting for checkpoint is required in UI\n\nconst ethreum_provider_testnet = new Web3.providers.HttpProvider(config.GOERLI_RPC)\nconst ethreum_provider_mainnet = new Web3.providers.HttpProvider(config.ETH_RPC)\n\nconst matic_provider_testnet = new Web3.providers.HttpProvider(network_testnet.Matic.RPC)\nconst matic_provider_mainnet = new Web3.providers.HttpProvider(network_mainnet.Matic.RPC)\n\n/**\n * use rootChainPrimaryProvider when primary (i.e provider injected by browser is connected\n * to eth/goerli)\n * \n * returns matic's POS client instance used while calling maticjs functions\n */\n\nexport const rootChainPrimaryProvider = async (injected_provider, tokenAddr=null) => {\n    let network_, version_, provider_, posRootChainManager_, posERC721Predicate_, posERC1155Predicate_;\n    let web3, contract, isMintable;\n\n    const chainId = await injected_provider.eth.net.getId();\n\n    if (chainId === 1) {\n        network_ = \"mainnet\"\n        version_ = \"v1\"\n        provider_ = matic_provider_mainnet\n        posRootChainManager_ = network_mainnet.Main.POSContracts.RootChainManagerProxy\n\n        web3 = await new Web3(new Web3.providers.HttpProvider(config.ETH_RPC))\n\n        contract = await new web3.eth.Contract(\n            rootChainManager,\n            config.ROOTCHAIN_MANAGER_PROXY_MAINNET,\n        )\n\n        if(tokenAddr){\n            isMintable = await contract.methods.tokenToType(tokenAddr).call().then(\n                (value) => {\n                    if (value === \"0xd4392723c111fcb98b073fe55873efb447bcd23cd3e49ec9ea2581930cd01ddc\"\n                        || value === \"0xb62883a28321b19a93c6657bfb8ea4cec51ed05c3ab26ecec680fa0c7efb31b9\"\n                    ) {\n                        console.log(value)\n                        return true\n                    }\n                    else {\n                        console.log(value)\n                        return false\n                    }\n                }\n            )\n        }\n\n        if (isMintable) {\n            posERC721Predicate_ = network_mainnet.Main.POSContracts.MintableERC721PredicateProxy\n            posERC1155Predicate_ = network_mainnet.Main.POSContracts.MintableERC1155PredicateProxy\n        }\n        else {\n            posERC721Predicate_ = network_mainnet.Main.POSContracts.ERC721PredicateProxy\n            posERC1155Predicate_ = network_mainnet.Main.POSContracts.ERC1155PredicateProxy\n        }\n    }\n    else { // chainId === 5\n        network_ = \"tesntet\"\n        version_ = \"mumbai\"\n        provider_ = matic_provider_testnet\n        posRootChainManager_ = network_testnet.Main.POSContracts.RootChainManagerProxy\n\n        web3 = await new Web3(new Web3.providers.HttpProvider(config.GOERLI_RPC))\n\n        contract = await new web3.eth.Contract(\n            rootChainManager,\n            config.ROOTCHAIN_MANAGER_PROXY_GOERLI,\n        )\n\n        if(tokenAddr){\n            isMintable = await contract.methods.tokenToType(tokenAddr).call().then(\n                (value) => {\n                    if (value === \"0xd4392723c111fcb98b073fe55873efb447bcd23cd3e49ec9ea2581930cd01ddc\"\n                        || value === \"0xb62883a28321b19a93c6657bfb8ea4cec51ed05c3ab26ecec680fa0c7efb31b9\"\n                    ) {\n                        console.log(value)\n                        return true\n                    }\n                    else {\n                        console.log(value)\n                        return false\n                    }\n                }\n            )\n        }\n\n        console.log(isMintable)\n\n        if (isMintable) {\n            posERC721Predicate_ = network_testnet.Main.POSContracts.MintableERC721PredicateProxy\n            posERC1155Predicate_ = network_testnet.Main.POSContracts.MintableERC1155PredicateProxy\n        }\n        else {\n            posERC721Predicate_ = network_testnet.Main.POSContracts.ERC721PredicateProxy\n            posERC1155Predicate_ = network_testnet.Main.POSContracts.ERC1155PredicateProxy\n        }\n\n    }\n\n    const account = await injected_provider.eth.getAccounts();\n    // console.log(account)\n    console.log(injected_provider)\n    console.log(network_, version_, provider_, posRootChainManager_, posERC721Predicate_, posERC1155Predicate_)\n\n    try {\n        const posClient = new POSClient();\n         await posClient.init({\n            network: \"testnet\",\n            version: \"mumbai\",\n            // maticProvider: provider_,// injected_provider,\n            // parentProvider: injected_provider,// provider_,\n            // posRootChainManager: posRootChainManager_,\n            // posERC721Predicate: posERC721Predicate_,\n            // posERC1155Predicate: posERC1155Predicate_,\n            // parentDefaultOptions: { from: account[0] },\n            // maticDefaultOptions: { from: account[0] },\n            parent: {\n                provider: injected_provider,\n                defaultConfig: {\n                     from: account[0] \n                }\n              },\n              child: {\n                provider: provider_,\n                defaultConfig: {\n                    from: account[0]\n                }\n              }\n\n        })\n        return posClient\n\n    } catch (e) {\n        console.error(e)\n        // handle error\n    }\n}\n\n/**\n * use childChainPrimaryProvider when primary (i.e provider injected by browser is connected\n * to mumbai/matic)\n * \n * returns matic's POS client instance used while calling maticjs functions\n */\n\nexport const childChainPrimaryProvider = async (injected_provider) => {\n    let network_, version_, provider_, posRootChainManager_, posERC721Predicate_, posERC1155Predicate_;\n\n    const chainId = await injected_provider.eth.net.getId();\n    console.log(chainId)\n    if (chainId === 137) {\n        network_ = \"mainnet\"\n        version_ = \"v1\"\n        provider_ = ethreum_provider_mainnet\n        posRootChainManager_ = network_mainnet.Main.POSContracts.RootChainManagerProxy\n        posERC721Predicate_ = network_mainnet.Main.POSContracts.ERC721PredicateProxy\n        posERC1155Predicate_ = network_mainnet.Main.POSContracts.ERC1155PredicateProxy\n    }\n    else { // chainId === 80001\n        network_ = \"testnet\"\n        version_ = \"mumbai\"\n        provider_ = ethreum_provider_testnet\n        posRootChainManager_ = network_testnet.Main.POSContracts.RootChainManagerProxy\n        posERC721Predicate_ = network_testnet.Main.POSContracts.ERC721PredicateProxy\n        posERC1155Predicate_ = network_testnet.Main.POSContracts.ERC1155PredicateProxy\n    }\n\n    const account = await injected_provider.eth.getAccounts();\n    // console.log(account)\n    console.log(injected_provider)\n    console.log(network_, version_, provider_, posRootChainManager_, posERC721Predicate_, posERC1155Predicate_)\n    // try {\n        const posClient = new POSClient();\n        const POSclient = await posClient.init({\n            network: network_,\n            version: version_,\n            parent: {\n                provider: provider_,\n                defaultConfig: {\n                     from: account[0] \n                }\n              },\n              child: {\n                provider: injected_provider,\n                defaultConfig: {\n                    from: account[0]\n                }\n              }\n\n        })\n        return POSclient\n\n\n    // const POSClient = new POSClient({\n    //     network: network_,\n    //     version: version_,\n    //     maticProvider: injected_provider,\n    //     parentProvider: provider_,\n    //     posRootChainManager: posRootChainManager_,\n    //     posERC721Predicate: posERC721Predicate_,\n    //     posERC1155Predicate: posERC1155Predicate_,\n    //     parentDefaultOptions: { from: account[0] },\n    //     maticDefaultOptions: { from: account[0] },\n\n    // })\n    // return POSClient\n\n    // } catch (e) {\n    //     console.error(\"Unable to create maticPOSClient\", e)\n    // }\n}\n\n"]},"metadata":{},"sourceType":"module"}